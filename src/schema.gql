# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AccessPermissionInput {
  action: [ResourceAction!]!
  resource: String!
}

"""AccessRequest"""
type AccessRequest {
  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  docId: String!
  docType: String!
  id: ID!
  isActive: Boolean!
  reason: String
  requestedBy: String!
  reviewedAt: DateTime!
  reviewedBy: String!
  status: AccessRequestStatus

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
}

type AccessRequestAggregateGroupBy {
  createdAt: DateTime
  docId: String
  docType: String
  id: ID
  isActive: Boolean
  requestedBy: String
  reviewedAt: DateTime
  reviewedBy: String
  status: AccessRequestStatus
}

type AccessRequestConnection {
  """Array of nodes."""
  nodes: [AccessRequest!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type AccessRequestCountAggregate {
  createdAt: Int
  docId: Int
  docType: Int
  id: Int
  isActive: Int
  requestedBy: Int
  reviewedAt: Int
  reviewedBy: Int
  status: Int
}

input AccessRequestDeleteFilter {
  and: [AccessRequestDeleteFilter!]
  createdAt: DateFieldComparison
  docId: StringFieldComparison
  docType: StringFieldComparison
  id: IDFilterComparison
  isActive: BooleanFieldComparison
  or: [AccessRequestDeleteFilter!]
  requestedBy: StringFieldComparison
  reviewedAt: DateFieldComparison
  reviewedBy: StringFieldComparison
  status: AccessRequestStatusFilterComparison
}

type AccessRequestDeleteResponse {
  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  docId: String
  docType: String
  id: ID
  isActive: Boolean
  reason: String
  requestedBy: String
  reviewedAt: DateTime
  reviewedBy: String
  status: AccessRequestStatus

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
}

input AccessRequestFilter {
  and: [AccessRequestFilter!]
  createdAt: DateFieldComparison
  docId: StringFieldComparison
  docType: StringFieldComparison
  id: IDFilterComparison
  isActive: BooleanFieldComparison
  or: [AccessRequestFilter!]
  requestedBy: StringFieldComparison
  reviewedAt: DateFieldComparison
  reviewedBy: StringFieldComparison
  status: AccessRequestStatusFilterComparison
}

type AccessRequestMaxAggregate {
  createdAt: DateTime
  docId: String
  docType: String
  id: ID
  requestedBy: String
  reviewedAt: DateTime
  reviewedBy: String
  status: AccessRequestStatus
}

type AccessRequestMinAggregate {
  createdAt: DateTime
  docId: String
  docType: String
  id: ID
  requestedBy: String
  reviewedAt: DateTime
  reviewedBy: String
  status: AccessRequestStatus
}

input AccessRequestSort {
  direction: SortDirection!
  field: AccessRequestSortFields!
  nulls: SortNulls
}

enum AccessRequestSortFields {
  createdAt
  docId
  docType
  id
  isActive
  requestedBy
  reviewedAt
  reviewedBy
  status
}

enum AccessRequestStatus {
  ACCEPTED
  DECLINED
  PENDING
}

input AccessRequestStatusFilterComparison {
  eq: AccessRequestStatus
  gt: AccessRequestStatus
  gte: AccessRequestStatus
  iLike: AccessRequestStatus
  in: [AccessRequestStatus!]
  is: Boolean
  isNot: Boolean
  like: AccessRequestStatus
  lt: AccessRequestStatus
  lte: AccessRequestStatus
  neq: AccessRequestStatus
  notILike: AccessRequestStatus
  notIn: [AccessRequestStatus!]
  notLike: AccessRequestStatus
}

input AccessRequestUpdateFilter {
  and: [AccessRequestUpdateFilter!]
  createdAt: DateFieldComparison
  docId: StringFieldComparison
  docType: StringFieldComparison
  id: IDFilterComparison
  isActive: BooleanFieldComparison
  or: [AccessRequestUpdateFilter!]
  requestedBy: StringFieldComparison
  reviewedAt: DateFieldComparison
  reviewedBy: StringFieldComparison
  status: AccessRequestStatusFilterComparison
}

input AddRolesToCrewDetailInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input AddRolesToUserInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

"""AircraftCategory"""
type AircraftCategory {
  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  description: String!
  id: ID!
  isActive: Boolean!
  name: String!
  operator: operator!
  operatorId: String

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
}

type AircraftCategoryAggregateGroupBy {
  createdAt: DateTime
  description: String
  id: ID
  isActive: Boolean
  name: String
  operatorId: String
}

type AircraftCategoryConnection {
  """Array of nodes."""
  nodes: [AircraftCategory!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type AircraftCategoryCountAggregate {
  createdAt: Int
  description: Int
  id: Int
  isActive: Int
  name: Int
  operatorId: Int
}

input AircraftCategoryDeleteFilter {
  and: [AircraftCategoryDeleteFilter!]
  createdAt: DateFieldComparison
  description: StringFieldComparison
  id: IDFilterComparison
  isActive: BooleanFieldComparison
  name: StringFieldComparison
  operatorId: StringFieldComparison
  or: [AircraftCategoryDeleteFilter!]
}

type AircraftCategoryDeleteResponse {
  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  description: String
  id: ID
  isActive: Boolean
  name: String
  operatorId: String

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
}

input AircraftCategoryFilter {
  and: [AircraftCategoryFilter!]
  createdAt: DateFieldComparison
  description: StringFieldComparison
  id: IDFilterComparison
  isActive: BooleanFieldComparison
  name: StringFieldComparison
  operatorId: StringFieldComparison
  or: [AircraftCategoryFilter!]
}

type AircraftCategoryMaxAggregate {
  createdAt: DateTime
  description: String
  id: ID
  name: String
  operatorId: String
}

type AircraftCategoryMinAggregate {
  createdAt: DateTime
  description: String
  id: ID
  name: String
  operatorId: String
}

input AircraftCategorySort {
  direction: SortDirection!
  field: AircraftCategorySortFields!
  nulls: SortNulls
}

enum AircraftCategorySortFields {
  createdAt
  description
  id
  isActive
  name
  operatorId
}

input AircraftCategoryUpdateFilter {
  and: [AircraftCategoryUpdateFilter!]
  createdAt: DateFieldComparison
  description: StringFieldComparison
  id: IDFilterComparison
  isActive: BooleanFieldComparison
  name: StringFieldComparison
  operatorId: StringFieldComparison
  or: [AircraftCategoryUpdateFilter!]
}

"""Aircraft Detail"""
type AircraftDetail {
  code: String!

  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  description: String!
  flightImages: [String!]
  id: ID!
  isActive: Boolean!
  name: String!
  noteText: String
  operator: operator!
  operatorId: String
  rangeMapImage: String
  seatLayoutImage: String
  specifications: [JSONObject!]!

  """Flights/Helicoptor Terms and Conditions"""
  termsAndConditions: String!

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
  warningImage: String
  warningText: String
}

type AircraftDetailAggregateGroupBy {
  code: String
  createdAt: DateTime
  id: ID
  isActive: Boolean
  name: String
  operatorId: String
}

type AircraftDetailConnection {
  """Array of nodes."""
  nodes: [AircraftDetail!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type AircraftDetailCountAggregate {
  code: Int
  createdAt: Int
  id: Int
  isActive: Int
  name: Int
  operatorId: Int
}

input AircraftDetailDeleteFilter {
  and: [AircraftDetailDeleteFilter!]
  code: StringFieldComparison
  createdAt: DateFieldComparison
  id: IDFilterComparison
  isActive: BooleanFieldComparison
  name: StringFieldComparison
  operatorId: StringFieldComparison
  or: [AircraftDetailDeleteFilter!]
}

type AircraftDetailDeleteResponse {
  code: String

  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  description: String
  flightImages: [String!]
  id: ID
  isActive: Boolean
  name: String
  noteText: String
  operatorId: String
  rangeMapImage: String
  seatLayoutImage: String
  specifications: [JSONObject!]

  """Flights/Helicoptor Terms and Conditions"""
  termsAndConditions: String

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
  warningImage: String
  warningText: String
}

input AircraftDetailFilter {
  and: [AircraftDetailFilter!]
  code: StringFieldComparison
  createdAt: DateFieldComparison
  id: IDFilterComparison
  isActive: BooleanFieldComparison
  name: StringFieldComparison
  operatorId: StringFieldComparison
  or: [AircraftDetailFilter!]
}

type AircraftDetailMaxAggregate {
  code: String
  createdAt: DateTime
  id: ID
  name: String
  operatorId: String
}

type AircraftDetailMinAggregate {
  code: String
  createdAt: DateTime
  id: ID
  name: String
  operatorId: String
}

input AircraftDetailSort {
  direction: SortDirection!
  field: AircraftDetailSortFields!
  nulls: SortNulls
}

enum AircraftDetailSortFields {
  code
  createdAt
  id
  isActive
  name
  operatorId
}

input AircraftDetailUpdateFilter {
  and: [AircraftDetailUpdateFilter!]
  code: StringFieldComparison
  createdAt: DateFieldComparison
  id: IDFilterComparison
  isActive: BooleanFieldComparison
  name: StringFieldComparison
  operatorId: StringFieldComparison
  or: [AircraftDetailUpdateFilter!]
}

"""Airport"""
type Airport {
  city: String!
  closeHrs: String
  contactNumber: String
  country: String

  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  email: String
  fuelSuppliers: [fuelSupplierDTO!]!
  groundHandlersInfo: [groundHandlersInfoDTO!]!
  iata_code: String!
  icao_code: String!
  id: ID!
  isActive: Boolean!
  latitude: Float
  longitude: Float
  name: String!
  openHrs: String
  type: AirportType!

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
}

type AirportAggregateGroupBy {
  city: String
  closeHrs: String
  contactNumber: String
  country: String
  createdAt: DateTime
  email: String
  iata_code: String
  icao_code: String
  id: ID
  isActive: Boolean
  name: String
  openHrs: String
  type: AirportType
}

type AirportConnection {
  """Array of nodes."""
  nodes: [Airport!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type AirportCountAggregate {
  city: Int
  closeHrs: Int
  contactNumber: Int
  country: Int
  createdAt: Int
  email: Int
  iata_code: Int
  icao_code: Int
  id: Int
  isActive: Int
  name: Int
  openHrs: Int
  type: Int
}

input AirportDeleteFilter {
  and: [AirportDeleteFilter!]
  city: StringFieldComparison
  closeHrs: StringFieldComparison
  contactNumber: StringFieldComparison
  country: StringFieldComparison
  createdAt: DateFieldComparison
  email: StringFieldComparison
  iata_code: StringFieldComparison
  icao_code: StringFieldComparison
  id: IDFilterComparison
  isActive: BooleanFieldComparison
  name: StringFieldComparison
  openHrs: StringFieldComparison
  or: [AirportDeleteFilter!]
  type: AirportTypeFilterComparison
}

type AirportDeleteResponse {
  city: String
  closeHrs: String
  contactNumber: String
  country: String

  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  email: String
  fuelSuppliers: [fuelSupplierDTO!]
  groundHandlersInfo: [groundHandlersInfoDTO!]
  iata_code: String
  icao_code: String
  id: ID
  isActive: Boolean
  latitude: Float
  longitude: Float
  name: String
  openHrs: String
  type: AirportType

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
}

input AirportFilter {
  and: [AirportFilter!]
  city: StringFieldComparison
  closeHrs: StringFieldComparison
  contactNumber: StringFieldComparison
  country: StringFieldComparison
  createdAt: DateFieldComparison
  email: StringFieldComparison
  iata_code: StringFieldComparison
  icao_code: StringFieldComparison
  id: IDFilterComparison
  isActive: BooleanFieldComparison
  name: StringFieldComparison
  openHrs: StringFieldComparison
  or: [AirportFilter!]
  type: AirportTypeFilterComparison
}

type AirportMaxAggregate {
  city: String
  closeHrs: String
  contactNumber: String
  country: String
  createdAt: DateTime
  email: String
  iata_code: String
  icao_code: String
  id: ID
  name: String
  openHrs: String
  type: AirportType
}

type AirportMinAggregate {
  city: String
  closeHrs: String
  contactNumber: String
  country: String
  createdAt: DateTime
  email: String
  iata_code: String
  icao_code: String
  id: ID
  name: String
  openHrs: String
  type: AirportType
}

input AirportSort {
  direction: SortDirection!
  field: AirportSortFields!
  nulls: SortNulls
}

enum AirportSortFields {
  city
  closeHrs
  contactNumber
  country
  createdAt
  email
  iata_code
  icao_code
  id
  isActive
  name
  openHrs
  type
}

enum AirportType {
  AIR_STRIP
  CIVIL
  DEFENCE
  HELIPORT
}

input AirportTypeFilterComparison {
  eq: AirportType
  gt: AirportType
  gte: AirportType
  iLike: AirportType
  in: [AirportType!]
  is: Boolean
  isNot: Boolean
  like: AirportType
  lt: AirportType
  lte: AirportType
  neq: AirportType
  notILike: AirportType
  notIn: [AirportType!]
  notLike: AirportType
}

input AirportUpdateFilter {
  and: [AirportUpdateFilter!]
  city: StringFieldComparison
  closeHrs: StringFieldComparison
  contactNumber: StringFieldComparison
  country: StringFieldComparison
  createdAt: DateFieldComparison
  email: StringFieldComparison
  iata_code: StringFieldComparison
  icao_code: StringFieldComparison
  id: IDFilterComparison
  isActive: BooleanFieldComparison
  name: StringFieldComparison
  openHrs: StringFieldComparison
  or: [AirportUpdateFilter!]
  type: AirportTypeFilterComparison
}

type AssignedCrewDto {
  crews: [String!]!
  designation: String!
}

input BaInfo {
  baMachine: String
  baPersons: [BaPerson!]
  baReports: [BaReport!]
}

type BaInfoDto {
  baMachine: String
  baPersons: [BaPersonDto!]
  baReports: [BaReportDto!]
}

input BaPerson {
  age: String!
  certNo: String!
  gender: String!
  name: String!
}

type BaPersonDto {
  age: String!
  certNo: String!
  gender: String!
  name: String!
}

input BaReport {
  conductedDate: DateTime!
  name: String!
  reading: String!
  record: String!
  video: String
}

type BaReportDto {
  conductedDate: DateTime!
  name: String!
  reading: String!
  record: String!
  video: String
}

type BankDetailDto {
  accountNumber: String
  accountPayee: String
  bankName: String
  branch: String
  ifscCode: String
  isDefault: Boolean
  swiftCode: String
}

input BankDetailInput {
  accountNumber: String
  accountPayee: String
  bankName: String
  branch: String
  ifscCode: String
  isDefault: Boolean = false
  swiftCode: String
}

enum BillingCycle {
  MONTHLY
  QUARTERLY
  YEARLY
}

input BillingCycleFilterComparison {
  eq: BillingCycle
  gt: BillingCycle
  gte: BillingCycle
  iLike: BillingCycle
  in: [BillingCycle!]
  is: Boolean
  isNot: Boolean
  like: BillingCycle
  lt: BillingCycle
  lte: BillingCycle
  neq: BillingCycle
  notILike: BillingCycle
  notIn: [BillingCycle!]
  notLike: BillingCycle
}

input BooleanFieldComparison {
  is: Boolean
  isNot: Boolean
}

type CalenderData {
  aircraft: JSONObject!
  arrivalTime: String!
  depatureTime: String!
  destination: String!
  duration: String!
  end: DateTime!
  id: String!
  source: String!
  start: DateTime!
  title: String!
}

enum Category {
  CHARTER
  GROUND_RUN
  IN_HOUSE
  TEST_FLIGHT
  TRAINING
}

input CategoryFilterComparison {
  eq: Category
  gt: Category
  gte: Category
  iLike: Category
  in: [Category!]
  is: Boolean
  isNot: Boolean
  like: Category
  lt: Category
  lte: Category
  neq: Category
  notILike: Category
  notIn: [Category!]
  notLike: Category
}

type CertificationDto {
  dateOfIssue: DateTime
  issuedBy: String
  licenceNo: String
  name: String
  validTill: DateTime
}

input CertificationInput {
  dateOfIssue: DateTime
  issuedBy: String
  licenceNo: String
  name: String
  validTill: DateTime
}

type CertificationResponse {
  data: [JSONObject!]!
  totalCount: Int!
}

"""City"""
type City {
  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  id: ID!
  isActive: Boolean!
  name: String!
  state: String!

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
}

type CityAggregateGroupBy {
  createdAt: DateTime
  id: ID
  isActive: Boolean
  name: String
  state: String
}

type CityConnection {
  """Array of nodes."""
  nodes: [City!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type CityCountAggregate {
  createdAt: Int
  id: Int
  isActive: Int
  name: Int
  state: Int
}

input CityDeleteFilter {
  and: [CityDeleteFilter!]
  createdAt: DateFieldComparison
  id: IDFilterComparison
  isActive: BooleanFieldComparison
  name: StringFieldComparison
  or: [CityDeleteFilter!]
  state: StringFieldComparison
}

type CityDeleteResponse {
  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  id: ID
  isActive: Boolean
  name: String
  state: String

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
}

input CityFilter {
  and: [CityFilter!]
  createdAt: DateFieldComparison
  id: IDFilterComparison
  isActive: BooleanFieldComparison
  name: StringFieldComparison
  or: [CityFilter!]
  state: StringFieldComparison
}

type CityMaxAggregate {
  createdAt: DateTime
  id: ID
  name: String
  state: String
}

type CityMinAggregate {
  createdAt: DateTime
  id: ID
  name: String
  state: String
}

input CitySort {
  direction: SortDirection!
  field: CitySortFields!
  nulls: SortNulls
}

enum CitySortFields {
  createdAt
  id
  isActive
  name
  state
}

input CityUpdateFilter {
  and: [CityUpdateFilter!]
  createdAt: DateFieldComparison
  id: IDFilterComparison
  isActive: BooleanFieldComparison
  name: StringFieldComparison
  or: [CityUpdateFilter!]
  state: StringFieldComparison
}

type ClientConnection {
  """Array of nodes."""
  nodes: [client!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type ClientDeleteResponse {
  address: String
  billingAddress: String

  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  email: String
  gstNo: String
  id: ID
  isActive: Boolean
  isCompany: Boolean
  isPerson: Boolean
  lastName: String
  name: String
  operatorId: String
  panNo: String
  phone: String
  type: ClientType

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
}

enum ClientType {
  COMPANY
  OTHER
  PERSON
}

input ClientTypeFilterComparison {
  eq: ClientType
  gt: ClientType
  gte: ClientType
  iLike: ClientType
  in: [ClientType!]
  is: Boolean
  isNot: Boolean
  like: ClientType
  lt: ClientType
  lte: ClientType
  neq: ClientType
  notILike: ClientType
  notIn: [ClientType!]
  notLike: ClientType
}

"""Cursor for paging through collections"""
scalar ConnectionCursor

input CreateAccessRequest {
  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  docId: String
  docType: String
  id: ID
  isActive: Boolean = true
  reason: String
  requestedBy: String
  reviewedAt: DateTime
  reviewedBy: String
  status: AccessRequestStatus = PENDING

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
}

input CreateAircraftCategory {
  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  description: String
  id: ID
  isActive: Boolean = true
  name: String
  operatorId: String

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
}

input CreateAircraftDetail {
  code: String

  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  description: String
  flightImages: [String!]
  id: ID
  isActive: Boolean = true
  name: String
  noteText: String
  operatorId: String
  rangeMapImage: String
  seatLayoutImage: String
  specifications: [JSONObject!]

  """Flights/Helicoptor Terms and Conditions"""
  termsAndConditions: String

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
  warningImage: String
  warningText: String
}

input CreateAirport {
  city: String
  closeHrs: String
  contactNumber: String
  country: String

  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  email: String
  fuelSuppliers: [fuelSupplier!]
  groundHandlersInfo: [groundHandlersInfo!]
  iata_code: String
  icao_code: String
  id: ID
  isActive: Boolean = true
  latitude: Float
  longitude: Float
  name: String
  openHrs: String
  type: AirportType = CIVIL

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
}

input CreateCity {
  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  id: ID
  isActive: Boolean = true
  name: String
  state: String

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
}

input CreateClient {
  address: String
  billingAddress: String

  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  email: String
  gstNo: String
  id: ID
  isActive: Boolean = true
  isCompany: Boolean
  isPerson: Boolean
  lastName: String
  name: String
  operatorId: String
  panNo: String
  phone: String
  type: ClientType = PERSON

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
}

input CreateCrewDetail {
  aadhar: String
  alternateContact: String
  anniversaryDate: DateTime
  bankDetails: [BankDetailInput!]
  bloodGroup: String
  certifications: [certificationInput!]

  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String
  createdByUser: CrewDetailDto
  crewId: String
  currentAddress: String
  dateOfBirth: DateTime

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  designation: String
  displayName: String
  education: String
  email: String
  experience: String
  fullName: String
  gender: Gender
  gst: String
  id: ID
  isActive: Boolean = true
  location: String
  martialStatus: String
  nationality: String
  nominees: [nomineeInput!]
  operatorId: String
  pan: String
  passportNo: String
  permanentAddress: String
  phone: String
  profile: String
  religion: String
  roles: [String!]

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
}

input CreateCrewInput {
  crew: CrewInput!
}

input CreateInvoice {
  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  id: ID
  isActive: Boolean = true
  isLatest: Boolean = false
  operatorId: String
  paymentStatus: PaymentStatus = PENDING
  proformaInvoiceNo: String
  quotation: String
  quotationNo: String
  revision: Int = 0
  status: QuoteStatus = PROFOMA_INVOICE
  taxInvoiceNo: String
  template: String
  type: InvoiceType

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
}

input CreateLeave {
  attachment: String

  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String
  crew: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  fromDate: DateTime
  id: ID
  isActive: Boolean = true
  operatorId: String
  reason: String
  remark: String
  status: LeaveStatus = PENDING
  toDate: DateTime
  type: LeaveType

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
}

input CreateLibrary {
  attachment: String

  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  department: DepartmentType = OTHERS
  id: ID
  isActive: Boolean = true
  name: String
  operatorId: String

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
}

input CreateManual {
  attachment: String

  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  department: String
  id: ID
  isActive: Boolean = true
  name: String
  operatorId: String

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
}

input CreateManyAccessRequestsInput {
  """Array of records to create"""
  accessRequests: [CreateAccessRequest!]!
}

input CreateManyAircraftCategoriesInput {
  """Array of records to create"""
  aircraftCategories: [CreateAircraftCategory!]!
}

input CreateManyAircraftDetailsInput {
  """Array of records to create"""
  aircraftDetails: [CreateAircraftDetail!]!
}

input CreateManyAirportsInput {
  """Array of records to create"""
  airports: [CreateAirport!]!
}

input CreateManyCitiesInput {
  """Array of records to create"""
  cities: [CreateCity!]!
}

input CreateManyClientsInput {
  """Array of records to create"""
  clients: [CreateClient!]!
}

input CreateManyCrewDetailsInput {
  """Array of records to create"""
  crewDetails: [CreateCrewDetail!]!
}

input CreateManyInvoicesInput {
  """Array of records to create"""
  invoices: [CreateInvoice!]!
}

input CreateManyLeavesInput {
  """Array of records to create"""
  leaves: [CreateLeave!]!
}

input CreateManyLibrariesInput {
  """Array of records to create"""
  libraries: [CreateLibrary!]!
}

input CreateManyManualsInput {
  """Array of records to create"""
  manuals: [CreateManual!]!
}

input CreateManyNotificationsInput {
  """Array of records to create"""
  notifications: [CreateNotification!]!
}

input CreateManyOperatorsInput {
  """Array of records to create"""
  operators: [CreateOperator!]!
}

input CreateManyPassengerDetailsInput {
  """Array of records to create"""
  passengerDetails: [CreatePassengerDetail!]!
}

input CreateManyPricesInput {
  """Array of records to create"""
  prices: [CreatePrice!]!
}

input CreateManyQuotesInput {
  """Array of records to create"""
  quotes: [CreateQuote!]!
}

input CreateManyRepresentativesInput {
  """Array of records to create"""
  representatives: [CreateRepresentative!]!
}

input CreateManyResourcesInput {
  """Array of records to create"""
  resources: [CreateResource!]!
}

input CreateManyRolePermissionsInput {
  """Array of records to create"""
  rolePermissions: [CreateRolePermission!]!
}

input CreateManyRolesInput {
  """Array of records to create"""
  roles: [CreateRole!]!
}

input CreateManySecuritiesInput {
  """Array of records to create"""
  securities: [CreateSecurity!]!
}

input CreateManyTripDetailsInput {
  """Array of records to create"""
  tripDetails: [CreateTripDetail!]!
}

input CreateManyUsersInput {
  """Array of records to create"""
  users: [CreateUser!]!
}

input CreateNotification {
  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  id: ID
  isActive: Boolean = true
  isReadBy: [String!]
  message: String
  metadata: JSONObject
  recipientIds: [String!]
  recipientRoles: [String!]
  refId: String
  refType: String
  title: String
  type: String

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
}

input CreateOneAccessRequestInput {
  """The record to create"""
  accessRequest: CreateAccessRequest!
}

input CreateOneAircraftCategoryInput {
  """The record to create"""
  aircraftCategory: CreateAircraftCategory!
}

input CreateOneAircraftDetailInput {
  """The record to create"""
  aircraftDetail: CreateAircraftDetail!
}

input CreateOneAirportInput {
  """The record to create"""
  airport: CreateAirport!
}

input CreateOneCityInput {
  """The record to create"""
  city: CreateCity!
}

input CreateOneClientInput {
  """The record to create"""
  client: CreateClient!
}

input CreateOneCrewDetailInput {
  """The record to create"""
  crewDetail: CreateCrewDetail!
}

input CreateOneInvoiceInput {
  """The record to create"""
  invoice: CreateInvoice!
}

input CreateOneLeaveInput {
  """The record to create"""
  leave: CreateLeave!
}

input CreateOneLibraryInput {
  """The record to create"""
  library: CreateLibrary!
}

input CreateOneManualInput {
  """The record to create"""
  manual: CreateManual!
}

input CreateOneNotificationInput {
  """The record to create"""
  notification: CreateNotification!
}

input CreateOneOperatorInput {
  """The record to create"""
  operator: CreateOperator!
}

input CreateOnePassengerDetailInput {
  """The record to create"""
  passengerDetail: CreatePassengerDetail!
}

input CreateOnePriceInput {
  """The record to create"""
  price: CreatePrice!
}

input CreateOneQuoteInput {
  """The record to create"""
  quote: CreateQuote!
}

input CreateOneRepresentativeInput {
  """The record to create"""
  representative: CreateRepresentative!
}

input CreateOneResourceInput {
  """The record to create"""
  resource: CreateResource!
}

input CreateOneRoleInput {
  """The record to create"""
  role: CreateRole!
}

input CreateOneRolePermissionInput {
  """The record to create"""
  rolePermission: CreateRolePermission!
}

input CreateOneSecurityInput {
  """The record to create"""
  security: CreateSecurity!
}

input CreateOneTripDetailInput {
  """The record to create"""
  tripDetail: CreateTripDetail!
}

input CreateOperator {
  address: String
  billingCycle: BillingCycle
  city: String
  companyLogo: String
  companyName: String

  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String
  createdByUser: CrewDetailDto

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  email: String
  id: ID
  isActive: Boolean = true
  name: String
  phone: String
  pinCode: String
  state: String
  subscriptionPlan: SubscriptionPlan
  supportEmail: String
  themeColor: String
  ticketFooterNote: String

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
  websiteUrl: String
}

input CreatePassengerDetail {
  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  id: ID
  isActive: Boolean = true
  operatorId: String
  quotation: String
  quotationNo: String
  sectors: [sector!] = []

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
}

input CreatePrice {
  aircraft: String

  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  grandTotal: Float = 0
  id: ID
  isActive: Boolean = true
  prices: [priceInput!]

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
}

input CreateQuote {
  aircraft: String
  category: Category
  code: String
  confirmationTemplate: String

  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  grandTotal: Float = 0
  id: ID
  isActive: Boolean = true
  isLatest: Boolean = true
  itinerary: [JSONObject!]
  operatorId: String
  prices: [priceInput!] = []
  providerType: String = "airops"
  quotationNo: String
  representative: String
  requestedBy: String
  revision: Int = 0
  status: QuoteStatus = QUOTE

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
  version: Int = 1
}

input CreateRepresentative {
  address: String
  client: String

  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  email: String
  id: ID
  isActive: Boolean = true
  name: String
  phone: String

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
}

input CreateResource {
  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  icon: String
  id: ID
  isActive: Boolean = true
  menu: String
  segment: String
  title: String

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
}

input CreateRole {
  accessPermissions: [accessPermissionInput!]

  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  description: String
  id: ID
  isActive: Boolean = true
  name: String
  operatorId: String
  type: RoleType

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
}

input CreateRolePermission {
  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  id: ID
  isActive: Boolean = true
  permissions: [JSONObject!]
  role: String

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
}

input CreateSecurity {
  attachment: String

  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  department: DepartmentType = OTHERS
  id: ID
  isActive: Boolean = true
  name: String
  operatorId: String
  type: SecurityDocType

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
}

input CreateTripDetail {
  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  id: ID
  isActive: Boolean = true
  operatorId: String
  quotation: String
  quotationNo: String
  sectors: [TripSector!] = []
  status: TripDetailStatus = DRAFT
  tripId: String

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
}

input CreateTripInput {
  tripDetail: TripDetailDto!
}

input CreateUser {
  address: String
  city: String

  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String
  createdByUser: UserDTO

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  dob: String
  email: String
  gender: Gender
  id: ID
  image: String
  isActive: Boolean = true
  name: String
  operatorId: String
  password: String
  phone: String
  pinCode: String
  roles: [String!]
  type: type = PLATFORM_USER

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
}

input CreateUserInput {
  user: UserInputDto!
}

type CrewDetailConnection {
  """Array of nodes."""
  nodes: [crewDetail!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type CrewDetailDeleteResponse {
  aadhar: String
  alternateContact: String
  anniversaryDate: DateTime
  bankDetails: [BankDetailDto!]
  bloodGroup: String
  certifications: [CertificationDto!]

  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String
  createdByUser: crewDetail
  crewId: String
  currentAddress: String
  dateOfBirth: DateTime

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  designation: String
  displayName: String
  education: String
  email: String
  experience: String
  fullName: String
  gender: Gender
  gst: String
  id: ID
  isActive: Boolean
  location: String
  martialStatus: String
  nationality: String
  nominees: [NomineeDto!]
  operatorId: String
  pan: String
  passportNo: String
  permanentAddress: String
  phone: String
  profile: String
  religion: String
  roles: [String!]

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
}

input CrewDetailDto {
  aadhar: String
  alternateContact: String
  anniversaryDate: DateTime
  bankDetails: [BankDetailInput!]
  bloodGroup: String
  certifications: [certificationInput!]
  createdByUser: CrewDetailDto
  crewId: String
  currentAddress: String
  dateOfBirth: DateTime
  designation: String
  displayName: String
  education: String
  email: String
  experience: String
  fullName: String!
  gender: Gender
  gst: String
  location: String
  martialStatus: String
  nationality: String
  nominees: [nomineeInput!]
  operatorId: String
  pan: String
  passportNo: String
  permanentAddress: String
  phone: String
  profile: String
  religion: String
  roles: [String!]
}

input CrewDetailRolesFilterComparison {
  eq: [String!]
  in: [[String!]!]
  neq: [String!]
  notIn: [[String!]!]
}

input CrewInput {
  aadhar: String
  alternateContact: String
  anniversaryDate: DateTime
  bankDetails: [BankDetailInput!]
  bloodGroup: String
  certifications: [CertificationInput!]!
  crewId: String
  currentAddress: String
  dateOfBirth: DateTime
  designation: String
  displayName: String!
  education: String
  email: String
  experience: String
  fullName: String!
  gender: Gender!
  gst: String
  location: String
  martialStatus: String
  nationality: String
  nominees: [NomineeInput!]!
  operatorId: String
  pan: String
  passportNo: String
  permanentAddress: String
  phone: String!
  profile: String
  religion: String
  roles: [String!]!
}

input CursorPaging {
  """Paginate after opaque cursor"""
  after: ConnectionCursor

  """Paginate before opaque cursor"""
  before: ConnectionCursor

  """Paginate first"""
  first: Int

  """Paginate last"""
  last: Int
}

input DateFieldComparison {
  between: DateFieldComparisonBetween
  eq: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  is: Boolean
  isNot: Boolean
  lt: DateTime
  lte: DateTime
  neq: DateTime
  notBetween: DateFieldComparisonBetween
  notIn: [DateTime!]
}

input DateFieldComparisonBetween {
  lower: DateTime!
  upper: DateTime!
}

enum DateRange {
  custom
  lastMonth
  lastWeek
  today
  yesterday
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DeleteManyAccessRequestsInput {
  """Filter to find records to delete"""
  filter: AccessRequestDeleteFilter!
}

input DeleteManyAircraftCategoriesInput {
  """Filter to find records to delete"""
  filter: AircraftCategoryDeleteFilter!
}

input DeleteManyAircraftDetailsInput {
  """Filter to find records to delete"""
  filter: AircraftDetailDeleteFilter!
}

input DeleteManyAirportsInput {
  """Filter to find records to delete"""
  filter: AirportDeleteFilter!
}

input DeleteManyCitiesInput {
  """Filter to find records to delete"""
  filter: CityDeleteFilter!
}

input DeleteManyClientsInput {
  """Filter to find records to delete"""
  filter: clientDeleteFilter!
}

input DeleteManyCrewDetailsInput {
  """Filter to find records to delete"""
  filter: crewDetailDeleteFilter!
}

input DeleteManyInvoicesInput {
  """Filter to find records to delete"""
  filter: InvoiceDeleteFilter!
}

input DeleteManyLeavesInput {
  """Filter to find records to delete"""
  filter: LeaveDeleteFilter!
}

input DeleteManyLibrariesInput {
  """Filter to find records to delete"""
  filter: libraryDeleteFilter!
}

input DeleteManyManualsInput {
  """Filter to find records to delete"""
  filter: manualDeleteFilter!
}

input DeleteManyNotificationsInput {
  """Filter to find records to delete"""
  filter: notificationDeleteFilter!
}

input DeleteManyOperatorsInput {
  """Filter to find records to delete"""
  filter: operatorDeleteFilter!
}

input DeleteManyPassengerDetailsInput {
  """Filter to find records to delete"""
  filter: PassengerDetailDeleteFilter!
}

input DeleteManyPricesInput {
  """Filter to find records to delete"""
  filter: priceDeleteFilter!
}

input DeleteManyQuotesInput {
  """Filter to find records to delete"""
  filter: QuoteDeleteFilter!
}

input DeleteManyRepresentativesInput {
  """Filter to find records to delete"""
  filter: representativeDeleteFilter!
}

input DeleteManyResourcesInput {
  """Filter to find records to delete"""
  filter: resourceDeleteFilter!
}

type DeleteManyResponse {
  """The number of records deleted."""
  deletedCount: Int!
}

input DeleteManyRolePermissionsInput {
  """Filter to find records to delete"""
  filter: RolePermissionDeleteFilter!
}

input DeleteManyRolesInput {
  """Filter to find records to delete"""
  filter: roleDeleteFilter!
}

input DeleteManySecuritiesInput {
  """Filter to find records to delete"""
  filter: securityDeleteFilter!
}

input DeleteManyTripDetailsInput {
  """Filter to find records to delete"""
  filter: TripDetailDeleteFilter!
}

input DeleteManyUsersInput {
  """Filter to find records to delete"""
  filter: UserDeleteFilter!
}

input DeleteOneAccessRequestInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneAircraftCategoryInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneAircraftDetailInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneAirportInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneCityInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneClientInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneCrewDetailInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneInvoiceInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneLeaveInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneLibraryInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneManualInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneNotificationInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneOperatorInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOnePassengerDetailInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOnePriceInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneQuoteInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneRepresentativeInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneResourceInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneRoleInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneRolePermissionInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneSecurityInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneTripDetailInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneUserInput {
  """The id of the record to delete."""
  id: ID!
}

enum DepartmentType {
  ACCOUNTS
  ADMIN
  AUDIT
  CAMO
  ENGINEERING
  HR
  OPS
  OTHERS
  SALES
  SECURITY
  TRAINING
}

input DepartmentTypeFilterComparison {
  eq: DepartmentType
  gt: DepartmentType
  gte: DepartmentType
  iLike: DepartmentType
  in: [DepartmentType!]
  is: Boolean
  isNot: Boolean
  like: DepartmentType
  lt: DepartmentType
  lte: DepartmentType
  neq: DepartmentType
  notILike: DepartmentType
  notIn: [DepartmentType!]
  notLike: DepartmentType
}

type DocumentDto {
  externalLink: String
  fileUrl: String
  type: String!
}

input DocumentInput {
  externalLink: String
  fileUrl: String
  type: String!
}

type ForgotPasswordDto {
  message: String!
  status: Boolean!
}

type FuelRecordDto {
  designation: String
  fuelGauge: String
  fuelLoaded: String
  fuelOnArrival: String
  fuelStation: String
  handledBy: String
  uploadedDate: DateTime
}

input FuelRecordInput {
  designation: String
  fuelGauge: String
  fuelLoaded: String
  fuelOnArrival: String
  fuelStation: String
  handledBy: String
  uploadedDate: DateTime
}

enum Gender {
  FEMALE
  MALE
  OTHER
}

input GenerateInvoiceInput {
  id: String
  operatorId: String
  proformaInvoiceNo: String
  quotationNo: String
  type: InvoiceType! = PROFORMA_INVOICE
}

input IDFilterComparison {
  eq: ID
  gt: ID
  gte: ID
  iLike: ID
  in: [ID!]
  is: Boolean
  isNot: Boolean
  like: ID
  lt: ID
  lte: ID
  neq: ID
  notILike: ID
  notIn: [ID!]
  notLike: ID
}

"""Invoice"""
type Invoice {
  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  id: ID!
  isActive: Boolean!
  isLatest: Boolean!
  operatorId: String
  paymentStatus: PaymentStatus
  proformaInvoiceNo: String
  quotation: Quote!
  quotationNo: String!
  revision: Int!
  status: QuoteStatus
  taxInvoiceNo: String
  template: String!
  type: InvoiceType!

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
}

type InvoiceAggregateGroupBy {
  createdAt: DateTime
  id: ID
  isActive: Boolean
  isLatest: Boolean
  operatorId: String
  paymentStatus: PaymentStatus
  proformaInvoiceNo: String
  quotation: String
  quotationNo: String
  status: QuoteStatus
  taxInvoiceNo: String
  type: InvoiceType
}

type InvoiceConnection {
  """Array of nodes."""
  nodes: [Invoice!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type InvoiceCountAggregate {
  createdAt: Int
  id: Int
  isActive: Int
  isLatest: Int
  operatorId: Int
  paymentStatus: Int
  proformaInvoiceNo: Int
  quotation: Int
  quotationNo: Int
  status: Int
  taxInvoiceNo: Int
  type: Int
}

input InvoiceDeleteFilter {
  and: [InvoiceDeleteFilter!]
  createdAt: DateFieldComparison
  id: IDFilterComparison
  isActive: BooleanFieldComparison
  isLatest: BooleanFieldComparison
  operatorId: StringFieldComparison
  or: [InvoiceDeleteFilter!]
  paymentStatus: PaymentStatusFilterComparison
  proformaInvoiceNo: StringFieldComparison
  quotation: StringFieldComparison
  quotationNo: StringFieldComparison
  status: QuoteStatusFilterComparison
  taxInvoiceNo: StringFieldComparison
  type: InvoiceTypeFilterComparison
}

type InvoiceDeleteResponse {
  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  id: ID
  isActive: Boolean
  isLatest: Boolean
  operatorId: String
  paymentStatus: PaymentStatus
  proformaInvoiceNo: String
  quotation: String
  quotationNo: String
  revision: Int
  status: QuoteStatus
  taxInvoiceNo: String
  template: String
  type: InvoiceType

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
}

input InvoiceFilter {
  and: [InvoiceFilter!]
  createdAt: DateFieldComparison
  id: IDFilterComparison
  isActive: BooleanFieldComparison
  isLatest: BooleanFieldComparison
  operatorId: StringFieldComparison
  or: [InvoiceFilter!]
  paymentStatus: PaymentStatusFilterComparison
  proformaInvoiceNo: StringFieldComparison
  quotation: StringFieldComparison
  quotationNo: StringFieldComparison
  status: QuoteStatusFilterComparison
  taxInvoiceNo: StringFieldComparison
  type: InvoiceTypeFilterComparison
}

type InvoiceMaxAggregate {
  createdAt: DateTime
  id: ID
  operatorId: String
  paymentStatus: PaymentStatus
  proformaInvoiceNo: String
  quotation: String
  quotationNo: String
  status: QuoteStatus
  taxInvoiceNo: String
  type: InvoiceType
}

type InvoiceMinAggregate {
  createdAt: DateTime
  id: ID
  operatorId: String
  paymentStatus: PaymentStatus
  proformaInvoiceNo: String
  quotation: String
  quotationNo: String
  status: QuoteStatus
  taxInvoiceNo: String
  type: InvoiceType
}

input InvoiceSort {
  direction: SortDirection!
  field: InvoiceSortFields!
  nulls: SortNulls
}

enum InvoiceSortFields {
  createdAt
  id
  isActive
  isLatest
  operatorId
  paymentStatus
  proformaInvoiceNo
  quotation
  quotationNo
  status
  taxInvoiceNo
  type
}

enum InvoiceType {
  PROFORMA_INVOICE
  TAX_INVOICE
}

input InvoiceTypeFilterComparison {
  eq: InvoiceType
  gt: InvoiceType
  gte: InvoiceType
  iLike: InvoiceType
  in: [InvoiceType!]
  is: Boolean
  isNot: Boolean
  like: InvoiceType
  lt: InvoiceType
  lte: InvoiceType
  neq: InvoiceType
  notILike: InvoiceType
  notIn: [InvoiceType!]
  notLike: InvoiceType
}

input InvoiceUpdateFilter {
  and: [InvoiceUpdateFilter!]
  createdAt: DateFieldComparison
  id: IDFilterComparison
  isActive: BooleanFieldComparison
  isLatest: BooleanFieldComparison
  operatorId: StringFieldComparison
  or: [InvoiceUpdateFilter!]
  paymentStatus: PaymentStatusFilterComparison
  proformaInvoiceNo: StringFieldComparison
  quotation: StringFieldComparison
  quotationNo: StringFieldComparison
  status: QuoteStatusFilterComparison
  taxInvoiceNo: StringFieldComparison
  type: InvoiceTypeFilterComparison
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

"""Leaves"""
type Leave {
  attachment: String

  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String
  crew: crewDetail

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  fromDate: DateTime!
  id: ID!
  isActive: Boolean!
  operator: operator!
  operatorId: String
  reason: String!
  remark: String
  status: LeaveStatus!
  toDate: DateTime!
  type: LeaveType!

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
}

type LeaveAggregateGroupBy {
  createdAt: DateTime
  crew: String
  fromDate: DateTime
  id: ID
  isActive: Boolean
  operatorId: String
  status: LeaveStatus
  toDate: DateTime
  type: LeaveType
}

type LeaveConnection {
  """Array of nodes."""
  nodes: [Leave!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type LeaveCountAggregate {
  createdAt: Int
  crew: Int
  fromDate: Int
  id: Int
  isActive: Int
  operatorId: Int
  status: Int
  toDate: Int
  type: Int
}

input LeaveDeleteFilter {
  and: [LeaveDeleteFilter!]
  createdAt: DateFieldComparison
  crew: StringFieldComparison
  fromDate: DateFieldComparison
  id: IDFilterComparison
  isActive: BooleanFieldComparison
  operatorId: StringFieldComparison
  or: [LeaveDeleteFilter!]
  status: LeaveStatusFilterComparison
  toDate: DateFieldComparison
  type: LeaveTypeFilterComparison
}

type LeaveDeleteResponse {
  attachment: String

  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String
  crew: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  fromDate: DateTime
  id: ID
  isActive: Boolean
  operatorId: String
  reason: String
  remark: String
  status: LeaveStatus
  toDate: DateTime
  type: LeaveType

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
}

input LeaveFilter {
  and: [LeaveFilter!]
  createdAt: DateFieldComparison
  crew: StringFieldComparison
  fromDate: DateFieldComparison
  id: IDFilterComparison
  isActive: BooleanFieldComparison
  operatorId: StringFieldComparison
  or: [LeaveFilter!]
  status: LeaveStatusFilterComparison
  toDate: DateFieldComparison
  type: LeaveTypeFilterComparison
}

type LeaveMaxAggregate {
  createdAt: DateTime
  crew: String
  fromDate: DateTime
  id: ID
  operatorId: String
  status: LeaveStatus
  toDate: DateTime
  type: LeaveType
}

type LeaveMinAggregate {
  createdAt: DateTime
  crew: String
  fromDate: DateTime
  id: ID
  operatorId: String
  status: LeaveStatus
  toDate: DateTime
  type: LeaveType
}

input LeaveSort {
  direction: SortDirection!
  field: LeaveSortFields!
  nulls: SortNulls
}

enum LeaveSortFields {
  createdAt
  crew
  fromDate
  id
  isActive
  operatorId
  status
  toDate
  type
}

enum LeaveStatus {
  APPROVED
  CANCELLED
  DECLINED
  PENDING
}

input LeaveStatusFilterComparison {
  eq: LeaveStatus
  gt: LeaveStatus
  gte: LeaveStatus
  iLike: LeaveStatus
  in: [LeaveStatus!]
  is: Boolean
  isNot: Boolean
  like: LeaveStatus
  lt: LeaveStatus
  lte: LeaveStatus
  neq: LeaveStatus
  notILike: LeaveStatus
  notIn: [LeaveStatus!]
  notLike: LeaveStatus
}

enum LeaveType {
  BEREAVEMENT_LEAVE
  CASUAL_LEAVE
  MARRIAGE_LEAVE
  PATERNITY_LEAVE
  PRIVILEGE_LEAVE
  SICK_LEAVE
}

input LeaveTypeFilterComparison {
  eq: LeaveType
  gt: LeaveType
  gte: LeaveType
  iLike: LeaveType
  in: [LeaveType!]
  is: Boolean
  isNot: Boolean
  like: LeaveType
  lt: LeaveType
  lte: LeaveType
  neq: LeaveType
  notILike: LeaveType
  notIn: [LeaveType!]
  notLike: LeaveType
}

input LeaveUpdateFilter {
  and: [LeaveUpdateFilter!]
  createdAt: DateFieldComparison
  crew: StringFieldComparison
  fromDate: DateFieldComparison
  id: IDFilterComparison
  isActive: BooleanFieldComparison
  operatorId: StringFieldComparison
  or: [LeaveUpdateFilter!]
  status: LeaveStatusFilterComparison
  toDate: DateFieldComparison
  type: LeaveTypeFilterComparison
}

type LibraryConnection {
  """Array of nodes."""
  nodes: [library!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type LibraryDeleteResponse {
  attachment: String

  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  department: DepartmentType
  id: ID
  isActive: Boolean
  name: String
  operatorId: String

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
}

input MailerInput {
  html: String
  subject: String!
  text: String!
  to: String!
}

type MailerResponseDto {
  message: String!
  success: Boolean!
}

type ManualConnection {
  """Array of nodes."""
  nodes: [manual!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type ManualDeleteResponse {
  attachment: String

  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  department: String
  id: ID
  isActive: Boolean
  name: String
  operatorId: String

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
}

input MarkAsReadInput {
  notificationIds: [String!]!
  userId: String!
}

type MealDto {
  category: String!
  instructions: String!
  item: String!
  portions: Int!
  type: String!
}

type Mutation {
  addRolesToCrewDetail(input: AddRolesToCrewDetailInput!): crewDetail!
  addRolesToUser(input: AddRolesToUserInput!): User!
  createCrew(input: CreateCrewInput!): crewDetail!
  createManyAccessRequests(input: CreateManyAccessRequestsInput!): [AccessRequest!]!
  createManyAircraftCategories(input: CreateManyAircraftCategoriesInput!): [AircraftCategory!]!
  createManyAircraftDetails(input: CreateManyAircraftDetailsInput!): [AircraftDetail!]!
  createManyAirports(input: CreateManyAirportsInput!): [Airport!]!
  createManyCities(input: CreateManyCitiesInput!): [City!]!
  createManyClients(input: CreateManyClientsInput!): [client!]!
  createManyCrewDetails(input: CreateManyCrewDetailsInput!): [crewDetail!]!
  createManyInvoices(input: CreateManyInvoicesInput!): [Invoice!]!
  createManyLeaves(input: CreateManyLeavesInput!): [Leave!]!
  createManyLibraries(input: CreateManyLibrariesInput!): [library!]!
  createManyManuals(input: CreateManyManualsInput!): [manual!]!
  createManyNotifications(input: CreateManyNotificationsInput!): [notification!]!
  createManyOperators(input: CreateManyOperatorsInput!): [operator!]!
  createManyPassengerDetails(input: CreateManyPassengerDetailsInput!): [PassengerDetail!]!
  createManyPrices(input: CreateManyPricesInput!): [price!]!
  createManyQuotes(input: CreateManyQuotesInput!): [Quote!]!
  createManyRepresentatives(input: CreateManyRepresentativesInput!): [representative!]!
  createManyResources(input: CreateManyResourcesInput!): [resource!]!
  createManyRolePermissions(input: CreateManyRolePermissionsInput!): [RolePermission!]!
  createManyRoles(input: CreateManyRolesInput!): [role!]!
  createManySecurities(input: CreateManySecuritiesInput!): [security!]!
  createManyTripDetails(input: CreateManyTripDetailsInput!): [TripDetail!]!
  createManyUsers(input: CreateManyUsersInput!): [User!]!
  createOneAccessRequest(input: CreateOneAccessRequestInput!): AccessRequest!
  createOneAircraftCategory(input: CreateOneAircraftCategoryInput!): AircraftCategory!
  createOneAircraftDetail(input: CreateOneAircraftDetailInput!): AircraftDetail!
  createOneAirport(input: CreateOneAirportInput!): Airport!
  createOneCity(input: CreateOneCityInput!): City!
  createOneClient(input: CreateOneClientInput!): client!
  createOneCrewDetail(input: CreateOneCrewDetailInput!): crewDetail!
  createOneInvoice(input: CreateOneInvoiceInput!): Invoice!
  createOneLeave(input: CreateOneLeaveInput!): Leave!
  createOneLibrary(input: CreateOneLibraryInput!): library!
  createOneManual(input: CreateOneManualInput!): manual!
  createOneNotification(input: CreateOneNotificationInput!): notification!
  createOneOperator(input: CreateOneOperatorInput!): operator!
  createOnePassengerDetail(input: CreateOnePassengerDetailInput!): PassengerDetail!
  createOnePrice(input: CreateOnePriceInput!): price!
  createOneQuote(input: CreateOneQuoteInput!): Quote!
  createOneRepresentative(input: CreateOneRepresentativeInput!): representative!
  createOneResource(input: CreateOneResourceInput!): resource!
  createOneRole(input: CreateOneRoleInput!): role!
  createOneRolePermission(input: CreateOneRolePermissionInput!): RolePermission!
  createOneSecurity(input: CreateOneSecurityInput!): security!
  createOneTripDetail(input: CreateOneTripDetailInput!): TripDetail!
  createOneUser(input: CreateUserInput!): User!
  createOperator(operator: OperatorDto!): operator!
  createTrip(input: CreateTripInput!): TripDetail!
  deleteManyAccessRequests(input: DeleteManyAccessRequestsInput!): DeleteManyResponse!
  deleteManyAircraftCategories(input: DeleteManyAircraftCategoriesInput!): DeleteManyResponse!
  deleteManyAircraftDetails(input: DeleteManyAircraftDetailsInput!): DeleteManyResponse!
  deleteManyAirports(input: DeleteManyAirportsInput!): DeleteManyResponse!
  deleteManyCities(input: DeleteManyCitiesInput!): DeleteManyResponse!
  deleteManyClients(input: DeleteManyClientsInput!): DeleteManyResponse!
  deleteManyCrewDetails(input: DeleteManyCrewDetailsInput!): DeleteManyResponse!
  deleteManyInvoices(input: DeleteManyInvoicesInput!): DeleteManyResponse!
  deleteManyLeaves(input: DeleteManyLeavesInput!): DeleteManyResponse!
  deleteManyLibraries(input: DeleteManyLibrariesInput!): DeleteManyResponse!
  deleteManyManuals(input: DeleteManyManualsInput!): DeleteManyResponse!
  deleteManyNotifications(input: DeleteManyNotificationsInput!): DeleteManyResponse!
  deleteManyOperators(input: DeleteManyOperatorsInput!): DeleteManyResponse!
  deleteManyPassengerDetails(input: DeleteManyPassengerDetailsInput!): DeleteManyResponse!
  deleteManyPrices(input: DeleteManyPricesInput!): DeleteManyResponse!
  deleteManyQuotes(input: DeleteManyQuotesInput!): DeleteManyResponse!
  deleteManyRepresentatives(input: DeleteManyRepresentativesInput!): DeleteManyResponse!
  deleteManyResources(input: DeleteManyResourcesInput!): DeleteManyResponse!
  deleteManyRolePermissions(input: DeleteManyRolePermissionsInput!): DeleteManyResponse!
  deleteManyRoles(input: DeleteManyRolesInput!): DeleteManyResponse!
  deleteManySecurities(input: DeleteManySecuritiesInput!): DeleteManyResponse!
  deleteManyTripDetails(input: DeleteManyTripDetailsInput!): DeleteManyResponse!
  deleteManyUsers(input: DeleteManyUsersInput!): DeleteManyResponse!
  deleteOneAccessRequest(input: DeleteOneAccessRequestInput!): AccessRequestDeleteResponse!
  deleteOneAircraftCategory(input: DeleteOneAircraftCategoryInput!): AircraftCategoryDeleteResponse!
  deleteOneAircraftDetail(input: DeleteOneAircraftDetailInput!): AircraftDetailDeleteResponse!
  deleteOneAirport(input: DeleteOneAirportInput!): AirportDeleteResponse!
  deleteOneCity(input: DeleteOneCityInput!): CityDeleteResponse!
  deleteOneClient(input: DeleteOneClientInput!): ClientDeleteResponse!
  deleteOneCrewDetail(input: DeleteOneCrewDetailInput!): CrewDetailDeleteResponse!
  deleteOneInvoice(input: DeleteOneInvoiceInput!): InvoiceDeleteResponse!
  deleteOneLeave(input: DeleteOneLeaveInput!): LeaveDeleteResponse!
  deleteOneLibrary(input: DeleteOneLibraryInput!): LibraryDeleteResponse!
  deleteOneManual(input: DeleteOneManualInput!): ManualDeleteResponse!
  deleteOneNotification(input: DeleteOneNotificationInput!): NotificationDeleteResponse!
  deleteOneOperator(input: DeleteOneOperatorInput!): OperatorDeleteResponse!
  deleteOnePassengerDetail(input: DeleteOnePassengerDetailInput!): PassengerDetailDeleteResponse!
  deleteOnePrice(input: DeleteOnePriceInput!): PriceDeleteResponse!
  deleteOneQuote(input: DeleteOneQuoteInput!): QuoteDeleteResponse!
  deleteOneRepresentative(input: DeleteOneRepresentativeInput!): RepresentativeDeleteResponse!
  deleteOneResource(input: DeleteOneResourceInput!): ResourceDeleteResponse!
  deleteOneRole(input: DeleteOneRoleInput!): RoleDeleteResponse!
  deleteOneRolePermission(input: DeleteOneRolePermissionInput!): RolePermissionDeleteResponse!
  deleteOneSecurity(input: DeleteOneSecurityInput!): SecurityDeleteResponse!
  deleteOneTripDetail(input: DeleteOneTripDetailInput!): TripDetailDeleteResponse!
  deleteOneUser(input: DeleteOneUserInput!): UserDeleteResponse!
  forgotPassword(email: String!): ForgotPasswordDto!
  generateInvoice(args: GenerateInvoiceInput!): Invoice!
  markNotificationsAsRead(input: MarkAsReadInput!): Boolean!
  requestManualAccess(docId: String!): AccessRequest!
  resetPassword(input: ResetPasswordInput!): ResetPasswordDto!
  saleConfirmation(args: SaleConfirmationInput!): Quote!
  sendAcknowledgement(input: acknowledgementInput!): String!
  sendEmail(input: MailerInput!): MailerResponseDto!
  setAircraftOnPrice(input: SetAircraftOnPriceInput!): price!
  setAircraftOnQuote(input: SetAircraftOnQuoteInput!): Quote!
  setClientOnRepresentative(input: SetClientOnRepresentativeInput!): representative!
  setCreatedByOnLibrary(input: SetCreatedByOnLibraryInput!): library!
  setCreatedByOnManual(input: SetCreatedByOnManualInput!): manual!
  setCreatedByOnSecurity(input: SetCreatedByOnSecurityInput!): security!
  setCrewOnLeave(input: SetCrewOnLeaveInput!): Leave!
  setOperatorOnAircraftCategory(input: SetOperatorOnAircraftCategoryInput!): AircraftCategory!
  setOperatorOnAircraftDetail(input: SetOperatorOnAircraftDetailInput!): AircraftDetail!
  setOperatorOnClient(input: SetOperatorOnClientInput!): client!
  setOperatorOnCrewDetail(input: SetOperatorOnCrewDetailInput!): crewDetail!
  setOperatorOnLeave(input: SetOperatorOnLeaveInput!): Leave!
  setOperatorOnLibrary(input: SetOperatorOnLibraryInput!): library!
  setOperatorOnManual(input: SetOperatorOnManualInput!): manual!
  setOperatorOnPassengerDetail(input: SetOperatorOnPassengerDetailInput!): PassengerDetail!
  setOperatorOnQuote(input: SetOperatorOnQuoteInput!): Quote!
  setOperatorOnRole(input: SetOperatorOnRoleInput!): role!
  setOperatorOnSecurity(input: SetOperatorOnSecurityInput!): security!
  setOperatorOnTripDetail(input: SetOperatorOnTripDetailInput!): TripDetail!
  setOperatorOnUser(input: SetOperatorOnUserInput!): User!
  setQuotationOnInvoice(input: SetQuotationOnInvoiceInput!): Invoice!
  setQuotationOnPassengerDetail(input: SetQuotationOnPassengerDetailInput!): PassengerDetail!
  setQuotationOnTripDetail(input: SetQuotationOnTripDetailInput!): TripDetail!
  setRepresentativeOnQuote(input: SetRepresentativeOnQuoteInput!): Quote!
  setRequestedByOnQuote(input: SetRequestedByOnQuoteInput!): Quote!
  setRoleOnRolePermission(input: SetRoleOnRolePermissionInput!): RolePermission!
  setRolesOnCrewDetail(input: SetRolesOnCrewDetailInput!): crewDetail!
  setRolesOnUser(input: SetRolesOnUserInput!): User!
  setUpdatedByOnLibrary(input: SetUpdatedByOnLibraryInput!): library!
  setUpdatedByOnManual(input: SetUpdatedByOnManualInput!): manual!
  setUpdatedByOnSecurity(input: SetUpdatedByOnSecurityInput!): security!
  signUp(input: SignUpInput!): User!
  updateAccessRequestStatus(notificationId: String!, status: AccessRequestStatus!): AccessRequest!
  updateLeaveRequest(data: UpdateLeaveRequestDataInput!, where: UpdateLeaveRequestWhereInput!): Leave!
  updateManyAccessRequests(input: UpdateManyAccessRequestsInput!): UpdateManyResponse!
  updateManyAircraftCategories(input: UpdateManyAircraftCategoriesInput!): UpdateManyResponse!
  updateManyAircraftDetails(input: UpdateManyAircraftDetailsInput!): UpdateManyResponse!
  updateManyAirports(input: UpdateManyAirportsInput!): UpdateManyResponse!
  updateManyCities(input: UpdateManyCitiesInput!): UpdateManyResponse!
  updateManyClients(input: UpdateManyClientsInput!): UpdateManyResponse!
  updateManyCrewDetails(input: UpdateManyCrewDetailsInput!): UpdateManyResponse!
  updateManyInvoices(input: UpdateManyInvoicesInput!): UpdateManyResponse!
  updateManyLeaves(input: UpdateManyLeavesInput!): UpdateManyResponse!
  updateManyLibraries(input: UpdateManyLibrariesInput!): UpdateManyResponse!
  updateManyManuals(input: UpdateManyManualsInput!): UpdateManyResponse!
  updateManyNotifications(input: UpdateManyNotificationsInput!): UpdateManyResponse!
  updateManyOperators(input: UpdateManyOperatorsInput!): UpdateManyResponse!
  updateManyPassengerDetails(input: UpdateManyPassengerDetailsInput!): UpdateManyResponse!
  updateManyPrices(input: UpdateManyPricesInput!): UpdateManyResponse!
  updateManyQuotes(input: UpdateManyQuotesInput!): UpdateManyResponse!
  updateManyRepresentatives(input: UpdateManyRepresentativesInput!): UpdateManyResponse!
  updateManyResources(input: UpdateManyResourcesInput!): UpdateManyResponse!
  updateManyRolePermissions(input: UpdateManyRolePermissionsInput!): UpdateManyResponse!
  updateManyRoles(input: UpdateManyRolesInput!): UpdateManyResponse!
  updateManySecurities(input: UpdateManySecuritiesInput!): UpdateManyResponse!
  updateManyTripDetails(input: UpdateManyTripDetailsInput!): UpdateManyResponse!
  updateManyUsers(input: UpdateManyUsersInput!): UpdateManyResponse!
  updateOneAccessRequest(input: UpdateOneAccessRequestInput!): AccessRequest!
  updateOneAircraftCategory(input: UpdateOneAircraftCategoryInput!): AircraftCategory!
  updateOneAircraftDetail(input: UpdateOneAircraftDetailInput!): AircraftDetail!
  updateOneAirport(input: UpdateOneAirportInput!): Airport!
  updateOneCity(input: UpdateOneCityInput!): City!
  updateOneClient(input: UpdateOneClientInput!): client!
  updateOneCrewDetail(input: UpdateOneCrewDetailInput!): crewDetail!
  updateOneInvoice(input: UpdateOneInvoiceInput!): Invoice!
  updateOneLeave(input: UpdateOneLeaveInput!): Leave!
  updateOneLibrary(input: UpdateOneLibraryInput!): library!
  updateOneManual(input: UpdateOneManualInput!): manual!
  updateOneNotification(input: UpdateOneNotificationInput!): notification!
  updateOneOperator(input: UpdateOneOperatorInput!): operator!
  updateOnePassengerDetail(input: UpdateOnePassengerDetailInput!): PassengerDetail!
  updateOnePrice(input: UpdateOnePriceInput!): price!

  """Update one Quote """
  updateOneQuote(input: UpdateOneQuoteInput!): Quote!
  updateOneRepresentative(input: UpdateOneRepresentativeInput!): representative!
  updateOneResource(input: UpdateOneResourceInput!): resource!
  updateOneRole(input: UpdateOneRoleInput!): role!
  updateOneRolePermission(input: UpdateOneRolePermissionInput!): RolePermission!
  updateOneSecurity(input: UpdateOneSecurityInput!): security!
  updateOneTripDetail(input: UpdateOneTripDetailInput!): TripDetail!
  updateOneUser(input: UpdateOneUserInput!): User!
  updatePassengerDetail(data: UpdatePassengerDetailDataInput!, where: UpdatePassengerDetailWhereInput!): PassengerDetail!
  updateQuotationStatus(input: UpdateQuoteStatusInput!): Quote!
  updateTripDetail(data: UpdateTripDetailDataInput!, where: UpdateTripDetailWhereInput!): TripDetail!
  upgradeQuote(code: String!): Quote!
}

type NomineeDto {
  address: String
  alternateContact: String
  fullName: String
  gender: Gender
  idProof: String
  insurance: String
  mobileNumber: String
  relation: String
}

input NomineeInput {
  address: String
  alternateContact: String
  fullName: String
  gender: Gender
  idProof: String
  insurance: String
  mobileNumber: String
  relation: String
}

type NotificationConnection {
  """Array of edges."""
  edges: [notificationEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

type NotificationDeleteResponse {
  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  id: ID
  isActive: Boolean
  isReadBy: [String!]
  message: String
  metadata: JSONObject
  recipientIds: [String!]
  recipientRoles: [String!]
  refId: String
  refType: String
  title: String
  type: String

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
}

type OffsetPageInfo {
  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean
}

input OffsetPaging {
  """Limit the number of records returned"""
  limit: Int

  """Offset to start returning records from"""
  offset: Int
}

type OperatorConnection {
  """Array of nodes."""
  nodes: [operator!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type OperatorDeleteResponse {
  address: String
  billingCycle: BillingCycle
  city: String
  companyLogo: String
  companyName: String

  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String
  createdByUser: crewDetail

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  email: String
  id: ID
  isActive: Boolean
  name: String
  phone: String
  pinCode: String
  state: String
  subscriptionPlan: SubscriptionPlan
  supportEmail: String
  themeColor: String
  ticketFooterNote: String

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
  websiteUrl: String
}

input OperatorDto {
  address: String!
  billingCycle: BillingCycle
  city: String!
  companyLogo: String!
  companyName: String!
  createdByUser: CrewDetailDto
  email: String!
  name: String!
  phone: String!
  pinCode: String!
  state: String!
  subscriptionPlan: SubscriptionPlan
  supportEmail: String
  themeColor: String
  ticketFooterNote: String
  websiteUrl: String
}

type PageInfo {
  """The cursor of the last returned record."""
  endCursor: ConnectionCursor

  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean

  """The cursor of the first returned record."""
  startCursor: ConnectionCursor
}

""" Passenger Details"""
type PassengerDetail {
  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  id: ID!
  isActive: Boolean!
  operator: operator!
  operatorId: String
  quotation: Quote!
  quotationNo: String!
  sectors: [SectorDto!]!

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
}

type PassengerDetailAggregateGroupBy {
  createdAt: DateTime
  id: ID
  isActive: Boolean
  operatorId: String
  quotation: String
  quotationNo: String
}

type PassengerDetailConnection {
  """Array of nodes."""
  nodes: [PassengerDetail!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type PassengerDetailCountAggregate {
  createdAt: Int
  id: Int
  isActive: Int
  operatorId: Int
  quotation: Int
  quotationNo: Int
}

input PassengerDetailDeleteFilter {
  and: [PassengerDetailDeleteFilter!]
  createdAt: DateFieldComparison
  id: IDFilterComparison
  isActive: BooleanFieldComparison
  operatorId: StringFieldComparison
  or: [PassengerDetailDeleteFilter!]
  quotation: StringFieldComparison
  quotationNo: StringFieldComparison
}

type PassengerDetailDeleteResponse {
  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  id: ID
  isActive: Boolean
  operatorId: String
  quotation: String
  quotationNo: String
  sectors: [SectorDto!]

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
}

input PassengerDetailFilter {
  and: [PassengerDetailFilter!]
  createdAt: DateFieldComparison
  id: IDFilterComparison
  isActive: BooleanFieldComparison
  operatorId: StringFieldComparison
  or: [PassengerDetailFilter!]
  quotation: StringFieldComparison
  quotationNo: StringFieldComparison
}

type PassengerDetailMaxAggregate {
  createdAt: DateTime
  id: ID
  operatorId: String
  quotation: String
  quotationNo: String
}

type PassengerDetailMinAggregate {
  createdAt: DateTime
  id: ID
  operatorId: String
  quotation: String
  quotationNo: String
}

input PassengerDetailSort {
  direction: SortDirection!
  field: PassengerDetailSortFields!
  nulls: SortNulls
}

enum PassengerDetailSortFields {
  createdAt
  id
  isActive
  operatorId
  quotation
  quotationNo
}

input PassengerDetailUpdateFilter {
  and: [PassengerDetailUpdateFilter!]
  createdAt: DateFieldComparison
  id: IDFilterComparison
  isActive: BooleanFieldComparison
  operatorId: StringFieldComparison
  or: [PassengerDetailUpdateFilter!]
  quotation: StringFieldComparison
  quotationNo: StringFieldComparison
}

type PassengerDto {
  aadharId: String!
  age: Int!
  gender: String!
  name: String!
}

enum PaymentStatus {
  PAID
  PARTIAL
  PENDING
}

input PaymentStatusFilterComparison {
  eq: PaymentStatus
  gt: PaymentStatus
  gte: PaymentStatus
  iLike: PaymentStatus
  in: [PaymentStatus!]
  is: Boolean
  isNot: Boolean
  like: PaymentStatus
  lt: PaymentStatus
  lte: PaymentStatus
  neq: PaymentStatus
  notILike: PaymentStatus
  notIn: [PaymentStatus!]
  notLike: PaymentStatus
}

type PriceConnection {
  """Array of nodes."""
  nodes: [price!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type PriceDeleteResponse {
  aircraft: String

  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  grandTotal: Float
  id: ID
  isActive: Boolean
  prices: [PriceInputDto!]

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
}

type PriceInputDto {
  currency: String!
  label: String!
  margin: Float!
  price: Float!
  total: Float!

  """duration"""
  unit: String!
}

type Query {
  RequestedQuoteList: [Quote!]!
  accessRequest(
    """The id of the record to find."""
    id: ID!
  ): AccessRequest
  accessRequests(
    """Specify to filter the records returned."""
    filter: AccessRequestFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [AccessRequestSort!]! = []
  ): AccessRequestConnection!
  aircraftCategories(
    """Specify to filter the records returned."""
    filter: AircraftCategoryFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [AircraftCategorySort!]! = []
  ): AircraftCategoryConnection!
  aircraftCategory(
    """The id of the record to find."""
    id: ID!
  ): AircraftCategory
  aircraftDetail(
    """The id of the record to find."""
    id: ID!
  ): AircraftDetail
  aircraftDetails(
    """Specify to filter the records returned."""
    filter: AircraftDetailFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [AircraftDetailSort!]! = []
  ): AircraftDetailConnection!
  airport(
    """The id of the record to find."""
    id: ID!
  ): Airport
  airports(
    """Specify to filter the records returned."""
    filter: AirportFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [AirportSort!]! = []
  ): AirportConnection!
  cities(
    """Specify to filter the records returned."""
    filter: CityFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [CitySort!]! = []
  ): CityConnection!
  city(
    """The id of the record to find."""
    id: ID!
  ): City
  client(
    """The id of the record to find."""
    id: ID!
  ): client
  clients(
    """Specify to filter the records returned."""
    filter: clientFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [clientSort!]! = []
  ): ClientConnection!
  crewDetail(
    """The id of the record to find."""
    id: ID!
  ): crewDetail
  crewDetails(
    """Specify to filter the records returned."""
    filter: crewDetailFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [crewDetailSort!]! = []
  ): CrewDetailConnection!
  flightSegmentsForCalendar(endDate: DateTime!, operatorId: String, startDate: DateTime!): [CalenderData!]!
  getSalesDashboardData(endDate: String, operatorId: String, range: DateRange! = today, startDate: String): JSONObject!
  invoice(
    """The id of the record to find."""
    id: ID!
  ): Invoice
  invoices(
    """Specify to filter the records returned."""
    filter: InvoiceFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [InvoiceSort!]! = []
  ): InvoiceConnection!
  leave(
    """The id of the record to find."""
    id: ID!
  ): Leave
  leaves(
    """Specify to filter the records returned."""
    filter: LeaveFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [LeaveSort!]! = []
  ): LeaveConnection!
  libraries(
    """Specify to filter the records returned."""
    filter: libraryFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [librarySort!]! = []
  ): LibraryConnection!
  library(
    """The id of the record to find."""
    id: ID!
  ): library
  manual(
    """The id of the record to find."""
    id: ID!
  ): manual
  manuals(
    """Specify to filter the records returned."""
    filter: manualFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [manualSort!]! = []
  ): ManualConnection!
  notification(
    """The id of the record to find."""
    id: ID!
  ): notification
  notifications(
    """Specify to filter the records returned."""
    filter: notificationFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [notificationSort!]! = []
  ): NotificationConnection!
  operator(
    """The id of the record to find."""
    id: ID!
  ): operator
  operators(
    """Specify to filter the records returned."""
    filter: operatorFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [operatorSort!]! = []
  ): OperatorConnection!
  passengerDetail(
    """The id of the record to find."""
    id: ID!
  ): PassengerDetail
  passengerDetails(
    """Specify to filter the records returned."""
    filter: PassengerDetailFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [PassengerDetailSort!]! = []
  ): PassengerDetailConnection!
  previewSalesConfirmation(quotationNo: String!): String!
  price(
    """The id of the record to find."""
    id: ID!
  ): price
  prices(
    """Specify to filter the records returned."""
    filter: priceFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [priceSort!]! = []
  ): PriceConnection!
  quote(
    """The id of the record to find."""
    id: ID!
  ): Quote
  quotes(
    """Specify to filter the records returned."""
    filter: QuoteFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [QuoteSort!]! = []
  ): QuoteConnection!
  representative(
    """The id of the record to find."""
    id: ID!
  ): representative
  representatives(
    """Specify to filter the records returned."""
    filter: representativeFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [representativeSort!]! = []
  ): RepresentativeConnection!
  resource(
    """The id of the record to find."""
    id: ID!
  ): resource
  resources(
    """Specify to filter the records returned."""
    filter: resourceFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [resourceSort!]! = []
  ): ResourceConnection!
  role(
    """The id of the record to find."""
    id: ID!
  ): role
  rolePermission(
    """The id of the record to find."""
    id: ID!
  ): RolePermission
  rolePermissions(
    """Specify to filter the records returned."""
    filter: RolePermissionFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [RolePermissionSort!]! = []
  ): RolePermissionConnection!
  roles(
    """Specify to filter the records returned."""
    filter: roleFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [roleSort!]! = []
  ): RoleConnection!
  securities(
    """Specify to filter the records returned."""
    filter: securityFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [securitySort!]! = []
  ): SecurityConnection!
  security(
    """The id of the record to find."""
    id: ID!
  ): security
  showPreview(quotationNo: String!): String!
  signIn(input: SignInInput!): loginResponseDto!
  staffCertificates(args: StaffCertificationInput): CertificationResponse!
  systemNotifications(where: SystemNotificationWhereInput): [notification!]!
  tripDetail(
    """The id of the record to find."""
    id: ID!
  ): TripDetail
  tripDetails(
    """Specify to filter the records returned."""
    filter: TripDetailFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [TripDetailSort!]! = []
  ): TripDetailConnection!
  user(
    """The id of the record to find."""
    id: ID!
  ): User
  users(
    """Specify to filter the records returned."""
    filter: UserFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [UserSort!]! = []
  ): UserConnection!
}

"""Quotes"""
type Quote {
  aircraft: AircraftDetail
  category: Category!
  code: String!
  confirmationTemplate: String

  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  grandTotal: Float!
  id: ID!
  isActive: Boolean!
  isLatest: Boolean!
  itinerary: [JSONObject!]!
  operator: operator
  operatorId: String
  prices: [PriceInputDto!]
  providerType: String
  quotationNo: String!
  representative: representative
  requestedBy: client
  revision: Int!
  status: QuoteStatus!

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
  version: Int!
}

type QuoteAggregateGroupBy {
  aircraft: String
  category: Category
  code: String
  createdAt: DateTime
  id: ID
  isActive: Boolean
  isLatest: Boolean
  operatorId: String
  providerType: String
  quotationNo: String
  representative: String
  requestedBy: String
  status: QuoteStatus
}

type QuoteConnection {
  """Array of nodes."""
  nodes: [Quote!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type QuoteCountAggregate {
  aircraft: Int
  category: Int
  code: Int
  createdAt: Int
  id: Int
  isActive: Int
  isLatest: Int
  operatorId: Int
  providerType: Int
  quotationNo: Int
  representative: Int
  requestedBy: Int
  status: Int
}

input QuoteDeleteFilter {
  aircraft: StringFieldComparison
  and: [QuoteDeleteFilter!]
  category: CategoryFilterComparison
  code: StringFieldComparison
  createdAt: DateFieldComparison
  id: IDFilterComparison
  isActive: BooleanFieldComparison
  isLatest: BooleanFieldComparison
  operatorId: StringFieldComparison
  or: [QuoteDeleteFilter!]
  providerType: StringFieldComparison
  quotationNo: StringFieldComparison
  representative: StringFieldComparison
  requestedBy: StringFieldComparison
  status: QuoteStatusFilterComparison
}

type QuoteDeleteResponse {
  aircraft: String
  category: Category
  code: String
  confirmationTemplate: String

  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  grandTotal: Float
  id: ID
  isActive: Boolean
  isLatest: Boolean
  itinerary: [JSONObject!]
  operatorId: String
  prices: [PriceInputDto!]
  providerType: String
  quotationNo: String
  representative: String
  requestedBy: String
  revision: Int
  status: QuoteStatus

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
  version: Int
}

input QuoteFilter {
  aircraft: StringFieldComparison
  and: [QuoteFilter!]
  category: CategoryFilterComparison
  code: StringFieldComparison
  createdAt: DateFieldComparison
  id: IDFilterComparison
  isActive: BooleanFieldComparison
  isLatest: BooleanFieldComparison
  operatorId: StringFieldComparison
  or: [QuoteFilter!]
  providerType: StringFieldComparison
  quotationNo: StringFieldComparison
  representative: StringFieldComparison
  requestedBy: StringFieldComparison
  status: QuoteStatusFilterComparison
}

type QuoteMaxAggregate {
  aircraft: String
  category: Category
  code: String
  createdAt: DateTime
  id: ID
  operatorId: String
  providerType: String
  quotationNo: String
  representative: String
  requestedBy: String
  status: QuoteStatus
}

type QuoteMinAggregate {
  aircraft: String
  category: Category
  code: String
  createdAt: DateTime
  id: ID
  operatorId: String
  providerType: String
  quotationNo: String
  representative: String
  requestedBy: String
  status: QuoteStatus
}

input QuoteSort {
  direction: SortDirection!
  field: QuoteSortFields!
  nulls: SortNulls
}

enum QuoteSortFields {
  aircraft
  category
  code
  createdAt
  id
  isActive
  isLatest
  operatorId
  providerType
  quotationNo
  representative
  requestedBy
  status
}

enum QuoteStatus {
  CANCELLED
  DEPRECATED
  PAX_ADDED
  PROFOMA_INVOICE
  QUOTE
  SALE_CONFIRMED
  TAX_INVOICE
  TRIP_GENERATED
}

input QuoteStatusFilterComparison {
  eq: QuoteStatus
  gt: QuoteStatus
  gte: QuoteStatus
  iLike: QuoteStatus
  in: [QuoteStatus!]
  is: Boolean
  isNot: Boolean
  like: QuoteStatus
  lt: QuoteStatus
  lte: QuoteStatus
  neq: QuoteStatus
  notILike: QuoteStatus
  notIn: [QuoteStatus!]
  notLike: QuoteStatus
}

input QuoteUpdateFilter {
  aircraft: StringFieldComparison
  and: [QuoteUpdateFilter!]
  category: CategoryFilterComparison
  code: StringFieldComparison
  createdAt: DateFieldComparison
  id: IDFilterComparison
  isActive: BooleanFieldComparison
  isLatest: BooleanFieldComparison
  operatorId: StringFieldComparison
  or: [QuoteUpdateFilter!]
  providerType: StringFieldComparison
  quotationNo: StringFieldComparison
  representative: StringFieldComparison
  requestedBy: StringFieldComparison
  status: QuoteStatusFilterComparison
}

type RepresentativeConnection {
  """Array of nodes."""
  nodes: [representative!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type RepresentativeDeleteResponse {
  address: String
  client: String

  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  email: String
  id: ID
  isActive: Boolean
  name: String
  phone: String

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
}

type ResetPasswordDto {
  message: String!
  status: Boolean!
}

input ResetPasswordInput {
  confirmPwd: String!
  currentPwd: String!
  newPwd: String!
  userId: String!
}

enum ResourceAction {
  CREATE
  DELETE
  READ
  UPDATE
}

type ResourceConnection {
  """Array of nodes."""
  nodes: [resource!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type ResourceDeleteResponse {
  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  icon: String
  id: ID
  isActive: Boolean
  menu: String
  segment: String
  title: String

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
}

type RoleConnection {
  """Array of nodes."""
  nodes: [role!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type RoleDeleteResponse {
  accessPermissions: [AccessPermissionInput!]

  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  description: String
  id: ID
  isActive: Boolean
  name: String
  operatorId: String
  type: RoleType

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
}

"""Role Permission"""
type RolePermission {
  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  id: ID!
  isActive: Boolean!
  permissions: [JSONObject!]!
  role: role!

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
}

type RolePermissionAggregateGroupBy {
  createdAt: DateTime
  id: ID
  isActive: Boolean
  role: String
}

type RolePermissionConnection {
  """Array of nodes."""
  nodes: [RolePermission!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type RolePermissionCountAggregate {
  createdAt: Int
  id: Int
  isActive: Int
  role: Int
}

input RolePermissionDeleteFilter {
  and: [RolePermissionDeleteFilter!]
  createdAt: DateFieldComparison
  id: IDFilterComparison
  isActive: BooleanFieldComparison
  or: [RolePermissionDeleteFilter!]
  role: StringFieldComparison
}

type RolePermissionDeleteResponse {
  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  id: ID
  isActive: Boolean
  permissions: [JSONObject!]
  role: String

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
}

input RolePermissionFilter {
  and: [RolePermissionFilter!]
  createdAt: DateFieldComparison
  id: IDFilterComparison
  isActive: BooleanFieldComparison
  or: [RolePermissionFilter!]
  role: StringFieldComparison
}

type RolePermissionMaxAggregate {
  createdAt: DateTime
  id: ID
  role: String
}

type RolePermissionMinAggregate {
  createdAt: DateTime
  id: ID
  role: String
}

input RolePermissionSort {
  direction: SortDirection!
  field: RolePermissionSortFields!
  nulls: SortNulls
}

enum RolePermissionSortFields {
  createdAt
  id
  isActive
  role
}

input RolePermissionUpdateFilter {
  and: [RolePermissionUpdateFilter!]
  createdAt: DateFieldComparison
  id: IDFilterComparison
  isActive: BooleanFieldComparison
  or: [RolePermissionUpdateFilter!]
  role: StringFieldComparison
}

enum RoleType {
  ACCOUNTING
  ADMIN
  AUDIT
  ENGINEERING
  OPS
  SALES
  SUPER_ADMIN
}

input RoleTypeFilterComparison {
  eq: RoleType
  gt: RoleType
  gte: RoleType
  iLike: RoleType
  in: [RoleType!]
  is: Boolean
  isNot: Boolean
  like: RoleType
  lt: RoleType
  lte: RoleType
  neq: RoleType
  notILike: RoleType
  notIn: [RoleType!]
  notLike: RoleType
}

input SaleConfirmationInput {
  quotationNo: String!
}

enum SalesDocumentType {
  PROFORMA_INVOICE
  QUOTATION
  SALE_CONFIRMATION
  TAX_INVOICE
}

type SectorDto {
  arrivalDate: DateTime!
  arrivalTime: String!
  depatureDate: DateTime!
  depatureTime: String!
  destination: String!
  flightTime: String!
  meals: [MealDto!]
  passengers: [PassengerDto!]
  pax: Int!
  sectorNo: Int
  source: String!
  travel: TravelDto
}

type SecurityConnection {
  """Array of nodes."""
  nodes: [security!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type SecurityDeleteResponse {
  attachment: String

  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  department: DepartmentType
  id: ID
  isActive: Boolean
  name: String
  operatorId: String
  type: SecurityDocType

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
}

enum SecurityDocType {
  AGREEMENTS
  AIRCRAFT_DOCUMENTS
  APPROVALS
  AUDIT
  FILE_RECORDS
  LIBRARY
  MANUALS
  MEETINGS
  ORGANIZATION
  REGISTERS
  SECURITY_TRAINING
  STAFF
}

input SecurityDocTypeFilterComparison {
  eq: SecurityDocType
  gt: SecurityDocType
  gte: SecurityDocType
  iLike: SecurityDocType
  in: [SecurityDocType!]
  is: Boolean
  isNot: Boolean
  like: SecurityDocType
  lt: SecurityDocType
  lte: SecurityDocType
  neq: SecurityDocType
  notILike: SecurityDocType
  notIn: [SecurityDocType!]
  notLike: SecurityDocType
}

input SetAircraftOnPriceInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetAircraftOnQuoteInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetClientOnRepresentativeInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetCreatedByOnLibraryInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetCreatedByOnManualInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetCreatedByOnSecurityInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetCrewOnLeaveInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetOperatorOnAircraftCategoryInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetOperatorOnAircraftDetailInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetOperatorOnClientInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetOperatorOnCrewDetailInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetOperatorOnLeaveInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetOperatorOnLibraryInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetOperatorOnManualInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetOperatorOnPassengerDetailInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetOperatorOnQuoteInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetOperatorOnRoleInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetOperatorOnSecurityInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetOperatorOnTripDetailInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetOperatorOnUserInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetQuotationOnInvoiceInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetQuotationOnPassengerDetailInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetQuotationOnTripDetailInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetRepresentativeOnQuoteInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetRequestedByOnQuoteInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetRoleOnRolePermissionInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetRolesOnCrewDetailInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetRolesOnUserInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetUpdatedByOnLibraryInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetUpdatedByOnManualInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetUpdatedByOnSecurityInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SignInInput {
  password: String!
  userName: String!
}

input SignUpInput {
  email: String!
  name: String!
  password: String!
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

input StaffCertificationInput {
  where: StaffCertificationWhereInput
}

input StaffCertificationWhereInput {
  operatorId: String
  search: String
  validTillBefore: DateTime
}

input StringFieldComparison {
  eq: String
  gt: String
  gte: String
  iLike: String
  in: [String!]
  is: Boolean
  isNot: Boolean
  like: String
  lt: String
  lte: String
  neq: String
  notILike: String
  notIn: [String!]
  notLike: String
}

enum SubscriptionPlan {
  ENTERPRISE
  FREE
  STANDARD
}

input SubscriptionPlanFilterComparison {
  eq: SubscriptionPlan
  gt: SubscriptionPlan
  gte: SubscriptionPlan
  iLike: SubscriptionPlan
  in: [SubscriptionPlan!]
  is: Boolean
  isNot: Boolean
  like: SubscriptionPlan
  lt: SubscriptionPlan
  lte: SubscriptionPlan
  neq: SubscriptionPlan
  notILike: SubscriptionPlan
  notIn: [SubscriptionPlan!]
  notLike: SubscriptionPlan
}

input SystemNotificationWhereInput {
  refId: String
  refType: String
  type: String
}

type TravelDto {
  category: String!
  dropAt: String!
  seatingCapacity: Int!
  type: String!
  vehicleChoice: String!
}

"""Trip Detail """
type TripDetail {
  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  id: ID!
  isActive: Boolean!
  operator: operator!
  operatorId: String
  quotation: Quote!
  quotationNo: String!
  sectors: [TripSectorDto!]!
  status: TripDetailStatus!
  tripId: String!

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
}

type TripDetailAggregateGroupBy {
  createdAt: DateTime
  id: ID
  isActive: Boolean
  operatorId: String
  quotation: String
  quotationNo: String
  status: TripDetailStatus
  tripId: String
}

type TripDetailConnection {
  """Array of nodes."""
  nodes: [TripDetail!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type TripDetailCountAggregate {
  createdAt: Int
  id: Int
  isActive: Int
  operatorId: Int
  quotation: Int
  quotationNo: Int
  status: Int
  tripId: Int
}

input TripDetailDeleteFilter {
  and: [TripDetailDeleteFilter!]
  createdAt: DateFieldComparison
  id: IDFilterComparison
  isActive: BooleanFieldComparison
  operatorId: StringFieldComparison
  or: [TripDetailDeleteFilter!]
  quotation: StringFieldComparison
  quotationNo: StringFieldComparison
  status: TripDetailStatusFilterComparison
  tripId: StringFieldComparison
}

type TripDetailDeleteResponse {
  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  id: ID
  isActive: Boolean
  operatorId: String
  quotation: String
  quotationNo: String
  sectors: [TripSectorDto!]
  status: TripDetailStatus
  tripId: String

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
}

input TripDetailDto {
  operatorId: String
  quotation: String!
  quotationNo: String!
  sectors: [TripSector!]!
}

input TripDetailFilter {
  and: [TripDetailFilter!]
  createdAt: DateFieldComparison
  id: IDFilterComparison
  isActive: BooleanFieldComparison
  operatorId: StringFieldComparison
  or: [TripDetailFilter!]
  quotation: StringFieldComparison
  quotationNo: StringFieldComparison
  status: TripDetailStatusFilterComparison
  tripId: StringFieldComparison
}

type TripDetailMaxAggregate {
  createdAt: DateTime
  id: ID
  operatorId: String
  quotation: String
  quotationNo: String
  status: TripDetailStatus
  tripId: String
}

type TripDetailMinAggregate {
  createdAt: DateTime
  id: ID
  operatorId: String
  quotation: String
  quotationNo: String
  status: TripDetailStatus
  tripId: String
}

input TripDetailSort {
  direction: SortDirection!
  field: TripDetailSortFields!
  nulls: SortNulls
}

enum TripDetailSortFields {
  createdAt
  id
  isActive
  operatorId
  quotation
  quotationNo
  status
  tripId
}

enum TripDetailStatus {
  DRAFT
  PUBLISHED
}

input TripDetailStatusFilterComparison {
  eq: TripDetailStatus
  gt: TripDetailStatus
  gte: TripDetailStatus
  iLike: TripDetailStatus
  in: [TripDetailStatus!]
  is: Boolean
  isNot: Boolean
  like: TripDetailStatus
  lt: TripDetailStatus
  lte: TripDetailStatus
  neq: TripDetailStatus
  notILike: TripDetailStatus
  notIn: [TripDetailStatus!]
  notLike: TripDetailStatus
}

input TripDetailUpdateFilter {
  and: [TripDetailUpdateFilter!]
  createdAt: DateFieldComparison
  id: IDFilterComparison
  isActive: BooleanFieldComparison
  operatorId: StringFieldComparison
  or: [TripDetailUpdateFilter!]
  quotation: StringFieldComparison
  quotationNo: StringFieldComparison
  status: TripDetailStatusFilterComparison
  tripId: StringFieldComparison
}

input TripSector {
  arrivalDate: DateTime!
  arrivalTime: String!
  assignedCrews: [assignedCrewInput!]
  baInfo: BaInfo
  depatureDate: DateTime!
  depatureTime: String!
  destination: String!
  documents: [DocumentInput!]
  flightTime: String!
  fuelRecord: FuelRecordInput
  pax: Int!
  sectorNo: Int
  source: String!
  status: TripSectorStatus! = IN_PROGRESS
}

type TripSectorDto {
  arrivalDate: DateTime!
  arrivalTime: String!
  assignedCrews: [AssignedCrewDto!]
  baInfo: BaInfoDto
  depatureDate: DateTime!
  depatureTime: String!
  destination: String!
  documents: [DocumentDto!]
  flightTime: String!
  fuelRecord: FuelRecordDto
  pax: Int!
  sectorNo: Int
  source: String!
  status: TripSectorStatus!
}

enum TripSectorStatus {
  COMPLETED
  IN_PROGRESS
}

input TypeFilterComparison {
  eq: type
  gt: type
  gte: type
  iLike: type
  in: [type!]
  is: Boolean
  isNot: Boolean
  like: type
  lt: type
  lte: type
  neq: type
  notILike: type
  notIn: [type!]
  notLike: type
}

input UpdateAccessRequest {
  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  docId: String
  docType: String
  id: ID
  isActive: Boolean = true
  reason: String
  requestedBy: String
  reviewedAt: DateTime
  reviewedBy: String
  status: AccessRequestStatus = PENDING

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
}

input UpdateAircraftCategory {
  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  description: String
  id: ID
  isActive: Boolean = true
  name: String
  operatorId: String

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
}

input UpdateAircraftDetail {
  code: String

  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  description: String
  flightImages: [String!]
  id: ID
  isActive: Boolean = true
  name: String
  noteText: String
  operatorId: String
  rangeMapImage: String
  seatLayoutImage: String
  specifications: [JSONObject!]

  """Flights/Helicoptor Terms and Conditions"""
  termsAndConditions: String

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
  warningImage: String
  warningText: String
}

input UpdateAirport {
  city: String
  closeHrs: String
  contactNumber: String
  country: String

  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  email: String
  fuelSuppliers: [fuelSupplier!]
  groundHandlersInfo: [groundHandlersInfo!]
  iata_code: String
  icao_code: String
  id: ID
  isActive: Boolean = true
  latitude: Float
  longitude: Float
  name: String
  openHrs: String
  type: AirportType = CIVIL

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
}

input UpdateCity {
  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  id: ID
  isActive: Boolean = true
  name: String
  state: String

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
}

input UpdateClient {
  address: String
  billingAddress: String

  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  email: String
  gstNo: String
  id: ID
  isActive: Boolean = true
  isCompany: Boolean
  isPerson: Boolean
  lastName: String
  name: String
  operatorId: String
  panNo: String
  phone: String
  type: ClientType = PERSON

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
}

input UpdateCrewDetail {
  aadhar: String
  alternateContact: String
  anniversaryDate: DateTime
  bankDetails: [BankDetailInput!]
  bloodGroup: String
  certifications: [certificationInput!]

  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String
  createdByUser: CrewDetailDto
  crewId: String
  currentAddress: String
  dateOfBirth: DateTime

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  designation: String
  displayName: String
  education: String
  email: String
  experience: String
  fullName: String
  gender: Gender
  gst: String
  id: ID
  isActive: Boolean = true
  location: String
  martialStatus: String
  nationality: String
  nominees: [nomineeInput!]
  operatorId: String
  pan: String
  passportNo: String
  permanentAddress: String
  phone: String
  profile: String
  religion: String
  roles: [String!]

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
}

input UpdateInvoice {
  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  id: ID
  isActive: Boolean = true
  isLatest: Boolean = false
  operatorId: String
  paymentStatus: PaymentStatus = PENDING
  proformaInvoiceNo: String
  quotation: String
  quotationNo: String
  revision: Int = 0
  status: QuoteStatus = PROFOMA_INVOICE
  taxInvoiceNo: String
  template: String
  type: InvoiceType

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
}

input UpdateLeave {
  attachment: String

  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String
  crew: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  fromDate: DateTime
  id: ID
  isActive: Boolean = true
  operatorId: String
  reason: String
  remark: String
  status: LeaveStatus = PENDING
  toDate: DateTime
  type: LeaveType

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
}

input UpdateLeaveRequestDataInput {
  remark: String
  status: LeaveStatus! = PENDING
}

input UpdateLeaveRequestWhereInput {
  id: ID!
}

input UpdateLibrary {
  attachment: String

  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  department: DepartmentType = OTHERS
  id: ID
  isActive: Boolean = true
  name: String
  operatorId: String

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
}

input UpdateManual {
  attachment: String

  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  department: String
  id: ID
  isActive: Boolean = true
  name: String
  operatorId: String

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
}

input UpdateManyAccessRequestsInput {
  """Filter used to find fields to update"""
  filter: AccessRequestUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateAccessRequest!
}

input UpdateManyAircraftCategoriesInput {
  """Filter used to find fields to update"""
  filter: AircraftCategoryUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateAircraftCategory!
}

input UpdateManyAircraftDetailsInput {
  """Filter used to find fields to update"""
  filter: AircraftDetailUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateAircraftDetail!
}

input UpdateManyAirportsInput {
  """Filter used to find fields to update"""
  filter: AirportUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateAirport!
}

input UpdateManyCitiesInput {
  """Filter used to find fields to update"""
  filter: CityUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateCity!
}

input UpdateManyClientsInput {
  """Filter used to find fields to update"""
  filter: clientUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateClient!
}

input UpdateManyCrewDetailsInput {
  """Filter used to find fields to update"""
  filter: crewDetailUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateCrewDetail!
}

input UpdateManyInvoicesInput {
  """Filter used to find fields to update"""
  filter: InvoiceUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateInvoice!
}

input UpdateManyLeavesInput {
  """Filter used to find fields to update"""
  filter: LeaveUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateLeave!
}

input UpdateManyLibrariesInput {
  """Filter used to find fields to update"""
  filter: libraryUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateLibrary!
}

input UpdateManyManualsInput {
  """Filter used to find fields to update"""
  filter: manualUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateManual!
}

input UpdateManyNotificationsInput {
  """Filter used to find fields to update"""
  filter: notificationUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateNotification!
}

input UpdateManyOperatorsInput {
  """Filter used to find fields to update"""
  filter: operatorUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateOperator!
}

input UpdateManyPassengerDetailsInput {
  """Filter used to find fields to update"""
  filter: PassengerDetailUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdatePassengerDetail!
}

input UpdateManyPricesInput {
  """Filter used to find fields to update"""
  filter: priceUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdatePrice!
}

input UpdateManyQuotesInput {
  """Filter used to find fields to update"""
  filter: QuoteUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateQuote!
}

input UpdateManyRepresentativesInput {
  """Filter used to find fields to update"""
  filter: representativeUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateRepresentative!
}

input UpdateManyResourcesInput {
  """Filter used to find fields to update"""
  filter: resourceUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateResource!
}

type UpdateManyResponse {
  """The number of records updated."""
  updatedCount: Int!
}

input UpdateManyRolePermissionsInput {
  """Filter used to find fields to update"""
  filter: RolePermissionUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateRolePermission!
}

input UpdateManyRolesInput {
  """Filter used to find fields to update"""
  filter: roleUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateRole!
}

input UpdateManySecuritiesInput {
  """Filter used to find fields to update"""
  filter: securityUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateSecurity!
}

input UpdateManyTripDetailsInput {
  """Filter used to find fields to update"""
  filter: TripDetailUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateTripDetail!
}

input UpdateManyUsersInput {
  """Filter used to find fields to update"""
  filter: UserUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateUser!
}

input UpdateNotification {
  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  id: ID
  isActive: Boolean = true
  isReadBy: [String!]
  message: String
  metadata: JSONObject
  recipientIds: [String!]
  recipientRoles: [String!]
  refId: String
  refType: String
  title: String
  type: String

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
}

input UpdateOneAccessRequestInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateAccessRequest!
}

input UpdateOneAircraftCategoryInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateAircraftCategory!
}

input UpdateOneAircraftDetailInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateAircraftDetail!
}

input UpdateOneAirportInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateAirport!
}

input UpdateOneCityInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCity!
}

input UpdateOneClientInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateClient!
}

input UpdateOneCrewDetailInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCrewDetail!
}

input UpdateOneInvoiceInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateInvoice!
}

input UpdateOneLeaveInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateLeave!
}

input UpdateOneLibraryInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateLibrary!
}

input UpdateOneManualInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateManual!
}

input UpdateOneNotificationInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateNotification!
}

input UpdateOneOperatorInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateOperator!
}

input UpdateOnePassengerDetailInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdatePassengerDetail!
}

input UpdateOnePriceInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdatePrice!
}

input UpdateOneQuoteInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateQuoteDTO!
}

input UpdateOneRepresentativeInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateRepresentative!
}

input UpdateOneResourceInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateResource!
}

input UpdateOneRoleInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateRole!
}

input UpdateOneRolePermissionInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateRolePermission!
}

input UpdateOneSecurityInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateSecurity!
}

input UpdateOneTripDetailInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateTripDetail!
}

input UpdateOneUserInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateUser!
}

input UpdateOperator {
  address: String
  billingCycle: BillingCycle
  city: String
  companyLogo: String
  companyName: String

  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String
  createdByUser: CrewDetailDto

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  email: String
  id: ID
  isActive: Boolean = true
  name: String
  phone: String
  pinCode: String
  state: String
  subscriptionPlan: SubscriptionPlan
  supportEmail: String
  themeColor: String
  ticketFooterNote: String

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
  websiteUrl: String
}

input UpdatePassengerDetail {
  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  id: ID
  isActive: Boolean = true
  operatorId: String
  quotation: String
  quotationNo: String
  sectors: [sector!] = []

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
}

input UpdatePassengerDetailDataInput {
  sector: sector!
}

input UpdatePassengerDetailWhereInput {
  quotation: ID
  quotationNo: String!
}

input UpdatePrice {
  aircraft: String

  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  grandTotal: Float = 0
  id: ID
  isActive: Boolean = true
  prices: [priceInput!]

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
}

input UpdateQuote {
  aircraft: String
  category: Category
  code: String
  confirmationTemplate: String

  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  grandTotal: Float = 0
  id: ID
  isActive: Boolean = true
  isLatest: Boolean = true
  itinerary: [JSONObject!]
  operatorId: String
  prices: [priceInput!] = []
  providerType: String = "airops"
  quotationNo: String
  representative: String
  requestedBy: String
  revision: Int = 0
  status: QuoteStatus = QUOTE

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
  version: Int = 1
}

input UpdateQuoteDTO {
  aircraft: String!
  category: Category!
  grandTotal: Float! = 0
  itinerary: [JSONObject!]!
  operatorId: String
  prices: [priceInput!]!
  providerType: String!
  representative: String
  requestedBy: String
}

input UpdateQuoteStatusInput {
  id: String!
  status: QuoteStatus! = QUOTE
}

input UpdateRepresentative {
  address: String
  client: String

  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  email: String
  id: ID
  isActive: Boolean = true
  name: String
  phone: String

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
}

input UpdateResource {
  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  icon: String
  id: ID
  isActive: Boolean = true
  menu: String
  segment: String
  title: String

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
}

input UpdateRole {
  accessPermissions: [accessPermissionInput!]

  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  description: String
  id: ID
  isActive: Boolean = true
  name: String
  operatorId: String
  type: RoleType

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
}

input UpdateRolePermission {
  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  id: ID
  isActive: Boolean = true
  permissions: [JSONObject!]
  role: String

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
}

input UpdateSecurity {
  attachment: String

  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  department: DepartmentType = OTHERS
  id: ID
  isActive: Boolean = true
  name: String
  operatorId: String
  type: SecurityDocType

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
}

input UpdateTripDetail {
  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  id: ID
  isActive: Boolean = true
  operatorId: String
  quotation: String
  quotationNo: String
  sectors: [TripSector!] = []
  status: TripDetailStatus = DRAFT
  tripId: String

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
}

input UpdateTripDetailDataInput {
  sector: TripSector!
}

input UpdateTripDetailWhereInput {
  _id: ID!
}

input UpdateUser {
  address: String
  city: String

  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String
  createdByUser: UserDTO

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  dob: String
  email: String
  gender: Gender
  id: ID
  image: String
  isActive: Boolean = true
  name: String
  operatorId: String
  password: String
  phone: String
  pinCode: String
  roles: [String!]
  type: type = PLATFORM_USER

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
}

"""user dto"""
type User {
  address: String
  city: String

  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String
  createdByUser: User

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  dob: String
  email: String!
  gender: Gender
  id: ID!
  image: String
  isActive: Boolean!
  name: String!
  operator: operator!
  operatorId: String
  password: String!
  phone: String
  pinCode: String
  roles(
    """Specify to filter the records returned."""
    filter: roleFilter! = {}

    """Specify to sort results."""
    sorting: [roleSort!]! = []
  ): [role!]!
  type: type!

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
}

type UserAggregateGroupBy {
  createdAt: DateTime
  email: String
  id: ID
  isActive: Boolean
  name: String
  operatorId: String
  phone: String
  roles: [String!]
  type: type
}

type UserConnection {
  """Array of nodes."""
  nodes: [User!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type UserCountAggregate {
  createdAt: Int
  email: Int
  id: Int
  isActive: Int
  name: Int
  operatorId: Int
  phone: Int
  roles: Int
  type: Int
}

input UserDTO {
  address: String
  city: String
  createdByUser: UserDTO
  dob: String
  email: String!
  gender: Gender
  image: String
  name: String!
  operatorId: String
  password: String!
  phone: String
  pinCode: String
  roles: [String!]
  type: type! = PLATFORM_USER
}

input UserDeleteFilter {
  and: [UserDeleteFilter!]
  createdAt: DateFieldComparison
  email: StringFieldComparison
  id: IDFilterComparison
  isActive: BooleanFieldComparison
  name: StringFieldComparison
  operatorId: StringFieldComparison
  or: [UserDeleteFilter!]
  phone: StringFieldComparison
  roles: UserRolesFilterComparison
  type: TypeFilterComparison
}

type UserDeleteResponse {
  address: String
  city: String

  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String
  createdByUser: User

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  dob: String
  email: String
  gender: Gender
  id: ID
  image: String
  isActive: Boolean
  name: String
  operatorId: String
  password: String
  phone: String
  pinCode: String
  roles: [String!]
  type: type

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
}

input UserFilter {
  and: [UserFilter!]
  createdAt: DateFieldComparison
  email: StringFieldComparison
  id: IDFilterComparison
  isActive: BooleanFieldComparison
  name: StringFieldComparison
  operatorId: StringFieldComparison
  or: [UserFilter!]
  phone: StringFieldComparison
  roles: UserRolesFilterComparison
  type: TypeFilterComparison
}

type UserInput {
  aadhar: String
  alternateContact: String
  anniversaryDate: DateTime
  bankDetails: [BankDetailDto!]
  bloodGroup: String
  certifications: [CertificationDto!]

  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String
  createdByUser: crewDetail
  crewId: String
  currentAddress: String
  dateOfBirth: DateTime

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  designation: String
  displayName: String
  education: String
  email: String
  experience: String
  fullName: String!
  gender: Gender
  gst: String
  id: String!
  isActive: Boolean!
  location: String
  martialStatus: String
  nationality: String
  nominees: [NomineeDto!]
  operator: operator
  operatorId: String
  pan: String
  passportNo: String
  permanentAddress: String
  permissions: [JSONObject!]!
  phone: String
  profile: String
  religion: String
  roles: [String!]!

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
}

input UserInputDto {
  address: String
  email: String!
  name: String!
  operatorId: String
  password: String
  phone: String
  roles: [String!]!
}

type UserMaxAggregate {
  createdAt: DateTime
  email: String
  id: ID
  name: String
  operatorId: String
  phone: String
  roles: [String!]
  type: type
}

type UserMinAggregate {
  createdAt: DateTime
  email: String
  id: ID
  name: String
  operatorId: String
  phone: String
  roles: [String!]
  type: type
}

input UserRolesFilterComparison {
  eq: [String!]
  in: [[String!]!]
  neq: [String!]
  notIn: [[String!]!]
}

input UserSort {
  direction: SortDirection!
  field: UserSortFields!
  nulls: SortNulls
}

enum UserSortFields {
  createdAt
  email
  id
  isActive
  name
  operatorId
  phone
  roles
  type
}

input UserUpdateFilter {
  and: [UserUpdateFilter!]
  createdAt: DateFieldComparison
  email: StringFieldComparison
  id: IDFilterComparison
  isActive: BooleanFieldComparison
  name: StringFieldComparison
  operatorId: StringFieldComparison
  or: [UserUpdateFilter!]
  phone: StringFieldComparison
  roles: UserRolesFilterComparison
  type: TypeFilterComparison
}

input accessPermissionInput {
  action: [ResourceAction!]!
  resource: String!
}

input acknowledgementInput {
  documentType: SalesDocumentType!
  email: String!
  quotationNo: String!
}

input assignedCrewInput {
  crews: [String!]!
  designation: String!
}

input certificationInput {
  dateOfIssue: DateTime
  issuedBy: String
  licenceNo: String
  name: String
  validTill: DateTime
}

"""Client"""
type client {
  address: String!
  billingAddress: String

  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  email: String!
  gstNo: String
  id: ID!
  isActive: Boolean!
  isCompany: Boolean
  isPerson: Boolean
  lastName: String
  name: String!
  operator: operator!
  operatorId: String
  panNo: String
  phone: String!
  type: ClientType!

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
}

type clientAggregateGroupBy {
  address: String
  createdAt: DateTime
  email: String
  gstNo: String
  id: ID
  isActive: Boolean
  isCompany: Boolean
  isPerson: Boolean
  operatorId: String
  panNo: String
  phone: String
  type: ClientType
}

type clientCountAggregate {
  address: Int
  createdAt: Int
  email: Int
  gstNo: Int
  id: Int
  isActive: Int
  isCompany: Int
  isPerson: Int
  operatorId: Int
  panNo: Int
  phone: Int
  type: Int
}

input clientDeleteFilter {
  address: StringFieldComparison
  and: [clientDeleteFilter!]
  createdAt: DateFieldComparison
  email: StringFieldComparison
  gstNo: StringFieldComparison
  id: IDFilterComparison
  isActive: BooleanFieldComparison
  isCompany: BooleanFieldComparison
  isPerson: BooleanFieldComparison
  operatorId: StringFieldComparison
  or: [clientDeleteFilter!]
  panNo: StringFieldComparison
  phone: StringFieldComparison
  type: ClientTypeFilterComparison
}

input clientFilter {
  address: StringFieldComparison
  and: [clientFilter!]
  createdAt: DateFieldComparison
  email: StringFieldComparison
  gstNo: StringFieldComparison
  id: IDFilterComparison
  isActive: BooleanFieldComparison
  isCompany: BooleanFieldComparison
  isPerson: BooleanFieldComparison
  operatorId: StringFieldComparison
  or: [clientFilter!]
  panNo: StringFieldComparison
  phone: StringFieldComparison
  type: ClientTypeFilterComparison
}

type clientMaxAggregate {
  address: String
  createdAt: DateTime
  email: String
  gstNo: String
  id: ID
  operatorId: String
  panNo: String
  phone: String
  type: ClientType
}

type clientMinAggregate {
  address: String
  createdAt: DateTime
  email: String
  gstNo: String
  id: ID
  operatorId: String
  panNo: String
  phone: String
  type: ClientType
}

input clientSort {
  direction: SortDirection!
  field: clientSortFields!
  nulls: SortNulls
}

enum clientSortFields {
  address
  createdAt
  email
  gstNo
  id
  isActive
  isCompany
  isPerson
  operatorId
  panNo
  phone
  type
}

input clientUpdateFilter {
  address: StringFieldComparison
  and: [clientUpdateFilter!]
  createdAt: DateFieldComparison
  email: StringFieldComparison
  gstNo: StringFieldComparison
  id: IDFilterComparison
  isActive: BooleanFieldComparison
  isCompany: BooleanFieldComparison
  isPerson: BooleanFieldComparison
  operatorId: StringFieldComparison
  or: [clientUpdateFilter!]
  panNo: StringFieldComparison
  phone: StringFieldComparison
  type: ClientTypeFilterComparison
}

"""Crew Detail"""
type crewDetail {
  aadhar: String
  alternateContact: String
  anniversaryDate: DateTime
  bankDetails: [BankDetailDto!]
  bloodGroup: String
  certifications: [CertificationDto!]

  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String
  createdByUser: crewDetail
  crewId: String
  currentAddress: String
  dateOfBirth: DateTime

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  designation: String
  displayName: String
  education: String
  email: String
  experience: String
  fullName: String!
  gender: Gender
  gst: String
  id: ID!
  isActive: Boolean!
  location: String
  martialStatus: String
  nationality: String
  nominees: [NomineeDto!]
  operator: operator!
  operatorId: String
  pan: String
  passportNo: String
  permanentAddress: String
  phone: String
  profile: String
  religion: String
  roles(
    """Specify to filter the records returned."""
    filter: roleFilter! = {}

    """Specify to sort results."""
    sorting: [roleSort!]! = []
  ): [role!]!

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
}

type crewDetailAggregateGroupBy {
  createdAt: DateTime
  crewId: String
  displayName: String
  fullName: String
  id: ID
  isActive: Boolean
  operatorId: String
  roles: [String!]
}

type crewDetailCountAggregate {
  createdAt: Int
  crewId: Int
  displayName: Int
  fullName: Int
  id: Int
  isActive: Int
  operatorId: Int
  roles: Int
}

input crewDetailDeleteFilter {
  and: [crewDetailDeleteFilter!]
  createdAt: DateFieldComparison
  crewId: StringFieldComparison
  displayName: StringFieldComparison
  fullName: StringFieldComparison
  id: IDFilterComparison
  isActive: BooleanFieldComparison
  operatorId: StringFieldComparison
  or: [crewDetailDeleteFilter!]
  roles: CrewDetailRolesFilterComparison
}

input crewDetailFilter {
  and: [crewDetailFilter!]
  createdAt: DateFieldComparison
  crewId: StringFieldComparison
  displayName: StringFieldComparison
  fullName: StringFieldComparison
  id: IDFilterComparison
  isActive: BooleanFieldComparison
  operatorId: StringFieldComparison
  or: [crewDetailFilter!]
  roles: CrewDetailRolesFilterComparison
}

type crewDetailMaxAggregate {
  createdAt: DateTime
  crewId: String
  displayName: String
  fullName: String
  id: ID
  operatorId: String
  roles: [String!]
}

type crewDetailMinAggregate {
  createdAt: DateTime
  crewId: String
  displayName: String
  fullName: String
  id: ID
  operatorId: String
  roles: [String!]
}

input crewDetailSort {
  direction: SortDirection!
  field: crewDetailSortFields!
  nulls: SortNulls
}

enum crewDetailSortFields {
  createdAt
  crewId
  displayName
  fullName
  id
  isActive
  operatorId
  roles
}

input crewDetailUpdateFilter {
  and: [crewDetailUpdateFilter!]
  createdAt: DateFieldComparison
  crewId: StringFieldComparison
  displayName: StringFieldComparison
  fullName: StringFieldComparison
  id: IDFilterComparison
  isActive: BooleanFieldComparison
  operatorId: StringFieldComparison
  or: [crewDetailUpdateFilter!]
  roles: CrewDetailRolesFilterComparison
}

input fuelSupplier {
  alternateContactNumber: String
  companyName: String!
  contactNumber: String!
  email: String!
}

type fuelSupplierDTO {
  alternateContactNumber: String
  companyName: String!
  contactNumber: String!
  email: String!
}

input groundHandlersInfo {
  alternateContactNumber: String
  companyName: String!
  contactNumber: String!
  email: String!
  fullName: String!
}

type groundHandlersInfoDTO {
  alternateContactNumber: String
  companyName: String!
  contactNumber: String!
  email: String!
  fullName: String!
}

"""Library"""
type library {
  attachment: String!

  """The date when the record was created"""
  createdAt: DateTime
  createdBy: crewDetail

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  department: DepartmentType!
  id: ID!
  isActive: Boolean!
  name: String!
  operator: operator!
  operatorId: String

  """The date when the record was last updated"""
  updatedAt: DateTime
  updatedBy: crewDetail
}

type libraryAggregateGroupBy {
  createdAt: DateTime
  department: DepartmentType
  id: ID
  isActive: Boolean
  name: String
  operatorId: String
}

type libraryCountAggregate {
  createdAt: Int
  department: Int
  id: Int
  isActive: Int
  name: Int
  operatorId: Int
}

input libraryDeleteFilter {
  and: [libraryDeleteFilter!]
  createdAt: DateFieldComparison
  department: DepartmentTypeFilterComparison
  id: IDFilterComparison
  isActive: BooleanFieldComparison
  name: StringFieldComparison
  operatorId: StringFieldComparison
  or: [libraryDeleteFilter!]
}

input libraryFilter {
  and: [libraryFilter!]
  createdAt: DateFieldComparison
  department: DepartmentTypeFilterComparison
  id: IDFilterComparison
  isActive: BooleanFieldComparison
  name: StringFieldComparison
  operatorId: StringFieldComparison
  or: [libraryFilter!]
}

type libraryMaxAggregate {
  createdAt: DateTime
  department: DepartmentType
  id: ID
  name: String
  operatorId: String
}

type libraryMinAggregate {
  createdAt: DateTime
  department: DepartmentType
  id: ID
  name: String
  operatorId: String
}

input librarySort {
  direction: SortDirection!
  field: librarySortFields!
  nulls: SortNulls
}

enum librarySortFields {
  createdAt
  department
  id
  isActive
  name
  operatorId
}

input libraryUpdateFilter {
  and: [libraryUpdateFilter!]
  createdAt: DateFieldComparison
  department: DepartmentTypeFilterComparison
  id: IDFilterComparison
  isActive: BooleanFieldComparison
  name: StringFieldComparison
  operatorId: StringFieldComparison
  or: [libraryUpdateFilter!]
}

type loginResponseDto {
  access_token: String!
  user: UserInput!
}

"""Manual"""
type manual {
  attachment: String!

  """The date when the record was created"""
  createdAt: DateTime
  createdBy: crewDetail

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  department: String!
  id: ID!
  isActive: Boolean!
  name: String!
  operator: operator!
  operatorId: String

  """The date when the record was last updated"""
  updatedAt: DateTime
  updatedBy: crewDetail
}

type manualAggregateGroupBy {
  createdAt: DateTime
  department: String
  id: ID
  isActive: Boolean
  name: String
  operatorId: String
}

type manualCountAggregate {
  createdAt: Int
  department: Int
  id: Int
  isActive: Int
  name: Int
  operatorId: Int
}

input manualDeleteFilter {
  and: [manualDeleteFilter!]
  createdAt: DateFieldComparison
  department: StringFieldComparison
  id: IDFilterComparison
  isActive: BooleanFieldComparison
  name: StringFieldComparison
  operatorId: StringFieldComparison
  or: [manualDeleteFilter!]
}

input manualFilter {
  and: [manualFilter!]
  createdAt: DateFieldComparison
  department: StringFieldComparison
  id: IDFilterComparison
  isActive: BooleanFieldComparison
  name: StringFieldComparison
  operatorId: StringFieldComparison
  or: [manualFilter!]
}

type manualMaxAggregate {
  createdAt: DateTime
  department: String
  id: ID
  name: String
  operatorId: String
}

type manualMinAggregate {
  createdAt: DateTime
  department: String
  id: ID
  name: String
  operatorId: String
}

input manualSort {
  direction: SortDirection!
  field: manualSortFields!
  nulls: SortNulls
}

enum manualSortFields {
  createdAt
  department
  id
  isActive
  name
  operatorId
}

input manualUpdateFilter {
  and: [manualUpdateFilter!]
  createdAt: DateFieldComparison
  department: StringFieldComparison
  id: IDFilterComparison
  isActive: BooleanFieldComparison
  name: StringFieldComparison
  operatorId: StringFieldComparison
  or: [manualUpdateFilter!]
}

input mealInput {
  category: String!
  instructions: String!
  item: String!
  portions: Int!
  type: String!
}

input nomineeInput {
  address: String
  alternateContact: String
  fullName: String
  gender: Gender
  idProof: String
  insurance: String
  mobileNumber: String
  relation: String
}

type notification {
  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  id: ID!
  isActive: Boolean!
  isReadBy: [String!]
  message: String!
  metadata: JSONObject
  recipientIds: [String!]
  recipientRoles: [String!]
  refId: String!
  refType: String!
  title: String
  type: String!

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
}

type notificationAggregateGroupBy {
  createdAt: DateTime
  id: ID
  isActive: Boolean
}

type notificationCountAggregate {
  createdAt: Int
  id: Int
  isActive: Int
}

input notificationDeleteFilter {
  and: [notificationDeleteFilter!]
  createdAt: DateFieldComparison
  id: IDFilterComparison
  isActive: BooleanFieldComparison
  or: [notificationDeleteFilter!]
}

type notificationEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the notification"""
  node: notification!
}

input notificationFilter {
  and: [notificationFilter!]
  createdAt: DateFieldComparison
  id: IDFilterComparison
  isActive: BooleanFieldComparison
  or: [notificationFilter!]
}

type notificationMaxAggregate {
  createdAt: DateTime
  id: ID
}

type notificationMinAggregate {
  createdAt: DateTime
  id: ID
}

input notificationSort {
  direction: SortDirection!
  field: notificationSortFields!
  nulls: SortNulls
}

enum notificationSortFields {
  createdAt
  id
  isActive
}

input notificationUpdateFilter {
  and: [notificationUpdateFilter!]
  createdAt: DateFieldComparison
  id: IDFilterComparison
  isActive: BooleanFieldComparison
  or: [notificationUpdateFilter!]
}

"""Operator"""
type operator {
  address: String!
  billingCycle: BillingCycle
  city: String!
  companyLogo: String!
  companyName: String!

  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String
  createdByUser: crewDetail

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  email: String!
  id: ID!
  isActive: Boolean!
  name: String!
  phone: String!
  pinCode: String!
  state: String!
  subscriptionPlan: SubscriptionPlan
  supportEmail: String
  themeColor: String
  ticketFooterNote: String

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
  websiteUrl: String
}

type operatorAggregateGroupBy {
  billingCycle: BillingCycle
  companyName: String
  createdAt: DateTime
  email: String
  id: ID
  isActive: Boolean
  name: String
  phone: String
  subscriptionPlan: SubscriptionPlan
}

type operatorCountAggregate {
  billingCycle: Int
  companyName: Int
  createdAt: Int
  email: Int
  id: Int
  isActive: Int
  name: Int
  phone: Int
  subscriptionPlan: Int
}

input operatorDeleteFilter {
  and: [operatorDeleteFilter!]
  billingCycle: BillingCycleFilterComparison
  companyName: StringFieldComparison
  createdAt: DateFieldComparison
  email: StringFieldComparison
  id: IDFilterComparison
  isActive: BooleanFieldComparison
  name: StringFieldComparison
  or: [operatorDeleteFilter!]
  phone: StringFieldComparison
  subscriptionPlan: SubscriptionPlanFilterComparison
}

input operatorFilter {
  and: [operatorFilter!]
  billingCycle: BillingCycleFilterComparison
  companyName: StringFieldComparison
  createdAt: DateFieldComparison
  email: StringFieldComparison
  id: IDFilterComparison
  isActive: BooleanFieldComparison
  name: StringFieldComparison
  or: [operatorFilter!]
  phone: StringFieldComparison
  subscriptionPlan: SubscriptionPlanFilterComparison
}

type operatorMaxAggregate {
  billingCycle: BillingCycle
  companyName: String
  createdAt: DateTime
  email: String
  id: ID
  name: String
  phone: String
  subscriptionPlan: SubscriptionPlan
}

type operatorMinAggregate {
  billingCycle: BillingCycle
  companyName: String
  createdAt: DateTime
  email: String
  id: ID
  name: String
  phone: String
  subscriptionPlan: SubscriptionPlan
}

input operatorSort {
  direction: SortDirection!
  field: operatorSortFields!
  nulls: SortNulls
}

enum operatorSortFields {
  billingCycle
  companyName
  createdAt
  email
  id
  isActive
  name
  phone
  subscriptionPlan
}

input operatorUpdateFilter {
  and: [operatorUpdateFilter!]
  billingCycle: BillingCycleFilterComparison
  companyName: StringFieldComparison
  createdAt: DateFieldComparison
  email: StringFieldComparison
  id: IDFilterComparison
  isActive: BooleanFieldComparison
  name: StringFieldComparison
  or: [operatorUpdateFilter!]
  phone: StringFieldComparison
  subscriptionPlan: SubscriptionPlanFilterComparison
}

input passengerInput {
  aadharId: String!
  age: Int!
  gender: String!
  name: String!
}

"""price"""
type price {
  aircraft: AircraftDetail!

  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  grandTotal: Float!
  id: ID!
  isActive: Boolean!
  prices: [PriceInputDto!]!

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
}

type priceAggregateGroupBy {
  aircraft: String
  createdAt: DateTime
  id: ID
  isActive: Boolean
}

type priceCountAggregate {
  aircraft: Int
  createdAt: Int
  id: Int
  isActive: Int
}

input priceDeleteFilter {
  aircraft: StringFieldComparison
  and: [priceDeleteFilter!]
  createdAt: DateFieldComparison
  id: IDFilterComparison
  isActive: BooleanFieldComparison
  or: [priceDeleteFilter!]
}

input priceFilter {
  aircraft: StringFieldComparison
  and: [priceFilter!]
  createdAt: DateFieldComparison
  id: IDFilterComparison
  isActive: BooleanFieldComparison
  or: [priceFilter!]
}

input priceInput {
  currency: String! = "INR"
  label: String! = "Block Hour Fee"
  margin: Float! = 0
  price: Float! = 0
  total: Float! = 0

  """duration"""
  unit: String! = "01:10"
}

type priceMaxAggregate {
  aircraft: String
  createdAt: DateTime
  id: ID
}

type priceMinAggregate {
  aircraft: String
  createdAt: DateTime
  id: ID
}

input priceSort {
  direction: SortDirection!
  field: priceSortFields!
  nulls: SortNulls
}

enum priceSortFields {
  aircraft
  createdAt
  id
  isActive
}

input priceUpdateFilter {
  aircraft: StringFieldComparison
  and: [priceUpdateFilter!]
  createdAt: DateFieldComparison
  id: IDFilterComparison
  isActive: BooleanFieldComparison
  or: [priceUpdateFilter!]
}

"""Representative"""
type representative {
  address: String!
  client: client!

  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  email: String!
  id: ID!
  isActive: Boolean!
  name: String!
  phone: String!

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
}

type representativeAggregateGroupBy {
  address: String
  client: String
  createdAt: DateTime
  email: String
  id: ID
  isActive: Boolean
  name: String
  phone: String
}

type representativeCountAggregate {
  address: Int
  client: Int
  createdAt: Int
  email: Int
  id: Int
  isActive: Int
  name: Int
  phone: Int
}

input representativeDeleteFilter {
  address: StringFieldComparison
  and: [representativeDeleteFilter!]
  client: StringFieldComparison
  createdAt: DateFieldComparison
  email: StringFieldComparison
  id: IDFilterComparison
  isActive: BooleanFieldComparison
  name: StringFieldComparison
  or: [representativeDeleteFilter!]
  phone: StringFieldComparison
}

input representativeFilter {
  address: StringFieldComparison
  and: [representativeFilter!]
  client: StringFieldComparison
  createdAt: DateFieldComparison
  email: StringFieldComparison
  id: IDFilterComparison
  isActive: BooleanFieldComparison
  name: StringFieldComparison
  or: [representativeFilter!]
  phone: StringFieldComparison
}

type representativeMaxAggregate {
  address: String
  client: String
  createdAt: DateTime
  email: String
  id: ID
  name: String
  phone: String
}

type representativeMinAggregate {
  address: String
  client: String
  createdAt: DateTime
  email: String
  id: ID
  name: String
  phone: String
}

input representativeSort {
  direction: SortDirection!
  field: representativeSortFields!
  nulls: SortNulls
}

enum representativeSortFields {
  address
  client
  createdAt
  email
  id
  isActive
  name
  phone
}

input representativeUpdateFilter {
  address: StringFieldComparison
  and: [representativeUpdateFilter!]
  client: StringFieldComparison
  createdAt: DateFieldComparison
  email: StringFieldComparison
  id: IDFilterComparison
  isActive: BooleanFieldComparison
  name: StringFieldComparison
  or: [representativeUpdateFilter!]
  phone: StringFieldComparison
}

"""resource"""
type resource {
  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  icon: String!
  id: ID!
  isActive: Boolean!
  menu: String!
  segment: String!
  title: String!

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
}

type resourceAggregateGroupBy {
  createdAt: DateTime
  id: ID
  isActive: Boolean
  menu: String
}

type resourceCountAggregate {
  createdAt: Int
  id: Int
  isActive: Int
  menu: Int
}

input resourceDeleteFilter {
  and: [resourceDeleteFilter!]
  createdAt: DateFieldComparison
  id: IDFilterComparison
  isActive: BooleanFieldComparison
  menu: StringFieldComparison
  or: [resourceDeleteFilter!]
}

input resourceFilter {
  and: [resourceFilter!]
  createdAt: DateFieldComparison
  id: IDFilterComparison
  isActive: BooleanFieldComparison
  menu: StringFieldComparison
  or: [resourceFilter!]
}

type resourceMaxAggregate {
  createdAt: DateTime
  id: ID
  menu: String
}

type resourceMinAggregate {
  createdAt: DateTime
  id: ID
  menu: String
}

input resourceSort {
  direction: SortDirection!
  field: resourceSortFields!
  nulls: SortNulls
}

enum resourceSortFields {
  createdAt
  id
  isActive
  menu
}

input resourceUpdateFilter {
  and: [resourceUpdateFilter!]
  createdAt: DateFieldComparison
  id: IDFilterComparison
  isActive: BooleanFieldComparison
  menu: StringFieldComparison
  or: [resourceUpdateFilter!]
}

"""User Roles"""
type role {
  accessPermissions: [AccessPermissionInput!]!

  """The date when the record was created"""
  createdAt: DateTime

  """The id of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  description: String
  id: ID!
  isActive: Boolean!
  name: String!
  operator: operator!
  operatorId: String
  type: RoleType!

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The id of the user who last updated the record"""
  updatedBy: String
}

type roleAggregateGroupBy {
  createdAt: DateTime
  id: ID
  isActive: Boolean
  name: String
  operatorId: String
  type: RoleType
}

type roleCountAggregate {
  createdAt: Int
  id: Int
  isActive: Int
  name: Int
  operatorId: Int
  type: Int
}

input roleDeleteFilter {
  and: [roleDeleteFilter!]
  createdAt: DateFieldComparison
  id: IDFilterComparison
  isActive: BooleanFieldComparison
  name: StringFieldComparison
  operatorId: StringFieldComparison
  or: [roleDeleteFilter!]
  type: RoleTypeFilterComparison
}

input roleFilter {
  and: [roleFilter!]
  createdAt: DateFieldComparison
  id: IDFilterComparison
  isActive: BooleanFieldComparison
  name: StringFieldComparison
  operatorId: StringFieldComparison
  or: [roleFilter!]
  type: RoleTypeFilterComparison
}

type roleMaxAggregate {
  createdAt: DateTime
  id: ID
  name: String
  operatorId: String
  type: RoleType
}

type roleMinAggregate {
  createdAt: DateTime
  id: ID
  name: String
  operatorId: String
  type: RoleType
}

input roleSort {
  direction: SortDirection!
  field: roleSortFields!
  nulls: SortNulls
}

enum roleSortFields {
  createdAt
  id
  isActive
  name
  operatorId
  type
}

input roleUpdateFilter {
  and: [roleUpdateFilter!]
  createdAt: DateFieldComparison
  id: IDFilterComparison
  isActive: BooleanFieldComparison
  name: StringFieldComparison
  operatorId: StringFieldComparison
  or: [roleUpdateFilter!]
  type: RoleTypeFilterComparison
}

input sector {
  arrivalDate: DateTime!
  arrivalTime: String!
  depatureDate: DateTime!
  depatureTime: String!
  destination: String!
  flightTime: String!
  meals: [mealInput!]
  passengers: [passengerInput!]
  pax: Int!
  sectorNo: Int
  source: String!
  travel: travelInput
}

"""Security"""
type security {
  attachment: String!

  """The date when the record was created"""
  createdAt: DateTime
  createdBy: crewDetail

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The id of the user who deleted the record"""
  deletedBy: String
  department: DepartmentType!
  id: ID!
  isActive: Boolean!
  name: String!
  operator: operator!
  operatorId: String
  type: SecurityDocType

  """The date when the record was last updated"""
  updatedAt: DateTime
  updatedBy: crewDetail
}

type securityAggregateGroupBy {
  createdAt: DateTime
  department: DepartmentType
  id: ID
  isActive: Boolean
  name: String
  operatorId: String
  type: SecurityDocType
}

type securityCountAggregate {
  createdAt: Int
  department: Int
  id: Int
  isActive: Int
  name: Int
  operatorId: Int
  type: Int
}

input securityDeleteFilter {
  and: [securityDeleteFilter!]
  createdAt: DateFieldComparison
  department: DepartmentTypeFilterComparison
  id: IDFilterComparison
  isActive: BooleanFieldComparison
  name: StringFieldComparison
  operatorId: StringFieldComparison
  or: [securityDeleteFilter!]
  type: SecurityDocTypeFilterComparison
}

input securityFilter {
  and: [securityFilter!]
  createdAt: DateFieldComparison
  department: DepartmentTypeFilterComparison
  id: IDFilterComparison
  isActive: BooleanFieldComparison
  name: StringFieldComparison
  operatorId: StringFieldComparison
  or: [securityFilter!]
  type: SecurityDocTypeFilterComparison
}

type securityMaxAggregate {
  createdAt: DateTime
  department: DepartmentType
  id: ID
  name: String
  operatorId: String
  type: SecurityDocType
}

type securityMinAggregate {
  createdAt: DateTime
  department: DepartmentType
  id: ID
  name: String
  operatorId: String
  type: SecurityDocType
}

input securitySort {
  direction: SortDirection!
  field: securitySortFields!
  nulls: SortNulls
}

enum securitySortFields {
  createdAt
  department
  id
  isActive
  name
  operatorId
  type
}

input securityUpdateFilter {
  and: [securityUpdateFilter!]
  createdAt: DateFieldComparison
  department: DepartmentTypeFilterComparison
  id: IDFilterComparison
  isActive: BooleanFieldComparison
  name: StringFieldComparison
  operatorId: StringFieldComparison
  or: [securityUpdateFilter!]
  type: SecurityDocTypeFilterComparison
}

input travelInput {
  category: String!
  dropAt: String!
  seatingCapacity: Int!
  type: String!
  vehicleChoice: String!
}

enum type {
  AGENT_ADMIN
  AGENT_USER
  PLATFORM_USER
  SUPER_ADMIN
}

input userInput {
  aadhar: String
  alternateContact: String
  anniversaryDate: DateTime
  bankDetails: [BankDetailInput!]
  bloodGroup: String
  certifications: [certificationInput!]
  createdByUser: CrewDetailDto
  crewId: String
  currentAddress: String
  dateOfBirth: DateTime
  designation: String
  displayName: String
  education: String
  email: String
  experience: String
  fullName: String!
  gender: Gender
  gst: String
  id: String!
  location: String
  martialStatus: String
  nationality: String
  nominees: [nomineeInput!]
  operator: OperatorDto
  operatorId: String
  pan: String
  passportNo: String
  permanentAddress: String
  permissions: [JSONObject!]!
  phone: String
  profile: String
  religion: String
  roles: [String!]!
}