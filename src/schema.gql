# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AddRolePermissionsToRoleInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

"""Aircraft"""
type Aircraft {
  category: AircraftCategory!

  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  id: ID!
  name: String!
  status: Boolean!

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

type AircraftAggregateGroupBy {
  category: String
  name: String
  status: Boolean
}

"""AircraftCategory"""
type AircraftCategory {
  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  description: String!
  id: ID!
  name: String!
  status: Boolean!

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

type AircraftCategoryAggregateGroupBy {
  description: String
  name: String
  status: Boolean
}

type AircraftCategoryConnection {
  """Array of nodes."""
  nodes: [AircraftCategory!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type AircraftCategoryCountAggregate {
  description: Int
  name: Int
  status: Int
}

input AircraftCategoryDeleteFilter {
  and: [AircraftCategoryDeleteFilter!]
  description: StringFieldComparison
  name: StringFieldComparison
  or: [AircraftCategoryDeleteFilter!]
  status: BooleanFieldComparison
}

type AircraftCategoryDeleteResponse {
  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  description: String
  id: ID
  name: String
  status: Boolean

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

input AircraftCategoryFilter {
  and: [AircraftCategoryFilter!]
  description: StringFieldComparison
  name: StringFieldComparison
  or: [AircraftCategoryFilter!]
  status: BooleanFieldComparison
}

type AircraftCategoryMaxAggregate {
  description: String
  name: String
}

type AircraftCategoryMinAggregate {
  description: String
  name: String
}

input AircraftCategorySort {
  direction: SortDirection!
  field: AircraftCategorySortFields!
  nulls: SortNulls
}

enum AircraftCategorySortFields {
  description
  name
  status
}

input AircraftCategoryUpdateFilter {
  and: [AircraftCategoryUpdateFilter!]
  description: StringFieldComparison
  name: StringFieldComparison
  or: [AircraftCategoryUpdateFilter!]
  status: BooleanFieldComparison
}

type AircraftConnection {
  """Array of nodes."""
  nodes: [Aircraft!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type AircraftCountAggregate {
  category: Int
  name: Int
  status: Int
}

input AircraftDeleteFilter {
  and: [AircraftDeleteFilter!]
  category: StringFieldComparison
  name: StringFieldComparison
  or: [AircraftDeleteFilter!]
  status: BooleanFieldComparison
}

type AircraftDeleteResponse {
  category: String

  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  id: ID
  name: String
  status: Boolean

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

input AircraftFilter {
  and: [AircraftFilter!]
  category: StringFieldComparison
  name: StringFieldComparison
  or: [AircraftFilter!]
  status: BooleanFieldComparison
}

type AircraftMaxAggregate {
  category: String
  name: String
}

type AircraftMinAggregate {
  category: String
  name: String
}

input AircraftSort {
  direction: SortDirection!
  field: AircraftSortFields!
  nulls: SortNulls
}

enum AircraftSortFields {
  category
  name
  status
}

input AircraftUpdateFilter {
  and: [AircraftUpdateFilter!]
  category: StringFieldComparison
  name: StringFieldComparison
  or: [AircraftUpdateFilter!]
  status: BooleanFieldComparison
}

"""Airport"""
type Airport {
  city: String!

  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  iata_code: String!
  icao_code: String!
  id: ID!
  latitude: Int!
  longitude: Int!
  name: String!
  status: Boolean!

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

type AirportAggregateGroupBy {
  city: String
  iata_code: String
  icao_code: String
  name: String
  status: Boolean
}

type AirportConnection {
  """Array of nodes."""
  nodes: [Airport!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type AirportCountAggregate {
  city: Int
  iata_code: Int
  icao_code: Int
  name: Int
  status: Int
}

input AirportDeleteFilter {
  and: [AirportDeleteFilter!]
  city: StringFieldComparison
  iata_code: StringFieldComparison
  icao_code: StringFieldComparison
  name: StringFieldComparison
  or: [AirportDeleteFilter!]
  status: BooleanFieldComparison
}

type AirportDeleteResponse {
  city: String

  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  iata_code: String
  icao_code: String
  id: ID
  latitude: Int
  longitude: Int
  name: String
  status: Boolean

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

input AirportFilter {
  and: [AirportFilter!]
  city: StringFieldComparison
  iata_code: StringFieldComparison
  icao_code: StringFieldComparison
  name: StringFieldComparison
  or: [AirportFilter!]
  status: BooleanFieldComparison
}

type AirportMaxAggregate {
  city: String
  iata_code: String
  icao_code: String
  name: String
}

type AirportMinAggregate {
  city: String
  iata_code: String
  icao_code: String
  name: String
}

input AirportSort {
  direction: SortDirection!
  field: AirportSortFields!
  nulls: SortNulls
}

enum AirportSortFields {
  city
  iata_code
  icao_code
  name
  status
}

input AirportUpdateFilter {
  and: [AirportUpdateFilter!]
  city: StringFieldComparison
  iata_code: StringFieldComparison
  icao_code: StringFieldComparison
  name: StringFieldComparison
  or: [AirportUpdateFilter!]
  status: BooleanFieldComparison
}

input BooleanFieldComparison {
  is: Boolean
  isNot: Boolean
}

type ClientConnection {
  """Array of nodes."""
  nodes: [client!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type ClientDeleteResponse {
  address: String

  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  email: String
  id: ID
  isCompany: Boolean
  isPerson: Boolean
  name: String
  phone: String
  status: Boolean

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

input CreateAircraft {
  category: String

  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  id: ID
  name: String
  status: Boolean = true

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

input CreateAircraftCategory {
  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  description: String
  id: ID
  name: String
  status: Boolean = true

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

input CreateAirport {
  city: String

  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  iata_code: String
  icao_code: String
  id: ID
  latitude: Int
  longitude: Int
  name: String
  status: Boolean = true

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

input CreateClient {
  address: String

  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  email: String
  id: ID
  isCompany: Boolean
  isPerson: Boolean
  name: String
  phone: String
  status: Boolean = true

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

input CreateManyAircraftCategoriesInput {
  """Array of records to create"""
  aircraftCategories: [CreateAircraftCategory!]!
}

input CreateManyAircraftInput {
  """Array of records to create"""
  aircraft: [CreateAircraft!]!
}

input CreateManyAirportsInput {
  """Array of records to create"""
  airports: [CreateAirport!]!
}

input CreateManyClientsInput {
  """Array of records to create"""
  clients: [CreateClient!]!
}

input CreateManyQuotesInput {
  """Array of records to create"""
  quotes: [CreateQuote!]!
}

input CreateManyRolePermissionsInput {
  """Array of records to create"""
  rolePermissions: [CreateRolePermission!]!
}

input CreateManyRolesInput {
  """Array of records to create"""
  roles: [CreateRole!]!
}

input CreateManyUsersInput {
  """Array of records to create"""
  users: [CreateUser!]!
}

input CreateOneAircraftCategoryInput {
  """The record to create"""
  aircraftCategory: CreateAircraftCategory!
}

input CreateOneAircraftInput {
  """The record to create"""
  aircraft: CreateAircraft!
}

input CreateOneAirportInput {
  """The record to create"""
  airport: CreateAirport!
}

input CreateOneClientInput {
  """The record to create"""
  client: CreateClient!
}

input CreateOneQuoteInput {
  """The record to create"""
  quote: CreateQuote!
}

input CreateOneRoleInput {
  """The record to create"""
  role: CreateRole!
}

input CreateOneRolePermissionInput {
  """The record to create"""
  rolePermission: CreateRolePermission!
}

input CreateOneUserInput {
  """The record to create"""
  user: CreateUser!
}

input CreateQuote {
  category: String

  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  id: ID
  itinerary: [JSONObject!]
  providerType: String
  representative: String
  requestedBy: String
  status: Boolean = true

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

input CreateRole {
  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  description: String
  id: ID
  name: String
  roleType: RoleType
  status: Boolean = true

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

input CreateRolePermission {
  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  id: ID
  permissions: [JSONObject!]
  role: String
  status: Boolean = true

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

input CreateUser {
  addresses: [JSONObject!]

  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  email: String
  id: ID
  name: String
  password: String
  phone: String
  role: String
  roleType: RoleType
  status: Boolean = true

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DeleteManyAircraftCategoriesInput {
  """Filter to find records to delete"""
  filter: AircraftCategoryDeleteFilter!
}

input DeleteManyAircraftInput {
  """Filter to find records to delete"""
  filter: AircraftDeleteFilter!
}

input DeleteManyAirportsInput {
  """Filter to find records to delete"""
  filter: AirportDeleteFilter!
}

input DeleteManyClientsInput {
  """Filter to find records to delete"""
  filter: clientDeleteFilter!
}

input DeleteManyQuotesInput {
  """Filter to find records to delete"""
  filter: QuoteDeleteFilter!
}

type DeleteManyResponse {
  """The number of records deleted."""
  deletedCount: Int!
}

input DeleteManyRolePermissionsInput {
  """Filter to find records to delete"""
  filter: RolePermissionDeleteFilter!
}

input DeleteManyRolesInput {
  """Filter to find records to delete"""
  filter: roleDeleteFilter!
}

input DeleteManyUsersInput {
  """Filter to find records to delete"""
  filter: UserDeleteFilter!
}

input DeleteOneAircraftCategoryInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneAircraftInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneAirportInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneClientInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneQuoteInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneRoleInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneRolePermissionInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneUserInput {
  """The id of the record to delete."""
  id: ID!
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

input LoginInputs {
  password: String!

  """userName will be email or phone"""
  username: String!
}

type Mutation {
  addRolePermissionsToRole(input: AddRolePermissionsToRoleInput!): role!
  createManyAircraft(input: CreateManyAircraftInput!): [Aircraft!]!
  createManyAircraftCategories(input: CreateManyAircraftCategoriesInput!): [AircraftCategory!]!
  createManyAirports(input: CreateManyAirportsInput!): [Airport!]!
  createManyClients(input: CreateManyClientsInput!): [client!]!
  createManyQuotes(input: CreateManyQuotesInput!): [Quote!]!
  createManyRolePermissions(input: CreateManyRolePermissionsInput!): [RolePermission!]!
  createManyRoles(input: CreateManyRolesInput!): [role!]!
  createManyUsers(input: CreateManyUsersInput!): [User!]!
  createOneAircraft(input: CreateOneAircraftInput!): Aircraft!
  createOneAircraftCategory(input: CreateOneAircraftCategoryInput!): AircraftCategory!
  createOneAirport(input: CreateOneAirportInput!): Airport!
  createOneClient(input: CreateOneClientInput!): client!
  createOneQuote(input: CreateOneQuoteInput!): Quote!
  createOneRole(input: CreateOneRoleInput!): role!
  createOneRolePermission(input: CreateOneRolePermissionInput!): RolePermission!
  createOneUser(input: CreateOneUserInput!): User!
  deleteManyAircraft(input: DeleteManyAircraftInput!): DeleteManyResponse!
  deleteManyAircraftCategories(input: DeleteManyAircraftCategoriesInput!): DeleteManyResponse!
  deleteManyAirports(input: DeleteManyAirportsInput!): DeleteManyResponse!
  deleteManyClients(input: DeleteManyClientsInput!): DeleteManyResponse!
  deleteManyQuotes(input: DeleteManyQuotesInput!): DeleteManyResponse!
  deleteManyRolePermissions(input: DeleteManyRolePermissionsInput!): DeleteManyResponse!
  deleteManyRoles(input: DeleteManyRolesInput!): DeleteManyResponse!
  deleteManyUsers(input: DeleteManyUsersInput!): DeleteManyResponse!
  deleteOneAircraft(input: DeleteOneAircraftInput!): AircraftDeleteResponse!
  deleteOneAircraftCategory(input: DeleteOneAircraftCategoryInput!): AircraftCategoryDeleteResponse!
  deleteOneAirport(input: DeleteOneAirportInput!): AirportDeleteResponse!
  deleteOneClient(input: DeleteOneClientInput!): ClientDeleteResponse!
  deleteOneQuote(input: DeleteOneQuoteInput!): QuoteDeleteResponse!
  deleteOneRole(input: DeleteOneRoleInput!): RoleDeleteResponse!
  deleteOneRolePermission(input: DeleteOneRolePermissionInput!): RolePermissionDeleteResponse!
  deleteOneUser(input: DeleteOneUserInput!): UserDeleteResponse!
  setCategoryOnAircraft(input: SetCategoryOnAircraftInput!): Aircraft!
  setCategoryOnQuote(input: SetCategoryOnQuoteInput!): Quote!
  setRequestedByOnQuote(input: SetRequestedByOnQuoteInput!): Quote!
  setRoleOnRolePermission(input: SetRoleOnRolePermissionInput!): RolePermission!
  setRoleOnUser(input: SetRoleOnUserInput!): User!
  setRolePermissionsOnRole(input: SetRolePermissionsOnRoleInput!): role!
  updateManyAircraft(input: UpdateManyAircraftInput!): UpdateManyResponse!
  updateManyAircraftCategories(input: UpdateManyAircraftCategoriesInput!): UpdateManyResponse!
  updateManyAirports(input: UpdateManyAirportsInput!): UpdateManyResponse!
  updateManyClients(input: UpdateManyClientsInput!): UpdateManyResponse!
  updateManyQuotes(input: UpdateManyQuotesInput!): UpdateManyResponse!
  updateManyRolePermissions(input: UpdateManyRolePermissionsInput!): UpdateManyResponse!
  updateManyRoles(input: UpdateManyRolesInput!): UpdateManyResponse!
  updateManyUsers(input: UpdateManyUsersInput!): UpdateManyResponse!
  updateOneAircraft(input: UpdateOneAircraftInput!): Aircraft!
  updateOneAircraftCategory(input: UpdateOneAircraftCategoryInput!): AircraftCategory!
  updateOneAirport(input: UpdateOneAirportInput!): Airport!
  updateOneClient(input: UpdateOneClientInput!): client!
  updateOneQuote(input: UpdateOneQuoteInput!): Quote!
  updateOneRole(input: UpdateOneRoleInput!): role!
  updateOneRolePermission(input: UpdateOneRolePermissionInput!): RolePermission!
  updateOneUser(input: UpdateOneUserInput!): User!
}

type OffsetPageInfo {
  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean
}

input OffsetPaging {
  """Limit the number of records returned"""
  limit: Int

  """Offset to start returning records from"""
  offset: Int
}

type Query {
  aircraft(
    """Specify to filter the records returned."""
    filter: AircraftFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [AircraftSort!]! = []
  ): AircraftConnection!
  aircraftCategories(
    """Specify to filter the records returned."""
    filter: AircraftCategoryFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [AircraftCategorySort!]! = []
  ): AircraftCategoryConnection!
  aircraftCategory(
    """The id of the record to find."""
    id: ID!
  ): AircraftCategory
  airport(
    """The id of the record to find."""
    id: ID!
  ): Airport
  airports(
    """Specify to filter the records returned."""
    filter: AirportFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [AirportSort!]! = []
  ): AirportConnection!
  client(
    """The id of the record to find."""
    id: ID!
  ): client
  clients(
    """Specify to filter the records returned."""
    filter: clientFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [clientSort!]! = []
  ): ClientConnection!
  getUser(id: String!): String!
  login(input: LoginInputs!): loginResponseDTO!
  quote(
    """The id of the record to find."""
    id: ID!
  ): Quote
  quotes(
    """Specify to filter the records returned."""
    filter: QuoteFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [QuoteSort!]! = []
  ): QuoteConnection!
  role(
    """The id of the record to find."""
    id: ID!
  ): role
  rolePermission(
    """The id of the record to find."""
    id: ID!
  ): RolePermission
  rolePermissions(
    """Specify to filter the records returned."""
    filter: RolePermissionFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [RolePermissionSort!]! = []
  ): RolePermissionConnection!
  roles(
    """Specify to filter the records returned."""
    filter: roleFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [roleSort!]! = []
  ): RoleConnection!
  user(
    """The id of the record to find."""
    id: ID!
  ): User
  users(
    """Specify to filter the records returned."""
    filter: UserFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [UserSort!]! = []
  ): UserConnection!
}

"""Quotes"""
type Quote {
  category: AircraftCategory!

  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  id: ID!
  itinerary: [JSONObject!]!
  providerType: String!
  representative: String!
  requestedBy: client!
  status: Boolean!

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

type QuoteAggregateGroupBy {
  category: String
  providerType: String
  representative: String
  requestedBy: String
  status: Boolean
}

type QuoteConnection {
  """Array of nodes."""
  nodes: [Quote!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type QuoteCountAggregate {
  category: Int
  providerType: Int
  representative: Int
  requestedBy: Int
  status: Int
}

input QuoteDeleteFilter {
  and: [QuoteDeleteFilter!]
  category: StringFieldComparison
  or: [QuoteDeleteFilter!]
  providerType: StringFieldComparison
  representative: StringFieldComparison
  requestedBy: StringFieldComparison
  status: BooleanFieldComparison
}

type QuoteDeleteResponse {
  category: String

  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  id: ID
  itinerary: [JSONObject!]
  providerType: String
  representative: String
  requestedBy: String
  status: Boolean

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

input QuoteFilter {
  and: [QuoteFilter!]
  category: StringFieldComparison
  or: [QuoteFilter!]
  providerType: StringFieldComparison
  representative: StringFieldComparison
  requestedBy: StringFieldComparison
  status: BooleanFieldComparison
}

type QuoteMaxAggregate {
  category: String
  providerType: String
  representative: String
  requestedBy: String
}

type QuoteMinAggregate {
  category: String
  providerType: String
  representative: String
  requestedBy: String
}

input QuoteSort {
  direction: SortDirection!
  field: QuoteSortFields!
  nulls: SortNulls
}

enum QuoteSortFields {
  category
  providerType
  representative
  requestedBy
  status
}

input QuoteUpdateFilter {
  and: [QuoteUpdateFilter!]
  category: StringFieldComparison
  or: [QuoteUpdateFilter!]
  providerType: StringFieldComparison
  representative: StringFieldComparison
  requestedBy: StringFieldComparison
  status: BooleanFieldComparison
}

type RoleConnection {
  """Array of nodes."""
  nodes: [role!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type RoleDeleteResponse {
  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  description: String
  id: ID
  name: String
  roleType: RoleType
  status: Boolean

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

"""Role Permission"""
type RolePermission {
  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  id: ID!
  permissions: [JSONObject!]!
  role: role!
  status: Boolean!

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

type RolePermissionAggregateGroupBy {
  role: String
  status: Boolean
}

type RolePermissionConnection {
  """Array of nodes."""
  nodes: [RolePermission!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type RolePermissionCountAggregate {
  role: Int
  status: Int
}

input RolePermissionDeleteFilter {
  and: [RolePermissionDeleteFilter!]
  or: [RolePermissionDeleteFilter!]
  role: StringFieldComparison
  status: BooleanFieldComparison
}

type RolePermissionDeleteResponse {
  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  id: ID
  permissions: [JSONObject!]
  role: String
  status: Boolean

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

input RolePermissionFilter {
  and: [RolePermissionFilter!]
  or: [RolePermissionFilter!]
  role: StringFieldComparison
  status: BooleanFieldComparison
}

type RolePermissionMaxAggregate {
  role: String
}

type RolePermissionMinAggregate {
  role: String
}

input RolePermissionSort {
  direction: SortDirection!
  field: RolePermissionSortFields!
  nulls: SortNulls
}

enum RolePermissionSortFields {
  role
  status
}

input RolePermissionUpdateFilter {
  and: [RolePermissionUpdateFilter!]
  or: [RolePermissionUpdateFilter!]
  role: StringFieldComparison
  status: BooleanFieldComparison
}

enum RoleType {
  ADMIN
  CUSTOMER
  PARTNER
}

input RoleTypeFilterComparison {
  eq: RoleType
  gt: RoleType
  gte: RoleType
  iLike: RoleType
  in: [RoleType!]
  is: Boolean
  isNot: Boolean
  like: RoleType
  lt: RoleType
  lte: RoleType
  neq: RoleType
  notILike: RoleType
  notIn: [RoleType!]
  notLike: RoleType
}

input SetCategoryOnAircraftInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetCategoryOnQuoteInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetRequestedByOnQuoteInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetRoleOnRolePermissionInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetRoleOnUserInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetRolePermissionsOnRoleInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

input StringFieldComparison {
  eq: String
  gt: String
  gte: String
  iLike: String
  in: [String!]
  is: Boolean
  isNot: Boolean
  like: String
  lt: String
  lte: String
  neq: String
  notILike: String
  notIn: [String!]
  notLike: String
}

input UpdateAircraft {
  category: String

  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  id: ID
  name: String
  status: Boolean = true

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

input UpdateAircraftCategory {
  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  description: String
  id: ID
  name: String
  status: Boolean = true

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

input UpdateAirport {
  city: String

  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  iata_code: String
  icao_code: String
  id: ID
  latitude: Int
  longitude: Int
  name: String
  status: Boolean = true

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

input UpdateClient {
  address: String

  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  email: String
  id: ID
  isCompany: Boolean
  isPerson: Boolean
  name: String
  phone: String
  status: Boolean = true

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

input UpdateManyAircraftCategoriesInput {
  """Filter used to find fields to update"""
  filter: AircraftCategoryUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateAircraftCategory!
}

input UpdateManyAircraftInput {
  """Filter used to find fields to update"""
  filter: AircraftUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateAircraft!
}

input UpdateManyAirportsInput {
  """Filter used to find fields to update"""
  filter: AirportUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateAirport!
}

input UpdateManyClientsInput {
  """Filter used to find fields to update"""
  filter: clientUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateClient!
}

input UpdateManyQuotesInput {
  """Filter used to find fields to update"""
  filter: QuoteUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateQuote!
}

type UpdateManyResponse {
  """The number of records updated."""
  updatedCount: Int!
}

input UpdateManyRolePermissionsInput {
  """Filter used to find fields to update"""
  filter: RolePermissionUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateRolePermission!
}

input UpdateManyRolesInput {
  """Filter used to find fields to update"""
  filter: roleUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateRole!
}

input UpdateManyUsersInput {
  """Filter used to find fields to update"""
  filter: UserUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateUser!
}

input UpdateOneAircraftCategoryInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateAircraftCategory!
}

input UpdateOneAircraftInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateAircraft!
}

input UpdateOneAirportInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateAirport!
}

input UpdateOneClientInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateClient!
}

input UpdateOneQuoteInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateQuote!
}

input UpdateOneRoleInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateRole!
}

input UpdateOneRolePermissionInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateRolePermission!
}

input UpdateOneUserInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateUser!
}

input UpdateQuote {
  category: String

  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  id: ID
  itinerary: [JSONObject!]
  providerType: String
  representative: String
  requestedBy: String
  status: Boolean = true

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

input UpdateRole {
  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  description: String
  id: ID
  name: String
  roleType: RoleType
  status: Boolean = true

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

input UpdateRolePermission {
  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  id: ID
  permissions: [JSONObject!]
  role: String
  status: Boolean = true

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

input UpdateUser {
  addresses: [JSONObject!]

  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  email: String
  id: ID
  name: String
  password: String
  phone: String
  role: String
  roleType: RoleType
  status: Boolean = true

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

"""user dto"""
type User {
  addresses: [JSONObject!]!

  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  email: String!
  id: ID!
  name: String!
  password: String!
  phone: String!
  role: role!
  roleType: RoleType!
  status: Boolean!

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

type UserAggregateGroupBy {
  email: String
  name: String
  phone: String
  role: String
  roleType: RoleType
  status: Boolean
}

type UserConnection {
  """Array of nodes."""
  nodes: [User!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type UserCountAggregate {
  email: Int
  name: Int
  phone: Int
  role: Int
  roleType: Int
  status: Int
}

input UserDeleteFilter {
  and: [UserDeleteFilter!]
  email: StringFieldComparison
  name: StringFieldComparison
  or: [UserDeleteFilter!]
  phone: StringFieldComparison
  role: StringFieldComparison
  roleType: RoleTypeFilterComparison
  status: BooleanFieldComparison
}

type UserDeleteResponse {
  addresses: [JSONObject!]

  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  email: String
  id: ID
  name: String
  password: String
  phone: String
  role: String
  roleType: RoleType
  status: Boolean

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

input UserFilter {
  and: [UserFilter!]
  email: StringFieldComparison
  name: StringFieldComparison
  or: [UserFilter!]
  phone: StringFieldComparison
  role: StringFieldComparison
  roleType: RoleTypeFilterComparison
  status: BooleanFieldComparison
}

type UserMaxAggregate {
  email: String
  name: String
  phone: String
  role: String
  roleType: RoleType
}

type UserMinAggregate {
  email: String
  name: String
  phone: String
  role: String
  roleType: RoleType
}

input UserSort {
  direction: SortDirection!
  field: UserSortFields!
  nulls: SortNulls
}

enum UserSortFields {
  email
  name
  phone
  role
  roleType
  status
}

input UserUpdateFilter {
  and: [UserUpdateFilter!]
  email: StringFieldComparison
  name: StringFieldComparison
  or: [UserUpdateFilter!]
  phone: StringFieldComparison
  role: StringFieldComparison
  roleType: RoleTypeFilterComparison
  status: BooleanFieldComparison
}

"""Client"""
type client {
  address: String!

  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  email: String!
  id: ID!
  isCompany: Boolean!
  isPerson: Boolean!
  name: String!
  phone: String!
  status: Boolean!

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

type clientAggregateGroupBy {
  address: String
  email: String
  isCompany: Boolean
  isPerson: Boolean
  name: String
  phone: String
  status: Boolean
}

type clientCountAggregate {
  address: Int
  email: Int
  isCompany: Int
  isPerson: Int
  name: Int
  phone: Int
  status: Int
}

input clientDeleteFilter {
  address: StringFieldComparison
  and: [clientDeleteFilter!]
  email: StringFieldComparison
  isCompany: BooleanFieldComparison
  isPerson: BooleanFieldComparison
  name: StringFieldComparison
  or: [clientDeleteFilter!]
  phone: StringFieldComparison
  status: BooleanFieldComparison
}

input clientFilter {
  address: StringFieldComparison
  and: [clientFilter!]
  email: StringFieldComparison
  isCompany: BooleanFieldComparison
  isPerson: BooleanFieldComparison
  name: StringFieldComparison
  or: [clientFilter!]
  phone: StringFieldComparison
  status: BooleanFieldComparison
}

type clientMaxAggregate {
  address: String
  email: String
  name: String
  phone: String
}

type clientMinAggregate {
  address: String
  email: String
  name: String
  phone: String
}

input clientSort {
  direction: SortDirection!
  field: clientSortFields!
  nulls: SortNulls
}

enum clientSortFields {
  address
  email
  isCompany
  isPerson
  name
  phone
  status
}

input clientUpdateFilter {
  address: StringFieldComparison
  and: [clientUpdateFilter!]
  email: StringFieldComparison
  isCompany: BooleanFieldComparison
  isPerson: BooleanFieldComparison
  name: StringFieldComparison
  or: [clientUpdateFilter!]
  phone: StringFieldComparison
  status: BooleanFieldComparison
}

type loginResponseDTO {
  access_token: String!
}

"""User Roles"""
type role {
  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  description: String!
  id: ID!
  name: String!
  rolePermissions(
    """Specify to filter the records returned."""
    filter: RolePermissionFilter! = {}

    """Specify to sort results."""
    sorting: [RolePermissionSort!]! = []
  ): [RolePermission!]
  roleType: RoleType!
  status: Boolean!

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

type roleAggregateGroupBy {
  name: String
  roleType: RoleType
  status: Boolean
}

type roleCountAggregate {
  name: Int
  roleType: Int
  status: Int
}

input roleDeleteFilter {
  and: [roleDeleteFilter!]
  name: StringFieldComparison
  or: [roleDeleteFilter!]
  roleType: RoleTypeFilterComparison
  status: BooleanFieldComparison
}

input roleFilter {
  and: [roleFilter!]
  name: StringFieldComparison
  or: [roleFilter!]
  roleType: RoleTypeFilterComparison
  status: BooleanFieldComparison
}

type roleMaxAggregate {
  name: String
  roleType: RoleType
}

type roleMinAggregate {
  name: String
  roleType: RoleType
}

input roleSort {
  direction: SortDirection!
  field: roleSortFields!
  nulls: SortNulls
}

enum roleSortFields {
  name
  roleType
  status
}

input roleUpdateFilter {
  and: [roleUpdateFilter!]
  name: StringFieldComparison
  or: [roleUpdateFilter!]
  roleType: RoleTypeFilterComparison
  status: BooleanFieldComparison
}