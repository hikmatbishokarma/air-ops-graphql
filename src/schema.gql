# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AddRolePermissionsToRoleInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input BooleanFieldComparison {
  is: Boolean
  isNot: Boolean
}

"""Cursor for paging through collections"""
scalar ConnectionCursor

input CreateManyMenuItemsInput {
  """Array of records to create"""
  menuItems: [CreateMenuItem!]!
}

input CreateManyOrdersInput {
  """Array of records to create"""
  orders: [CreateOrder!]!
}

input CreateManyRolePermissionsInput {
  """Array of records to create"""
  rolePermissions: [CreateRolePermission!]!
}

input CreateManyRolesInput {
  """Array of records to create"""
  roles: [CreateRole!]!
}

input CreateManyUsersInput {
  """Array of records to create"""
  users: [CreateUser!]!
}

input CreateMenuItem {
  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String
  cuisineType: CuisineType

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  description: String
  dietaryPreference: DietaryPreference
  id: ID
  isVeg: Boolean
  mealType: MealType
  name: String
  partnerId: String
  price: Int
  rating: Int
  ratingCount: Int = 0
  specialty: Specialty
  status: Boolean = true
  tag: String

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

input CreateOneMenuItemInput {
  """The record to create"""
  menuItem: CreateMenuItem!
}

input CreateOneOrderInput {
  """The record to create"""
  order: CreateOrder!
}

input CreateOneRoleInput {
  """The record to create"""
  role: CreateRole!
}

input CreateOneRolePermissionInput {
  """The record to create"""
  rolePermission: CreateRolePermission!
}

input CreateOneUserInput {
  """The record to create"""
  user: CreateUser!
}

input CreateOrder {
  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  deliveryAddress: String
  id: ID
  instructions: String
  menuItems: [JSONObject!]
  orderDate: DateTime
  orderId: String
  orderStatus: String
  partnerId: String
  status: Boolean = true
  totalAmount: Float

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
  userId: String
}

input CreateRole {
  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  description: String
  id: ID
  name: String
  roleType: RoleType
  status: Boolean = true

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

input CreateRolePermission {
  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  id: ID
  permissions: [JSONObject!]
  role: String
  status: Boolean = true

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

input CreateUser {
  addresses: [JSONObject!]

  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  email: String
  id: ID
  name: String
  password: String
  phone: String
  role: String
  roleType: RoleType
  status: Boolean = true

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

enum CuisineType {
  CHINESE
  INDIAN
  ITALIAN
  MEXICAN
}

input CuisineTypeFilterComparison {
  eq: CuisineType
  gt: CuisineType
  gte: CuisineType
  iLike: CuisineType
  in: [CuisineType!]
  is: Boolean
  isNot: Boolean
  like: CuisineType
  lt: CuisineType
  lte: CuisineType
  neq: CuisineType
  notILike: CuisineType
  notIn: [CuisineType!]
  notLike: CuisineType
}

input CursorPaging {
  """Paginate after opaque cursor"""
  after: ConnectionCursor

  """Paginate before opaque cursor"""
  before: ConnectionCursor

  """Paginate first"""
  first: Int

  """Paginate last"""
  last: Int
}

input DateFieldComparison {
  between: DateFieldComparisonBetween
  eq: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  is: Boolean
  isNot: Boolean
  lt: DateTime
  lte: DateTime
  neq: DateTime
  notBetween: DateFieldComparisonBetween
  notIn: [DateTime!]
}

input DateFieldComparisonBetween {
  lower: DateTime!
  upper: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DeleteManyMenuItemsInput {
  """Filter to find records to delete"""
  filter: MenuItemDeleteFilter!
}

input DeleteManyOrdersInput {
  """Filter to find records to delete"""
  filter: orderDeleteFilter!
}

type DeleteManyResponse {
  """The number of records deleted."""
  deletedCount: Int!
}

input DeleteManyRolePermissionsInput {
  """Filter to find records to delete"""
  filter: RolePermissionDeleteFilter!
}

input DeleteManyRolesInput {
  """Filter to find records to delete"""
  filter: roleDeleteFilter!
}

input DeleteManyUsersInput {
  """Filter to find records to delete"""
  filter: UserDeleteFilter!
}

input DeleteOneMenuItemInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneOrderInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneRoleInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneRolePermissionInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneUserInput {
  """The id of the record to delete."""
  id: ID!
}

enum DietaryPreference {
  GLUTEN_FREE
  KETO
  LOW_CARB
  VEGAN
  VEGETARIAN
}

input DietaryPreferenceFilterComparison {
  eq: DietaryPreference
  gt: DietaryPreference
  gte: DietaryPreference
  iLike: DietaryPreference
  in: [DietaryPreference!]
  is: Boolean
  isNot: Boolean
  like: DietaryPreference
  lt: DietaryPreference
  lte: DietaryPreference
  neq: DietaryPreference
  notILike: DietaryPreference
  notIn: [DietaryPreference!]
  notLike: DietaryPreference
}

input FloatFieldComparison {
  between: FloatFieldComparisonBetween
  eq: Float
  gt: Float
  gte: Float
  in: [Float!]
  is: Boolean
  isNot: Boolean
  lt: Float
  lte: Float
  neq: Float
  notBetween: FloatFieldComparisonBetween
  notIn: [Float!]
}

input FloatFieldComparisonBetween {
  lower: Float!
  upper: Float!
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

input LoginInputs {
  password: String!

  """userName will be email or phone"""
  username: String!
}

enum MealType {
  BREAKFAST
  DESSERTS
  DINNER
  LUNCH
  SNACKS
}

input MealTypeFilterComparison {
  eq: MealType
  gt: MealType
  gte: MealType
  iLike: MealType
  in: [MealType!]
  is: Boolean
  isNot: Boolean
  like: MealType
  lt: MealType
  lte: MealType
  neq: MealType
  notILike: MealType
  notIn: [MealType!]
  notLike: MealType
}

"""Menu Items"""
type MenuItem {
  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String
  cuisineType: CuisineType!

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  description: String!
  dietaryPreference: DietaryPreference
  id: ID!
  isVeg: Boolean!
  mealType: MealType!
  name: String!
  partnerId: String!
  price: Int!
  rating: Int!
  ratingCount: Int
  specialty: Specialty
  status: Boolean!
  tag: String!

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

type MenuItemAggregateGroupBy {
  cuisineType: CuisineType
  dietaryPreference: DietaryPreference
  isVeg: Boolean
  mealType: MealType
  name: String
  partnerId: String
  price: Int
  rating: Int
  ratingCount: Int
  specialty: Specialty
  status: Boolean
  tag: String
}

type MenuItemAvgAggregate {
  price: Float
  rating: Float
  ratingCount: Float
}

type MenuItemConnection {
  """Array of nodes."""
  nodes: [MenuItem!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type MenuItemCountAggregate {
  cuisineType: Int
  dietaryPreference: Int
  isVeg: Int
  mealType: Int
  name: Int
  partnerId: Int
  price: Int
  rating: Int
  ratingCount: Int
  specialty: Int
  status: Int
  tag: Int
}

input MenuItemDeleteFilter {
  and: [MenuItemDeleteFilter!]
  cuisineType: CuisineTypeFilterComparison
  dietaryPreference: DietaryPreferenceFilterComparison
  isVeg: BooleanFieldComparison
  mealType: MealTypeFilterComparison
  name: StringFieldComparison
  or: [MenuItemDeleteFilter!]
  partnerId: StringFieldComparison
  price: NumberFieldComparison
  rating: NumberFieldComparison
  ratingCount: NumberFieldComparison
  specialty: SpecialtyFilterComparison
  status: BooleanFieldComparison
  tag: StringFieldComparison
}

type MenuItemDeleteResponse {
  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String
  cuisineType: CuisineType

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  description: String
  dietaryPreference: DietaryPreference
  id: ID
  isVeg: Boolean
  mealType: MealType
  name: String
  partnerId: String
  price: Int
  rating: Int
  ratingCount: Int
  specialty: Specialty
  status: Boolean
  tag: String

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

input MenuItemFilter {
  and: [MenuItemFilter!]
  cuisineType: CuisineTypeFilterComparison
  dietaryPreference: DietaryPreferenceFilterComparison
  isVeg: BooleanFieldComparison
  mealType: MealTypeFilterComparison
  name: StringFieldComparison
  or: [MenuItemFilter!]
  partnerId: StringFieldComparison
  price: NumberFieldComparison
  rating: NumberFieldComparison
  ratingCount: NumberFieldComparison
  specialty: SpecialtyFilterComparison
  status: BooleanFieldComparison
  tag: StringFieldComparison
}

type MenuItemMaxAggregate {
  cuisineType: CuisineType
  dietaryPreference: DietaryPreference
  mealType: MealType
  name: String
  partnerId: String
  price: Int
  rating: Int
  ratingCount: Int
  specialty: Specialty
  tag: String
}

type MenuItemMinAggregate {
  cuisineType: CuisineType
  dietaryPreference: DietaryPreference
  mealType: MealType
  name: String
  partnerId: String
  price: Int
  rating: Int
  ratingCount: Int
  specialty: Specialty
  tag: String
}

input MenuItemSort {
  direction: SortDirection!
  field: MenuItemSortFields!
  nulls: SortNulls
}

enum MenuItemSortFields {
  cuisineType
  dietaryPreference
  isVeg
  mealType
  name
  partnerId
  price
  rating
  ratingCount
  specialty
  status
  tag
}

type MenuItemSumAggregate {
  price: Float
  rating: Float
  ratingCount: Float
}

input MenuItemUpdateFilter {
  and: [MenuItemUpdateFilter!]
  cuisineType: CuisineTypeFilterComparison
  dietaryPreference: DietaryPreferenceFilterComparison
  isVeg: BooleanFieldComparison
  mealType: MealTypeFilterComparison
  name: StringFieldComparison
  or: [MenuItemUpdateFilter!]
  partnerId: StringFieldComparison
  price: NumberFieldComparison
  rating: NumberFieldComparison
  ratingCount: NumberFieldComparison
  specialty: SpecialtyFilterComparison
  status: BooleanFieldComparison
  tag: StringFieldComparison
}

type Mutation {
  addRolePermissionsToRole(input: AddRolePermissionsToRoleInput!): role!
  createManyMenuItems(input: CreateManyMenuItemsInput!): [MenuItem!]!
  createManyOrders(input: CreateManyOrdersInput!): [order!]!
  createManyRolePermissions(input: CreateManyRolePermissionsInput!): [RolePermission!]!
  createManyRoles(input: CreateManyRolesInput!): [role!]!
  createManyUsers(input: CreateManyUsersInput!): [User!]!
  createOneMenuItem(input: CreateOneMenuItemInput!): MenuItem!
  createOneOrder(input: CreateOneOrderInput!): order!
  createOneRole(input: CreateOneRoleInput!): role!
  createOneRolePermission(input: CreateOneRolePermissionInput!): RolePermission!
  createOneUser(input: CreateOneUserInput!): User!
  deleteManyMenuItems(input: DeleteManyMenuItemsInput!): DeleteManyResponse!
  deleteManyOrders(input: DeleteManyOrdersInput!): DeleteManyResponse!
  deleteManyRolePermissions(input: DeleteManyRolePermissionsInput!): DeleteManyResponse!
  deleteManyRoles(input: DeleteManyRolesInput!): DeleteManyResponse!
  deleteManyUsers(input: DeleteManyUsersInput!): DeleteManyResponse!
  deleteOneMenuItem(input: DeleteOneMenuItemInput!): MenuItemDeleteResponse!
  deleteOneOrder(input: DeleteOneOrderInput!): OrderDeleteResponse!
  deleteOneRole(input: DeleteOneRoleInput!): RoleDeleteResponse!
  deleteOneRolePermission(input: DeleteOneRolePermissionInput!): RolePermissionDeleteResponse!
  deleteOneUser(input: DeleteOneUserInput!): UserDeleteResponse!
  setRoleOnRolePermission(input: SetRoleOnRolePermissionInput!): RolePermission!
  setRoleOnUser(input: SetRoleOnUserInput!): User!
  setRolePermissionsOnRole(input: SetRolePermissionsOnRoleInput!): role!
  updateManyMenuItems(input: UpdateManyMenuItemsInput!): UpdateManyResponse!
  updateManyOrders(input: UpdateManyOrdersInput!): UpdateManyResponse!
  updateManyRolePermissions(input: UpdateManyRolePermissionsInput!): UpdateManyResponse!
  updateManyRoles(input: UpdateManyRolesInput!): UpdateManyResponse!
  updateManyUsers(input: UpdateManyUsersInput!): UpdateManyResponse!
  updateOneMenuItem(input: UpdateOneMenuItemInput!): MenuItem!
  updateOneOrder(input: UpdateOneOrderInput!): order!
  updateOneRole(input: UpdateOneRoleInput!): role!
  updateOneRolePermission(input: UpdateOneRolePermissionInput!): RolePermission!
  updateOneUser(input: UpdateOneUserInput!): User!
}

input NumberFieldComparison {
  between: NumberFieldComparisonBetween
  eq: Int
  gt: Int
  gte: Int
  in: [Int!]
  is: Boolean
  isNot: Boolean
  lt: Int
  lte: Int
  neq: Int
  notBetween: NumberFieldComparisonBetween
  notIn: [Int!]
}

input NumberFieldComparisonBetween {
  lower: Int!
  upper: Int!
}

type OffsetPageInfo {
  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean
}

input OffsetPaging {
  """Limit the number of records returned"""
  limit: Int

  """Offset to start returning records from"""
  offset: Int
}

type OrderConnection {
  """Array of edges."""
  edges: [orderEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

type OrderDeleteResponse {
  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  deliveryAddress: String
  id: ID
  instructions: String
  menuItems: [JSONObject!]
  orderDate: DateTime
  orderId: String
  orderStatus: String
  partnerId: String
  status: Boolean
  totalAmount: Float

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
  userId: String
}

type PageInfo {
  """The cursor of the last returned record."""
  endCursor: ConnectionCursor

  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean

  """The cursor of the first returned record."""
  startCursor: ConnectionCursor
}

type Query {
  getUser(id: String!): String!
  login(input: LoginInputs!): loginResponseDTO!
  menuItem(
    """The id of the record to find."""
    id: ID!
  ): MenuItem
  menuItems(
    """Specify to filter the records returned."""
    filter: MenuItemFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [MenuItemSort!]! = []
  ): MenuItemConnection!
  order(
    """The id of the record to find."""
    id: ID!
  ): order
  orders(
    """Specify to filter the records returned."""
    filter: orderFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [orderSort!]! = []
  ): OrderConnection!
  role(
    """The id of the record to find."""
    id: ID!
  ): role
  rolePermission(
    """The id of the record to find."""
    id: ID!
  ): RolePermission
  rolePermissions(
    """Specify to filter the records returned."""
    filter: RolePermissionFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [RolePermissionSort!]! = []
  ): RolePermissionConnection!
  roles(
    """Specify to filter the records returned."""
    filter: roleFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [roleSort!]! = []
  ): RoleConnection!
  user(
    """The id of the record to find."""
    id: ID!
  ): User
  users(
    """Specify to filter the records returned."""
    filter: UserFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [UserSort!]! = []
  ): UserConnection!
}

type RoleConnection {
  """Array of nodes."""
  nodes: [role!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type RoleDeleteResponse {
  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  description: String
  id: ID
  name: String
  roleType: RoleType
  status: Boolean

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

"""Role Permission"""
type RolePermission {
  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  id: ID!
  permissions: [JSONObject!]!
  role: role!
  status: Boolean!

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

type RolePermissionAggregateGroupBy {
  role: String
  status: Boolean
}

type RolePermissionConnection {
  """Array of nodes."""
  nodes: [RolePermission!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type RolePermissionCountAggregate {
  role: Int
  status: Int
}

input RolePermissionDeleteFilter {
  and: [RolePermissionDeleteFilter!]
  or: [RolePermissionDeleteFilter!]
  role: StringFieldComparison
  status: BooleanFieldComparison
}

type RolePermissionDeleteResponse {
  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  id: ID
  permissions: [JSONObject!]
  role: String
  status: Boolean

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

input RolePermissionFilter {
  and: [RolePermissionFilter!]
  or: [RolePermissionFilter!]
  role: StringFieldComparison
  status: BooleanFieldComparison
}

type RolePermissionMaxAggregate {
  role: String
}

type RolePermissionMinAggregate {
  role: String
}

input RolePermissionSort {
  direction: SortDirection!
  field: RolePermissionSortFields!
  nulls: SortNulls
}

enum RolePermissionSortFields {
  role
  status
}

input RolePermissionUpdateFilter {
  and: [RolePermissionUpdateFilter!]
  or: [RolePermissionUpdateFilter!]
  role: StringFieldComparison
  status: BooleanFieldComparison
}

enum RoleType {
  ADMIN
  CUSTOMER
  PARTNER
}

input RoleTypeFilterComparison {
  eq: RoleType
  gt: RoleType
  gte: RoleType
  iLike: RoleType
  in: [RoleType!]
  is: Boolean
  isNot: Boolean
  like: RoleType
  lt: RoleType
  lte: RoleType
  neq: RoleType
  notILike: RoleType
  notIn: [RoleType!]
  notLike: RoleType
}

input SetRoleOnRolePermissionInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetRoleOnUserInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetRolePermissionsOnRoleInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

enum Specialty {
  CHEFS_SPECIALS
  COMBO_DEALS
  FAMILY_MEALS
  SEASONAL_DISHES
}

input SpecialtyFilterComparison {
  eq: Specialty
  gt: Specialty
  gte: Specialty
  iLike: Specialty
  in: [Specialty!]
  is: Boolean
  isNot: Boolean
  like: Specialty
  lt: Specialty
  lte: Specialty
  neq: Specialty
  notILike: Specialty
  notIn: [Specialty!]
  notLike: Specialty
}

input StringFieldComparison {
  eq: String
  gt: String
  gte: String
  iLike: String
  in: [String!]
  is: Boolean
  isNot: Boolean
  like: String
  lt: String
  lte: String
  neq: String
  notILike: String
  notIn: [String!]
  notLike: String
}

input UpdateManyMenuItemsInput {
  """Filter used to find fields to update"""
  filter: MenuItemUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateMenuItem!
}

input UpdateManyOrdersInput {
  """Filter used to find fields to update"""
  filter: orderUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateOrder!
}

type UpdateManyResponse {
  """The number of records updated."""
  updatedCount: Int!
}

input UpdateManyRolePermissionsInput {
  """Filter used to find fields to update"""
  filter: RolePermissionUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateRolePermission!
}

input UpdateManyRolesInput {
  """Filter used to find fields to update"""
  filter: roleUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateRole!
}

input UpdateManyUsersInput {
  """Filter used to find fields to update"""
  filter: UserUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateUser!
}

input UpdateMenuItem {
  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String
  cuisineType: CuisineType

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  description: String
  dietaryPreference: DietaryPreference
  id: ID
  isVeg: Boolean
  mealType: MealType
  name: String
  partnerId: String
  price: Int
  rating: Int
  ratingCount: Int = 0
  specialty: Specialty
  status: Boolean = true
  tag: String

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

input UpdateOneMenuItemInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateMenuItem!
}

input UpdateOneOrderInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateOrder!
}

input UpdateOneRoleInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateRole!
}

input UpdateOneRolePermissionInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateRolePermission!
}

input UpdateOneUserInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateUser!
}

input UpdateOrder {
  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  deliveryAddress: String
  id: ID
  instructions: String
  menuItems: [JSONObject!]
  orderDate: DateTime
  orderId: String
  orderStatus: String
  partnerId: String
  status: Boolean = true
  totalAmount: Float

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
  userId: String
}

input UpdateRole {
  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  description: String
  id: ID
  name: String
  roleType: RoleType
  status: Boolean = true

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

input UpdateRolePermission {
  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  id: ID
  permissions: [JSONObject!]
  role: String
  status: Boolean = true

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

input UpdateUser {
  addresses: [JSONObject!]

  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  email: String
  id: ID
  name: String
  password: String
  phone: String
  role: String
  roleType: RoleType
  status: Boolean = true

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

"""user dto"""
type User {
  addresses: [JSONObject!]!

  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  email: String!
  id: ID!
  name: String!
  password: String!
  phone: String!
  role: role!
  roleType: RoleType!
  status: Boolean!

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

type UserAggregateGroupBy {
  email: String
  name: String
  phone: String
  role: String
  roleType: RoleType
  status: Boolean
}

type UserConnection {
  """Array of nodes."""
  nodes: [User!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type UserCountAggregate {
  email: Int
  name: Int
  phone: Int
  role: Int
  roleType: Int
  status: Int
}

input UserDeleteFilter {
  and: [UserDeleteFilter!]
  email: StringFieldComparison
  name: StringFieldComparison
  or: [UserDeleteFilter!]
  phone: StringFieldComparison
  role: StringFieldComparison
  roleType: RoleTypeFilterComparison
  status: BooleanFieldComparison
}

type UserDeleteResponse {
  addresses: [JSONObject!]

  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  email: String
  id: ID
  name: String
  password: String
  phone: String
  role: String
  roleType: RoleType
  status: Boolean

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

input UserFilter {
  and: [UserFilter!]
  email: StringFieldComparison
  name: StringFieldComparison
  or: [UserFilter!]
  phone: StringFieldComparison
  role: StringFieldComparison
  roleType: RoleTypeFilterComparison
  status: BooleanFieldComparison
}

type UserMaxAggregate {
  email: String
  name: String
  phone: String
  role: String
  roleType: RoleType
}

type UserMinAggregate {
  email: String
  name: String
  phone: String
  role: String
  roleType: RoleType
}

input UserSort {
  direction: SortDirection!
  field: UserSortFields!
  nulls: SortNulls
}

enum UserSortFields {
  email
  name
  phone
  role
  roleType
  status
}

input UserUpdateFilter {
  and: [UserUpdateFilter!]
  email: StringFieldComparison
  name: StringFieldComparison
  or: [UserUpdateFilter!]
  phone: StringFieldComparison
  role: StringFieldComparison
  roleType: RoleTypeFilterComparison
  status: BooleanFieldComparison
}

type loginResponseDTO {
  access_token: String!
}

"""Orders"""
type order {
  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  deliveryAddress: String
  id: ID!
  instructions: String
  menuItems: [JSONObject!]!
  orderDate: DateTime!
  orderId: String!
  orderStatus: String!
  partnerId: String!
  status: Boolean!
  totalAmount: Float!

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
  userId: String!
}

type orderAggregateGroupBy {
  orderDate: DateTime
  orderId: String
  orderStatus: String
  partnerId: String
  status: Boolean
  totalAmount: Float
  userId: String
}

type orderAvgAggregate {
  totalAmount: Float
}

type orderCountAggregate {
  orderDate: Int
  orderId: Int
  orderStatus: Int
  partnerId: Int
  status: Int
  totalAmount: Int
  userId: Int
}

input orderDeleteFilter {
  and: [orderDeleteFilter!]
  or: [orderDeleteFilter!]
  orderDate: DateFieldComparison
  orderId: StringFieldComparison
  orderStatus: StringFieldComparison
  partnerId: StringFieldComparison
  status: BooleanFieldComparison
  totalAmount: FloatFieldComparison
  userId: StringFieldComparison
}

type orderEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the order"""
  node: order!
}

input orderFilter {
  and: [orderFilter!]
  or: [orderFilter!]
  orderDate: DateFieldComparison
  orderId: StringFieldComparison
  orderStatus: StringFieldComparison
  partnerId: StringFieldComparison
  status: BooleanFieldComparison
  totalAmount: FloatFieldComparison
  userId: StringFieldComparison
}

type orderMaxAggregate {
  orderDate: DateTime
  orderId: String
  orderStatus: String
  partnerId: String
  totalAmount: Float
  userId: String
}

type orderMinAggregate {
  orderDate: DateTime
  orderId: String
  orderStatus: String
  partnerId: String
  totalAmount: Float
  userId: String
}

input orderSort {
  direction: SortDirection!
  field: orderSortFields!
  nulls: SortNulls
}

enum orderSortFields {
  orderDate
  orderId
  orderStatus
  partnerId
  status
  totalAmount
  userId
}

type orderSumAggregate {
  totalAmount: Float
}

input orderUpdateFilter {
  and: [orderUpdateFilter!]
  or: [orderUpdateFilter!]
  orderDate: DateFieldComparison
  orderId: StringFieldComparison
  orderStatus: StringFieldComparison
  partnerId: StringFieldComparison
  status: BooleanFieldComparison
  totalAmount: FloatFieldComparison
  userId: StringFieldComparison
}

"""User Roles"""
type role {
  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  description: String!
  id: ID!
  name: String!
  rolePermissions(
    """Specify to filter the records returned."""
    filter: RolePermissionFilter! = {}

    """Specify to sort results."""
    sorting: [RolePermissionSort!]! = []
  ): [RolePermission!]
  roleType: RoleType!
  status: Boolean!

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

type roleAggregateGroupBy {
  name: String
  roleType: RoleType
  status: Boolean
}

type roleCountAggregate {
  name: Int
  roleType: Int
  status: Int
}

input roleDeleteFilter {
  and: [roleDeleteFilter!]
  name: StringFieldComparison
  or: [roleDeleteFilter!]
  roleType: RoleTypeFilterComparison
  status: BooleanFieldComparison
}

input roleFilter {
  and: [roleFilter!]
  name: StringFieldComparison
  or: [roleFilter!]
  roleType: RoleTypeFilterComparison
  status: BooleanFieldComparison
}

type roleMaxAggregate {
  name: String
  roleType: RoleType
}

type roleMinAggregate {
  name: String
  roleType: RoleType
}

input roleSort {
  direction: SortDirection!
  field: roleSortFields!
  nulls: SortNulls
}

enum roleSortFields {
  name
  roleType
  status
}

input roleUpdateFilter {
  and: [roleUpdateFilter!]
  name: StringFieldComparison
  or: [roleUpdateFilter!]
  roleType: RoleTypeFilterComparison
  status: BooleanFieldComparison
}