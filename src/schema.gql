# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AccessPermissionInput {
  action: [ResourceAction!]!
  resource: String!
}

input AddRolesToUserInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

type AgentConnection {
  """Array of nodes."""
  nodes: [agent!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type AgentDeleteResponse {
  address: String
  billingCycle: BillingCycle
  city: String
  companyLogo: String
  companyName: String

  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String
  createdByUser: User

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  email: String
  id: ID
  isActive: Boolean
  name: String
  phone: String
  pinCode: String
  state: String
  subscriptionPlan: SubscriptionPlan
  supportEmail: String
  themeColor: String
  ticketFooterNote: String

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
  websiteUrl: String
}

input AgentDto {
  address: String!
  billingCycle: BillingCycle
  city: String!
  companyLogo: String!
  companyName: String!
  createdByUser: UserDTO
  email: String!
  name: String!
  phone: String!
  pinCode: String
  state: String
  subscriptionPlan: SubscriptionPlan
  supportEmail: String!
  themeColor: String
  ticketFooterNote: String
  websiteUrl: String
}

"""AircraftCategory"""
type AircraftCategory {
  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  description: String!
  id: ID!
  isActive: Boolean!
  name: String!

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

type AircraftCategoryAggregateGroupBy {
  description: String
  isActive: Boolean
  name: String
}

type AircraftCategoryConnection {
  """Array of nodes."""
  nodes: [AircraftCategory!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type AircraftCategoryCountAggregate {
  description: Int
  isActive: Int
  name: Int
}

input AircraftCategoryDeleteFilter {
  and: [AircraftCategoryDeleteFilter!]
  description: StringFieldComparison
  isActive: BooleanFieldComparison
  name: StringFieldComparison
  or: [AircraftCategoryDeleteFilter!]
}

type AircraftCategoryDeleteResponse {
  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  description: String
  id: ID
  isActive: Boolean
  name: String

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

input AircraftCategoryFilter {
  and: [AircraftCategoryFilter!]
  description: StringFieldComparison
  isActive: BooleanFieldComparison
  name: StringFieldComparison
  or: [AircraftCategoryFilter!]
}

type AircraftCategoryMaxAggregate {
  description: String
  name: String
}

type AircraftCategoryMinAggregate {
  description: String
  name: String
}

input AircraftCategorySort {
  direction: SortDirection!
  field: AircraftCategorySortFields!
  nulls: SortNulls
}

enum AircraftCategorySortFields {
  description
  isActive
  name
}

input AircraftCategoryUpdateFilter {
  and: [AircraftCategoryUpdateFilter!]
  description: StringFieldComparison
  isActive: BooleanFieldComparison
  name: StringFieldComparison
  or: [AircraftCategoryUpdateFilter!]
}

"""Aircraft Detail"""
type AircraftDetail {
  category: AircraftCategory!
  code: String!

  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  description: String!
  flightImages: [String!]
  id: ID!
  isActive: Boolean!
  name: String!
  noteText: String
  rangeMapImage: String
  seatLayoutImage: String
  specifications: [JSONObject!]!

  """Flights/Helicoptor Terms and Conditions"""
  termsAndConditions: String!

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
  warningImage: String
  warningText: String
}

type AircraftDetailAggregateGroupBy {
  category: String
  code: String
  isActive: Boolean
  name: String
}

type AircraftDetailConnection {
  """Array of nodes."""
  nodes: [AircraftDetail!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type AircraftDetailCountAggregate {
  category: Int
  code: Int
  isActive: Int
  name: Int
}

input AircraftDetailDeleteFilter {
  and: [AircraftDetailDeleteFilter!]
  category: StringFieldComparison
  code: StringFieldComparison
  isActive: BooleanFieldComparison
  name: StringFieldComparison
  or: [AircraftDetailDeleteFilter!]
}

type AircraftDetailDeleteResponse {
  category: String
  code: String

  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  description: String
  flightImages: [String!]
  id: ID
  isActive: Boolean
  name: String
  noteText: String
  rangeMapImage: String
  seatLayoutImage: String
  specifications: [JSONObject!]

  """Flights/Helicoptor Terms and Conditions"""
  termsAndConditions: String

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
  warningImage: String
  warningText: String
}

input AircraftDetailFilter {
  and: [AircraftDetailFilter!]
  category: StringFieldComparison
  code: StringFieldComparison
  isActive: BooleanFieldComparison
  name: StringFieldComparison
  or: [AircraftDetailFilter!]
}

type AircraftDetailMaxAggregate {
  category: String
  code: String
  name: String
}

type AircraftDetailMinAggregate {
  category: String
  code: String
  name: String
}

input AircraftDetailSort {
  direction: SortDirection!
  field: AircraftDetailSortFields!
  nulls: SortNulls
}

enum AircraftDetailSortFields {
  category
  code
  isActive
  name
}

input AircraftDetailUpdateFilter {
  and: [AircraftDetailUpdateFilter!]
  category: StringFieldComparison
  code: StringFieldComparison
  isActive: BooleanFieldComparison
  name: StringFieldComparison
  or: [AircraftDetailUpdateFilter!]
}

"""Airport"""
type Airport {
  city: String!
  country: String

  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  iata_code: String!
  icao_code: String!
  id: ID!
  isActive: Boolean!
  latitude: Float!
  longitude: Float!
  name: String!

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

type AirportAggregateGroupBy {
  city: String
  country: String
  iata_code: String
  icao_code: String
  isActive: Boolean
  name: String
}

type AirportConnection {
  """Array of nodes."""
  nodes: [Airport!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type AirportCountAggregate {
  city: Int
  country: Int
  iata_code: Int
  icao_code: Int
  isActive: Int
  name: Int
}

input AirportDeleteFilter {
  and: [AirportDeleteFilter!]
  city: StringFieldComparison
  country: StringFieldComparison
  iata_code: StringFieldComparison
  icao_code: StringFieldComparison
  isActive: BooleanFieldComparison
  name: StringFieldComparison
  or: [AirportDeleteFilter!]
}

type AirportDeleteResponse {
  city: String
  country: String

  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  iata_code: String
  icao_code: String
  id: ID
  isActive: Boolean
  latitude: Float
  longitude: Float
  name: String

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

input AirportFilter {
  and: [AirportFilter!]
  city: StringFieldComparison
  country: StringFieldComparison
  iata_code: StringFieldComparison
  icao_code: StringFieldComparison
  isActive: BooleanFieldComparison
  name: StringFieldComparison
  or: [AirportFilter!]
}

type AirportMaxAggregate {
  city: String
  country: String
  iata_code: String
  icao_code: String
  name: String
}

type AirportMinAggregate {
  city: String
  country: String
  iata_code: String
  icao_code: String
  name: String
}

input AirportSort {
  direction: SortDirection!
  field: AirportSortFields!
  nulls: SortNulls
}

enum AirportSortFields {
  city
  country
  iata_code
  icao_code
  isActive
  name
}

input AirportUpdateFilter {
  and: [AirportUpdateFilter!]
  city: StringFieldComparison
  country: StringFieldComparison
  iata_code: StringFieldComparison
  icao_code: StringFieldComparison
  isActive: BooleanFieldComparison
  name: StringFieldComparison
  or: [AirportUpdateFilter!]
}

enum BillingCycle {
  MONTHLY
  QUARTERLY
  YEARLY
}

input BillingCycleFilterComparison {
  eq: BillingCycle
  gt: BillingCycle
  gte: BillingCycle
  iLike: BillingCycle
  in: [BillingCycle!]
  is: Boolean
  isNot: Boolean
  like: BillingCycle
  lt: BillingCycle
  lte: BillingCycle
  neq: BillingCycle
  notILike: BillingCycle
  notIn: [BillingCycle!]
  notLike: BillingCycle
}

input BooleanFieldComparison {
  is: Boolean
  isNot: Boolean
}

"""City"""
type City {
  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  id: ID!
  isActive: Boolean!
  name: String!
  state: String!

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

type CityAggregateGroupBy {
  isActive: Boolean
  name: String
  state: String
}

type CityConnection {
  """Array of nodes."""
  nodes: [City!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type CityCountAggregate {
  isActive: Int
  name: Int
  state: Int
}

input CityDeleteFilter {
  and: [CityDeleteFilter!]
  isActive: BooleanFieldComparison
  name: StringFieldComparison
  or: [CityDeleteFilter!]
  state: StringFieldComparison
}

type CityDeleteResponse {
  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  id: ID
  isActive: Boolean
  name: String
  state: String

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

input CityFilter {
  and: [CityFilter!]
  isActive: BooleanFieldComparison
  name: StringFieldComparison
  or: [CityFilter!]
  state: StringFieldComparison
}

type CityMaxAggregate {
  name: String
  state: String
}

type CityMinAggregate {
  name: String
  state: String
}

input CitySort {
  direction: SortDirection!
  field: CitySortFields!
  nulls: SortNulls
}

enum CitySortFields {
  isActive
  name
  state
}

input CityUpdateFilter {
  and: [CityUpdateFilter!]
  isActive: BooleanFieldComparison
  name: StringFieldComparison
  or: [CityUpdateFilter!]
  state: StringFieldComparison
}

type ClientConnection {
  """Array of nodes."""
  nodes: [client!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type ClientDeleteResponse {
  address: String

  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  email: String
  id: ID
  isActive: Boolean
  isCompany: Boolean
  isPerson: Boolean
  name: String
  phone: String

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

input CreateAgent {
  address: String
  billingCycle: BillingCycle
  city: String
  companyLogo: String
  companyName: String

  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String
  createdByUser: UserDTO

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  email: String
  id: ID
  isActive: Boolean = true
  name: String
  phone: String
  pinCode: String
  state: String
  subscriptionPlan: SubscriptionPlan
  supportEmail: String
  themeColor: String
  ticketFooterNote: String

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
  websiteUrl: String
}

input CreateAircraftCategory {
  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  description: String
  id: ID
  isActive: Boolean = true
  name: String

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

input CreateAircraftDetail {
  category: String
  code: String

  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  description: String
  flightImages: [String!]
  id: ID
  isActive: Boolean = true
  name: String
  noteText: String
  rangeMapImage: String
  seatLayoutImage: String
  specifications: [JSONObject!]

  """Flights/Helicoptor Terms and Conditions"""
  termsAndConditions: String

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
  warningImage: String
  warningText: String
}

input CreateAirport {
  city: String
  country: String

  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  iata_code: String
  icao_code: String
  id: ID
  isActive: Boolean = true
  latitude: Float
  longitude: Float
  name: String

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

input CreateCity {
  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  id: ID
  isActive: Boolean = true
  name: String
  state: String

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

input CreateClient {
  address: String

  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  email: String
  id: ID
  isActive: Boolean = true
  isCompany: Boolean
  isPerson: Boolean
  name: String
  phone: String

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

input CreateInvoice {
  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  id: ID
  invoiceNo: String
  isActive: Boolean = true
  isLatest: Boolean = false
  quotation: String
  quotationNo: String
  revision: Int = 0
  template: String
  type: InvoiceType

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

input CreateManyAgentsInput {
  """Array of records to create"""
  agents: [CreateAgent!]!
}

input CreateManyAircraftCategoriesInput {
  """Array of records to create"""
  aircraftCategories: [CreateAircraftCategory!]!
}

input CreateManyAircraftDetailsInput {
  """Array of records to create"""
  aircraftDetails: [CreateAircraftDetail!]!
}

input CreateManyAirportsInput {
  """Array of records to create"""
  airports: [CreateAirport!]!
}

input CreateManyCitiesInput {
  """Array of records to create"""
  cities: [CreateCity!]!
}

input CreateManyClientsInput {
  """Array of records to create"""
  clients: [CreateClient!]!
}

input CreateManyInvoicesInput {
  """Array of records to create"""
  invoices: [CreateInvoice!]!
}

input CreateManyPricesInput {
  """Array of records to create"""
  prices: [CreatePrice!]!
}

input CreateManyQuotesInput {
  """Array of records to create"""
  quotes: [CreateQuote!]!
}

input CreateManyRepresentativesInput {
  """Array of records to create"""
  representatives: [CreateRepresentative!]!
}

input CreateManyResourcesInput {
  """Array of records to create"""
  resources: [CreateResource!]!
}

input CreateManyRolePermissionsInput {
  """Array of records to create"""
  rolePermissions: [CreateRolePermission!]!
}

input CreateManyRolesInput {
  """Array of records to create"""
  roles: [CreateRole!]!
}

input CreateManyUsersInput {
  """Array of records to create"""
  users: [CreateUser!]!
}

input CreateOneAgentInput {
  """The record to create"""
  agent: CreateAgent!
}

input CreateOneAircraftCategoryInput {
  """The record to create"""
  aircraftCategory: CreateAircraftCategory!
}

input CreateOneAircraftDetailInput {
  """The record to create"""
  aircraftDetail: CreateAircraftDetail!
}

input CreateOneAirportInput {
  """The record to create"""
  airport: CreateAirport!
}

input CreateOneCityInput {
  """The record to create"""
  city: CreateCity!
}

input CreateOneClientInput {
  """The record to create"""
  client: CreateClient!
}

input CreateOneInvoiceInput {
  """The record to create"""
  invoice: CreateInvoice!
}

input CreateOnePriceInput {
  """The record to create"""
  price: CreatePrice!
}

input CreateOneQuoteInput {
  """The record to create"""
  quote: CreateQuote!
}

input CreateOneRepresentativeInput {
  """The record to create"""
  representative: CreateRepresentative!
}

input CreateOneResourceInput {
  """The record to create"""
  resource: CreateResource!
}

input CreateOneRoleInput {
  """The record to create"""
  role: CreateRole!
}

input CreateOneRolePermissionInput {
  """The record to create"""
  rolePermission: CreateRolePermission!
}

input CreatePrice {
  aircraft: String

  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  grandTotal: Float = 0
  id: ID
  isActive: Boolean = true
  prices: [priceInput!]

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

input CreateQuote {
  aircraft: String
  category: String
  code: String

  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  grandTotal: Float = 0
  id: ID
  isActive: Boolean = true
  isLatest: Boolean = true
  itinerary: [JSONObject!]
  prices: [priceInput!]
  proformaInvoiceNo: String
  proformaInvoiceRevision: Int = 0
  providerType: String
  quotationNo: String
  representative: String
  requestedBy: String
  revision: Int = 0
  status: QuoteStatus = QUOTE

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
  version: Int = 1
}

input CreateRepresentative {
  address: String
  client: String

  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  email: String
  id: ID
  isActive: Boolean = true
  name: String
  phone: String

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

input CreateResource {
  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  icon: String
  id: ID
  isActive: Boolean = true
  menu: String
  segment: String
  title: String

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

input CreateRole {
  accessPermissions: [accessPermissionInput!]

  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  description: String
  id: ID
  isActive: Boolean = true
  name: String
  type: RoleType

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

input CreateRolePermission {
  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  id: ID
  isActive: Boolean = true
  permissions: [JSONObject!]
  role: String

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

input CreateUser {
  address: String
  agentId: String
  city: String

  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String
  createdByUser: UserDTO

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  dob: String
  email: String
  gender: Gender
  id: ID
  image: String
  isActive: Boolean = true
  name: String
  password: String
  phone: String
  pinCode: String
  roles: [String!]
  type: type = PLATFORM_USER

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

input CreateUserInput {
  user: UserInputDto!
}

enum DateRange {
  custom
  lastMonth
  lastWeek
  today
  yesterday
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DeleteManyAgentsInput {
  """Filter to find records to delete"""
  filter: agentDeleteFilter!
}

input DeleteManyAircraftCategoriesInput {
  """Filter to find records to delete"""
  filter: AircraftCategoryDeleteFilter!
}

input DeleteManyAircraftDetailsInput {
  """Filter to find records to delete"""
  filter: AircraftDetailDeleteFilter!
}

input DeleteManyAirportsInput {
  """Filter to find records to delete"""
  filter: AirportDeleteFilter!
}

input DeleteManyCitiesInput {
  """Filter to find records to delete"""
  filter: CityDeleteFilter!
}

input DeleteManyClientsInput {
  """Filter to find records to delete"""
  filter: clientDeleteFilter!
}

input DeleteManyInvoicesInput {
  """Filter to find records to delete"""
  filter: InvoiceDeleteFilter!
}

input DeleteManyPricesInput {
  """Filter to find records to delete"""
  filter: priceDeleteFilter!
}

input DeleteManyQuotesInput {
  """Filter to find records to delete"""
  filter: QuoteDeleteFilter!
}

input DeleteManyRepresentativesInput {
  """Filter to find records to delete"""
  filter: representativeDeleteFilter!
}

input DeleteManyResourcesInput {
  """Filter to find records to delete"""
  filter: resourceDeleteFilter!
}

type DeleteManyResponse {
  """The number of records deleted."""
  deletedCount: Int!
}

input DeleteManyRolePermissionsInput {
  """Filter to find records to delete"""
  filter: RolePermissionDeleteFilter!
}

input DeleteManyRolesInput {
  """Filter to find records to delete"""
  filter: roleDeleteFilter!
}

input DeleteManyUsersInput {
  """Filter to find records to delete"""
  filter: UserDeleteFilter!
}

input DeleteOneAgentInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneAircraftCategoryInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneAircraftDetailInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneAirportInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneCityInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneClientInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneInvoiceInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOnePriceInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneQuoteInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneRepresentativeInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneResourceInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneRoleInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneRolePermissionInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneUserInput {
  """The id of the record to delete."""
  id: ID!
}

type ForgotPasswordDto {
  message: String!
  status: Boolean!
}

enum Gender {
  FEMALE
  MALE
  OTHER
}

input GenerateInvoiceInput {
  id: String
  isRevised: Boolean! = false
  quotationNo: String!
}

"""Invoice"""
type Invoice {
  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  id: ID!
  invoiceNo: String!
  isActive: Boolean!
  isLatest: Boolean!
  quotation: Quote!
  quotationNo: String!
  revision: Int!
  template: String!
  type: InvoiceType!

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

type InvoiceAggregateGroupBy {
  invoiceNo: String
  isActive: Boolean
  isLatest: Boolean
  quotation: String
  quotationNo: String
  type: InvoiceType
}

type InvoiceConnection {
  """Array of nodes."""
  nodes: [Invoice!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type InvoiceCountAggregate {
  invoiceNo: Int
  isActive: Int
  isLatest: Int
  quotation: Int
  quotationNo: Int
  type: Int
}

input InvoiceDeleteFilter {
  and: [InvoiceDeleteFilter!]
  invoiceNo: StringFieldComparison
  isActive: BooleanFieldComparison
  isLatest: BooleanFieldComparison
  or: [InvoiceDeleteFilter!]
  quotation: StringFieldComparison
  quotationNo: StringFieldComparison
  type: InvoiceTypeFilterComparison
}

type InvoiceDeleteResponse {
  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  id: ID
  invoiceNo: String
  isActive: Boolean
  isLatest: Boolean
  quotation: String
  quotationNo: String
  revision: Int
  template: String
  type: InvoiceType

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

input InvoiceFilter {
  and: [InvoiceFilter!]
  invoiceNo: StringFieldComparison
  isActive: BooleanFieldComparison
  isLatest: BooleanFieldComparison
  or: [InvoiceFilter!]
  quotation: StringFieldComparison
  quotationNo: StringFieldComparison
  type: InvoiceTypeFilterComparison
}

type InvoiceMaxAggregate {
  invoiceNo: String
  quotation: String
  quotationNo: String
  type: InvoiceType
}

type InvoiceMinAggregate {
  invoiceNo: String
  quotation: String
  quotationNo: String
  type: InvoiceType
}

input InvoiceSort {
  direction: SortDirection!
  field: InvoiceSortFields!
  nulls: SortNulls
}

enum InvoiceSortFields {
  invoiceNo
  isActive
  isLatest
  quotation
  quotationNo
  type
}

enum InvoiceType {
  PROFORMA_INVOICE
  TAX_INVOICE
}

input InvoiceTypeFilterComparison {
  eq: InvoiceType
  gt: InvoiceType
  gte: InvoiceType
  iLike: InvoiceType
  in: [InvoiceType!]
  is: Boolean
  isNot: Boolean
  like: InvoiceType
  lt: InvoiceType
  lte: InvoiceType
  neq: InvoiceType
  notILike: InvoiceType
  notIn: [InvoiceType!]
  notLike: InvoiceType
}

input InvoiceUpdateFilter {
  and: [InvoiceUpdateFilter!]
  invoiceNo: StringFieldComparison
  isActive: BooleanFieldComparison
  isLatest: BooleanFieldComparison
  or: [InvoiceUpdateFilter!]
  quotation: StringFieldComparison
  quotationNo: StringFieldComparison
  type: InvoiceTypeFilterComparison
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

input MailerInput {
  html: String
  subject: String!
  text: String!
  to: String!
}

type MailerResponseDto {
  message: String!
  success: Boolean!
}

type Mutation {
  addRolesToUser(input: AddRolesToUserInput!): User!
  createAgent(agent: AgentDto!): agent!
  createManyAgents(input: CreateManyAgentsInput!): [agent!]!
  createManyAircraftCategories(input: CreateManyAircraftCategoriesInput!): [AircraftCategory!]!
  createManyAircraftDetails(input: CreateManyAircraftDetailsInput!): [AircraftDetail!]!
  createManyAirports(input: CreateManyAirportsInput!): [Airport!]!
  createManyCities(input: CreateManyCitiesInput!): [City!]!
  createManyClients(input: CreateManyClientsInput!): [client!]!
  createManyInvoices(input: CreateManyInvoicesInput!): [Invoice!]!
  createManyPrices(input: CreateManyPricesInput!): [price!]!
  createManyQuotes(input: CreateManyQuotesInput!): [Quote!]!
  createManyRepresentatives(input: CreateManyRepresentativesInput!): [representative!]!
  createManyResources(input: CreateManyResourcesInput!): [resource!]!
  createManyRolePermissions(input: CreateManyRolePermissionsInput!): [RolePermission!]!
  createManyRoles(input: CreateManyRolesInput!): [role!]!
  createManyUsers(input: CreateManyUsersInput!): [User!]!
  createOneAgent(input: CreateOneAgentInput!): agent!
  createOneAircraftCategory(input: CreateOneAircraftCategoryInput!): AircraftCategory!
  createOneAircraftDetail(input: CreateOneAircraftDetailInput!): AircraftDetail!
  createOneAirport(input: CreateOneAirportInput!): Airport!
  createOneCity(input: CreateOneCityInput!): City!
  createOneClient(input: CreateOneClientInput!): client!
  createOneInvoice(input: CreateOneInvoiceInput!): Invoice!
  createOnePrice(input: CreateOnePriceInput!): price!
  createOneQuote(input: CreateOneQuoteInput!): Quote!
  createOneRepresentative(input: CreateOneRepresentativeInput!): representative!
  createOneResource(input: CreateOneResourceInput!): resource!
  createOneRole(input: CreateOneRoleInput!): role!
  createOneRolePermission(input: CreateOneRolePermissionInput!): RolePermission!
  createOneUser(input: CreateUserInput!): User!
  deleteManyAgents(input: DeleteManyAgentsInput!): DeleteManyResponse!
  deleteManyAircraftCategories(input: DeleteManyAircraftCategoriesInput!): DeleteManyResponse!
  deleteManyAircraftDetails(input: DeleteManyAircraftDetailsInput!): DeleteManyResponse!
  deleteManyAirports(input: DeleteManyAirportsInput!): DeleteManyResponse!
  deleteManyCities(input: DeleteManyCitiesInput!): DeleteManyResponse!
  deleteManyClients(input: DeleteManyClientsInput!): DeleteManyResponse!
  deleteManyInvoices(input: DeleteManyInvoicesInput!): DeleteManyResponse!
  deleteManyPrices(input: DeleteManyPricesInput!): DeleteManyResponse!
  deleteManyQuotes(input: DeleteManyQuotesInput!): DeleteManyResponse!
  deleteManyRepresentatives(input: DeleteManyRepresentativesInput!): DeleteManyResponse!
  deleteManyResources(input: DeleteManyResourcesInput!): DeleteManyResponse!
  deleteManyRolePermissions(input: DeleteManyRolePermissionsInput!): DeleteManyResponse!
  deleteManyRoles(input: DeleteManyRolesInput!): DeleteManyResponse!
  deleteManyUsers(input: DeleteManyUsersInput!): DeleteManyResponse!
  deleteOneAgent(input: DeleteOneAgentInput!): AgentDeleteResponse!
  deleteOneAircraftCategory(input: DeleteOneAircraftCategoryInput!): AircraftCategoryDeleteResponse!
  deleteOneAircraftDetail(input: DeleteOneAircraftDetailInput!): AircraftDetailDeleteResponse!
  deleteOneAirport(input: DeleteOneAirportInput!): AirportDeleteResponse!
  deleteOneCity(input: DeleteOneCityInput!): CityDeleteResponse!
  deleteOneClient(input: DeleteOneClientInput!): ClientDeleteResponse!
  deleteOneInvoice(input: DeleteOneInvoiceInput!): InvoiceDeleteResponse!
  deleteOnePrice(input: DeleteOnePriceInput!): PriceDeleteResponse!
  deleteOneQuote(input: DeleteOneQuoteInput!): QuoteDeleteResponse!
  deleteOneRepresentative(input: DeleteOneRepresentativeInput!): RepresentativeDeleteResponse!
  deleteOneResource(input: DeleteOneResourceInput!): ResourceDeleteResponse!
  deleteOneRole(input: DeleteOneRoleInput!): RoleDeleteResponse!
  deleteOneRolePermission(input: DeleteOneRolePermissionInput!): RolePermissionDeleteResponse!
  deleteOneUser(input: DeleteOneUserInput!): UserDeleteResponse!
  forgotPassword(email: String!): ForgotPasswordDto!
  resetPassword(input: ResetPasswordInput!): ResetPasswordDto!
  sendAcknowledgement(input: acknowledgementInput!): String!
  sendEmail(input: MailerInput!): MailerResponseDto!
  setAgentOnUser(input: SetAgentOnUserInput!): User!
  setAircraftOnPrice(input: SetAircraftOnPriceInput!): price!
  setAircraftOnQuote(input: SetAircraftOnQuoteInput!): Quote!
  setCategoryOnAircraftDetail(input: SetCategoryOnAircraftDetailInput!): AircraftDetail!
  setCategoryOnQuote(input: SetCategoryOnQuoteInput!): Quote!
  setClientOnRepresentative(input: SetClientOnRepresentativeInput!): representative!
  setQuotationOnInvoice(input: SetQuotationOnInvoiceInput!): Invoice!
  setRepresentativeOnQuote(input: SetRepresentativeOnQuoteInput!): Quote!
  setRequestedByOnQuote(input: SetRequestedByOnQuoteInput!): Quote!
  setRoleOnRolePermission(input: SetRoleOnRolePermissionInput!): RolePermission!
  setRolesOnUser(input: SetRolesOnUserInput!): User!
  signUp(input: SignUpInput!): User!
  updateManyAgents(input: UpdateManyAgentsInput!): UpdateManyResponse!
  updateManyAircraftCategories(input: UpdateManyAircraftCategoriesInput!): UpdateManyResponse!
  updateManyAircraftDetails(input: UpdateManyAircraftDetailsInput!): UpdateManyResponse!
  updateManyAirports(input: UpdateManyAirportsInput!): UpdateManyResponse!
  updateManyCities(input: UpdateManyCitiesInput!): UpdateManyResponse!
  updateManyClients(input: UpdateManyClientsInput!): UpdateManyResponse!
  updateManyInvoices(input: UpdateManyInvoicesInput!): UpdateManyResponse!
  updateManyPrices(input: UpdateManyPricesInput!): UpdateManyResponse!
  updateManyQuotes(input: UpdateManyQuotesInput!): UpdateManyResponse!
  updateManyRepresentatives(input: UpdateManyRepresentativesInput!): UpdateManyResponse!
  updateManyResources(input: UpdateManyResourcesInput!): UpdateManyResponse!
  updateManyRolePermissions(input: UpdateManyRolePermissionsInput!): UpdateManyResponse!
  updateManyRoles(input: UpdateManyRolesInput!): UpdateManyResponse!
  updateManyUsers(input: UpdateManyUsersInput!): UpdateManyResponse!
  updateOneAgent(input: UpdateOneAgentInput!): agent!
  updateOneAircraftCategory(input: UpdateOneAircraftCategoryInput!): AircraftCategory!
  updateOneAircraftDetail(input: UpdateOneAircraftDetailInput!): AircraftDetail!
  updateOneAirport(input: UpdateOneAirportInput!): Airport!
  updateOneCity(input: UpdateOneCityInput!): City!
  updateOneClient(input: UpdateOneClientInput!): client!
  updateOneInvoice(input: UpdateOneInvoiceInput!): Invoice!
  updateOnePrice(input: UpdateOnePriceInput!): price!

  """Update one Quote """
  updateOneQuote(input: UpdateOneQuoteInput!): Quote!
  updateOneRepresentative(input: UpdateOneRepresentativeInput!): representative!
  updateOneResource(input: UpdateOneResourceInput!): resource!
  updateOneRole(input: UpdateOneRoleInput!): role!
  updateOneRolePermission(input: UpdateOneRolePermissionInput!): RolePermission!
  updateOneUser(input: UpdateOneUserInput!): User!
  updateQuotationStatus(input: UpdateQuoteStatusInput!): Quote!
  upgradeQuote(code: String!): Quote!
}

type OffsetPageInfo {
  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean
}

input OffsetPaging {
  """Limit the number of records returned"""
  limit: Int

  """Offset to start returning records from"""
  offset: Int
}

type PriceConnection {
  """Array of nodes."""
  nodes: [price!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type PriceDeleteResponse {
  aircraft: String

  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  grandTotal: Float
  id: ID
  isActive: Boolean
  prices: [PriceInputDto!]

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

type PriceInputDto {
  currency: String!
  label: String!
  margin: Float!
  price: Float!
  total: Float!

  """duration"""
  unit: String!
}

type Query {
  RequestedQuoteList: [Quote!]!
  agent(
    """The id of the record to find."""
    id: ID!
  ): agent
  agents(
    """Specify to filter the records returned."""
    filter: agentFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [agentSort!]! = []
  ): AgentConnection!
  aircraftCategories(
    """Specify to filter the records returned."""
    filter: AircraftCategoryFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [AircraftCategorySort!]! = []
  ): AircraftCategoryConnection!
  aircraftCategory(
    """The id of the record to find."""
    id: ID!
  ): AircraftCategory
  aircraftDetail(
    """The id of the record to find."""
    id: ID!
  ): AircraftDetail
  aircraftDetails(
    """Specify to filter the records returned."""
    filter: AircraftDetailFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [AircraftDetailSort!]! = []
  ): AircraftDetailConnection!
  airport(
    """The id of the record to find."""
    id: ID!
  ): Airport
  airports(
    """Specify to filter the records returned."""
    filter: AirportFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [AirportSort!]! = []
  ): AirportConnection!
  cities(
    """Specify to filter the records returned."""
    filter: CityFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [CitySort!]! = []
  ): CityConnection!
  city(
    """The id of the record to find."""
    id: ID!
  ): City
  client(
    """The id of the record to find."""
    id: ID!
  ): client
  clients(
    """Specify to filter the records returned."""
    filter: clientFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [clientSort!]! = []
  ): ClientConnection!
  generateInvoice(args: GenerateInvoiceInput!): String!
  getSalesDashboardData(endDate: String, range: DateRange! = today, startDate: String): JSONObject!
  getUser(id: String!): String!
  invoice(
    """The id of the record to find."""
    id: ID!
  ): Invoice
  invoices(
    """Specify to filter the records returned."""
    filter: InvoiceFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [InvoiceSort!]! = []
  ): InvoiceConnection!
  price(
    """The id of the record to find."""
    id: ID!
  ): price
  prices(
    """Specify to filter the records returned."""
    filter: priceFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [priceSort!]! = []
  ): PriceConnection!
  quote(
    """The id of the record to find."""
    id: ID!
  ): Quote
  quotes(
    """Specify to filter the records returned."""
    filter: QuoteFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [QuoteSort!]! = []
  ): QuoteConnection!
  representative(
    """The id of the record to find."""
    id: ID!
  ): representative
  representatives(
    """Specify to filter the records returned."""
    filter: representativeFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [representativeSort!]! = []
  ): RepresentativeConnection!
  resource(
    """The id of the record to find."""
    id: ID!
  ): resource
  resources(
    """Specify to filter the records returned."""
    filter: resourceFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [resourceSort!]! = []
  ): ResourceConnection!
  role(
    """The id of the record to find."""
    id: ID!
  ): role
  rolePermission(
    """The id of the record to find."""
    id: ID!
  ): RolePermission
  rolePermissions(
    """Specify to filter the records returned."""
    filter: RolePermissionFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [RolePermissionSort!]! = []
  ): RolePermissionConnection!
  roles(
    """Specify to filter the records returned."""
    filter: roleFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [roleSort!]! = []
  ): RoleConnection!
  showPreview(quotationNo: String!): String!
  signIn(input: SignInInput!): loginResponseDto!
  user(
    """The id of the record to find."""
    id: ID!
  ): User
  users(
    """Specify to filter the records returned."""
    filter: UserFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [UserSort!]! = []
  ): UserConnection!
}

"""Quotes"""
type Quote {
  aircraft: AircraftDetail
  category: AircraftCategory!
  code: String!

  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  grandTotal: Float!
  id: ID!
  isActive: Boolean!
  isLatest: Boolean!
  itinerary: [JSONObject!]!
  prices: [PriceInputDto!]!
  proformaInvoiceNo: String
  proformaInvoiceRevision: Int
  providerType: String!
  quotationNo: String!
  representative: representative!
  requestedBy: client!
  revision: Int!
  status: QuoteStatus!

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
  version: Int!
}

type QuoteAggregateGroupBy {
  aircraft: String
  category: String
  code: String
  isActive: Boolean
  isLatest: Boolean
  proformaInvoiceNo: String
  providerType: String
  quotationNo: String
  representative: String
  requestedBy: String
  status: QuoteStatus
}

type QuoteConnection {
  """Array of nodes."""
  nodes: [Quote!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type QuoteCountAggregate {
  aircraft: Int
  category: Int
  code: Int
  isActive: Int
  isLatest: Int
  proformaInvoiceNo: Int
  providerType: Int
  quotationNo: Int
  representative: Int
  requestedBy: Int
  status: Int
}

input QuoteDeleteFilter {
  aircraft: StringFieldComparison
  and: [QuoteDeleteFilter!]
  category: StringFieldComparison
  code: StringFieldComparison
  isActive: BooleanFieldComparison
  isLatest: BooleanFieldComparison
  or: [QuoteDeleteFilter!]
  proformaInvoiceNo: StringFieldComparison
  providerType: StringFieldComparison
  quotationNo: StringFieldComparison
  representative: StringFieldComparison
  requestedBy: StringFieldComparison
  status: QuoteStatusFilterComparison
}

type QuoteDeleteResponse {
  aircraft: String
  category: String
  code: String

  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  grandTotal: Float
  id: ID
  isActive: Boolean
  isLatest: Boolean
  itinerary: [JSONObject!]
  prices: [PriceInputDto!]
  proformaInvoiceNo: String
  proformaInvoiceRevision: Int
  providerType: String
  quotationNo: String
  representative: String
  requestedBy: String
  revision: Int
  status: QuoteStatus

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
  version: Int
}

input QuoteFilter {
  aircraft: StringFieldComparison
  and: [QuoteFilter!]
  category: StringFieldComparison
  code: StringFieldComparison
  isActive: BooleanFieldComparison
  isLatest: BooleanFieldComparison
  or: [QuoteFilter!]
  proformaInvoiceNo: StringFieldComparison
  providerType: StringFieldComparison
  quotationNo: StringFieldComparison
  representative: StringFieldComparison
  requestedBy: StringFieldComparison
  status: QuoteStatusFilterComparison
}

type QuoteMaxAggregate {
  aircraft: String
  category: String
  code: String
  proformaInvoiceNo: String
  providerType: String
  quotationNo: String
  representative: String
  requestedBy: String
  status: QuoteStatus
}

type QuoteMinAggregate {
  aircraft: String
  category: String
  code: String
  proformaInvoiceNo: String
  providerType: String
  quotationNo: String
  representative: String
  requestedBy: String
  status: QuoteStatus
}

input QuoteSort {
  direction: SortDirection!
  field: QuoteSortFields!
  nulls: SortNulls
}

enum QuoteSortFields {
  aircraft
  category
  code
  isActive
  isLatest
  proformaInvoiceNo
  providerType
  quotationNo
  representative
  requestedBy
  status
}

enum QuoteStatus {
  CANCELLED
  DEPRECATED
  PROFOMA_INVOICE
  QUOTE
  TAX_INVOICE
}

input QuoteStatusFilterComparison {
  eq: QuoteStatus
  gt: QuoteStatus
  gte: QuoteStatus
  iLike: QuoteStatus
  in: [QuoteStatus!]
  is: Boolean
  isNot: Boolean
  like: QuoteStatus
  lt: QuoteStatus
  lte: QuoteStatus
  neq: QuoteStatus
  notILike: QuoteStatus
  notIn: [QuoteStatus!]
  notLike: QuoteStatus
}

input QuoteUpdateFilter {
  aircraft: StringFieldComparison
  and: [QuoteUpdateFilter!]
  category: StringFieldComparison
  code: StringFieldComparison
  isActive: BooleanFieldComparison
  isLatest: BooleanFieldComparison
  or: [QuoteUpdateFilter!]
  proformaInvoiceNo: StringFieldComparison
  providerType: StringFieldComparison
  quotationNo: StringFieldComparison
  representative: StringFieldComparison
  requestedBy: StringFieldComparison
  status: QuoteStatusFilterComparison
}

type RepresentativeConnection {
  """Array of nodes."""
  nodes: [representative!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type RepresentativeDeleteResponse {
  address: String
  client: String

  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  email: String
  id: ID
  isActive: Boolean
  name: String
  phone: String

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

type ResetPasswordDto {
  message: String!
  status: Boolean!
}

input ResetPasswordInput {
  confirmPwd: String!
  currentPwd: String!
  newPwd: String!
  userId: String!
}

enum ResourceAction {
  CREATE
  DELETE
  READ
  UPDATE
}

type ResourceConnection {
  """Array of nodes."""
  nodes: [resource!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type ResourceDeleteResponse {
  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  icon: String
  id: ID
  isActive: Boolean
  menu: String
  segment: String
  title: String

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

type RoleConnection {
  """Array of nodes."""
  nodes: [role!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type RoleDeleteResponse {
  accessPermissions: [AccessPermissionInput!]

  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  description: String
  id: ID
  isActive: Boolean
  name: String
  type: RoleType

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

"""Role Permission"""
type RolePermission {
  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  id: ID!
  isActive: Boolean!
  permissions: [JSONObject!]!
  role: role!

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

type RolePermissionAggregateGroupBy {
  isActive: Boolean
  role: String
}

type RolePermissionConnection {
  """Array of nodes."""
  nodes: [RolePermission!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type RolePermissionCountAggregate {
  isActive: Int
  role: Int
}

input RolePermissionDeleteFilter {
  and: [RolePermissionDeleteFilter!]
  isActive: BooleanFieldComparison
  or: [RolePermissionDeleteFilter!]
  role: StringFieldComparison
}

type RolePermissionDeleteResponse {
  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  id: ID
  isActive: Boolean
  permissions: [JSONObject!]
  role: String

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

input RolePermissionFilter {
  and: [RolePermissionFilter!]
  isActive: BooleanFieldComparison
  or: [RolePermissionFilter!]
  role: StringFieldComparison
}

type RolePermissionMaxAggregate {
  role: String
}

type RolePermissionMinAggregate {
  role: String
}

input RolePermissionSort {
  direction: SortDirection!
  field: RolePermissionSortFields!
  nulls: SortNulls
}

enum RolePermissionSortFields {
  isActive
  role
}

input RolePermissionUpdateFilter {
  and: [RolePermissionUpdateFilter!]
  isActive: BooleanFieldComparison
  or: [RolePermissionUpdateFilter!]
  role: StringFieldComparison
}

enum RoleType {
  ACCOUNTING
  ADMIN
  AUDIT
  ENGINEERING
  OPERATOR
  SALES
  SUPER_ADMIN
}

input RoleTypeFilterComparison {
  eq: RoleType
  gt: RoleType
  gte: RoleType
  iLike: RoleType
  in: [RoleType!]
  is: Boolean
  isNot: Boolean
  like: RoleType
  lt: RoleType
  lte: RoleType
  neq: RoleType
  notILike: RoleType
  notIn: [RoleType!]
  notLike: RoleType
}

enum SalesDocumentType {
  INVOICE
  QUOTATION
}

input SetAgentOnUserInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetAircraftOnPriceInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetAircraftOnQuoteInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetCategoryOnAircraftDetailInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetCategoryOnQuoteInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetClientOnRepresentativeInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetQuotationOnInvoiceInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetRepresentativeOnQuoteInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetRequestedByOnQuoteInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetRoleOnRolePermissionInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetRolesOnUserInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SignInInput {
  password: String!
  userName: String!
}

input SignUpInput {
  email: String!
  name: String!
  password: String!
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

input StringFieldComparison {
  eq: String
  gt: String
  gte: String
  iLike: String
  in: [String!]
  is: Boolean
  isNot: Boolean
  like: String
  lt: String
  lte: String
  neq: String
  notILike: String
  notIn: [String!]
  notLike: String
}

enum SubscriptionPlan {
  ENTERPRISE
  FREE
  STANDARD
}

input SubscriptionPlanFilterComparison {
  eq: SubscriptionPlan
  gt: SubscriptionPlan
  gte: SubscriptionPlan
  iLike: SubscriptionPlan
  in: [SubscriptionPlan!]
  is: Boolean
  isNot: Boolean
  like: SubscriptionPlan
  lt: SubscriptionPlan
  lte: SubscriptionPlan
  neq: SubscriptionPlan
  notILike: SubscriptionPlan
  notIn: [SubscriptionPlan!]
  notLike: SubscriptionPlan
}

input TypeFilterComparison {
  eq: type
  gt: type
  gte: type
  iLike: type
  in: [type!]
  is: Boolean
  isNot: Boolean
  like: type
  lt: type
  lte: type
  neq: type
  notILike: type
  notIn: [type!]
  notLike: type
}

input UpdateAgent {
  address: String
  billingCycle: BillingCycle
  city: String
  companyLogo: String
  companyName: String

  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String
  createdByUser: UserDTO

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  email: String
  id: ID
  isActive: Boolean = true
  name: String
  phone: String
  pinCode: String
  state: String
  subscriptionPlan: SubscriptionPlan
  supportEmail: String
  themeColor: String
  ticketFooterNote: String

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
  websiteUrl: String
}

input UpdateAircraftCategory {
  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  description: String
  id: ID
  isActive: Boolean = true
  name: String

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

input UpdateAircraftDetail {
  category: String
  code: String

  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  description: String
  flightImages: [String!]
  id: ID
  isActive: Boolean = true
  name: String
  noteText: String
  rangeMapImage: String
  seatLayoutImage: String
  specifications: [JSONObject!]

  """Flights/Helicoptor Terms and Conditions"""
  termsAndConditions: String

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
  warningImage: String
  warningText: String
}

input UpdateAirport {
  city: String
  country: String

  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  iata_code: String
  icao_code: String
  id: ID
  isActive: Boolean = true
  latitude: Float
  longitude: Float
  name: String

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

input UpdateCity {
  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  id: ID
  isActive: Boolean = true
  name: String
  state: String

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

input UpdateClient {
  address: String

  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  email: String
  id: ID
  isActive: Boolean = true
  isCompany: Boolean
  isPerson: Boolean
  name: String
  phone: String

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

input UpdateInvoice {
  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  id: ID
  invoiceNo: String
  isActive: Boolean = true
  isLatest: Boolean = false
  quotation: String
  quotationNo: String
  revision: Int = 0
  template: String
  type: InvoiceType

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

input UpdateManyAgentsInput {
  """Filter used to find fields to update"""
  filter: agentUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateAgent!
}

input UpdateManyAircraftCategoriesInput {
  """Filter used to find fields to update"""
  filter: AircraftCategoryUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateAircraftCategory!
}

input UpdateManyAircraftDetailsInput {
  """Filter used to find fields to update"""
  filter: AircraftDetailUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateAircraftDetail!
}

input UpdateManyAirportsInput {
  """Filter used to find fields to update"""
  filter: AirportUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateAirport!
}

input UpdateManyCitiesInput {
  """Filter used to find fields to update"""
  filter: CityUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateCity!
}

input UpdateManyClientsInput {
  """Filter used to find fields to update"""
  filter: clientUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateClient!
}

input UpdateManyInvoicesInput {
  """Filter used to find fields to update"""
  filter: InvoiceUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateInvoice!
}

input UpdateManyPricesInput {
  """Filter used to find fields to update"""
  filter: priceUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdatePrice!
}

input UpdateManyQuotesInput {
  """Filter used to find fields to update"""
  filter: QuoteUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateQuote!
}

input UpdateManyRepresentativesInput {
  """Filter used to find fields to update"""
  filter: representativeUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateRepresentative!
}

input UpdateManyResourcesInput {
  """Filter used to find fields to update"""
  filter: resourceUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateResource!
}

type UpdateManyResponse {
  """The number of records updated."""
  updatedCount: Int!
}

input UpdateManyRolePermissionsInput {
  """Filter used to find fields to update"""
  filter: RolePermissionUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateRolePermission!
}

input UpdateManyRolesInput {
  """Filter used to find fields to update"""
  filter: roleUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateRole!
}

input UpdateManyUsersInput {
  """Filter used to find fields to update"""
  filter: UserUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateUser!
}

input UpdateOneAgentInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateAgent!
}

input UpdateOneAircraftCategoryInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateAircraftCategory!
}

input UpdateOneAircraftDetailInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateAircraftDetail!
}

input UpdateOneAirportInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateAirport!
}

input UpdateOneCityInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCity!
}

input UpdateOneClientInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateClient!
}

input UpdateOneInvoiceInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateInvoice!
}

input UpdateOnePriceInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdatePrice!
}

input UpdateOneQuoteInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateQuoteDTO!
}

input UpdateOneRepresentativeInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateRepresentative!
}

input UpdateOneResourceInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateResource!
}

input UpdateOneRoleInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateRole!
}

input UpdateOneRolePermissionInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateRolePermission!
}

input UpdateOneUserInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateUser!
}

input UpdatePrice {
  aircraft: String

  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  grandTotal: Float = 0
  id: ID
  isActive: Boolean = true
  prices: [priceInput!]

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

input UpdateQuote {
  aircraft: String
  category: String
  code: String

  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  grandTotal: Float = 0
  id: ID
  isActive: Boolean = true
  isLatest: Boolean = true
  itinerary: [JSONObject!]
  prices: [priceInput!]
  proformaInvoiceNo: String
  proformaInvoiceRevision: Int = 0
  providerType: String
  quotationNo: String
  representative: String
  requestedBy: String
  revision: Int = 0
  status: QuoteStatus = QUOTE

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
  version: Int = 1
}

input UpdateQuoteDTO {
  aircraft: String!
  category: String!
  grandTotal: Float! = 0
  itinerary: [JSONObject!]!
  prices: [priceInput!]!
  providerType: String!
  representative: String!
  requestedBy: String
}

input UpdateQuoteStatusInput {
  id: String!
  status: QuoteStatus! = QUOTE
}

input UpdateRepresentative {
  address: String
  client: String

  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  email: String
  id: ID
  isActive: Boolean = true
  name: String
  phone: String

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

input UpdateResource {
  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  icon: String
  id: ID
  isActive: Boolean = true
  menu: String
  segment: String
  title: String

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

input UpdateRole {
  accessPermissions: [accessPermissionInput!]

  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  description: String
  id: ID
  isActive: Boolean = true
  name: String
  type: RoleType

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

input UpdateRolePermission {
  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  id: ID
  isActive: Boolean = true
  permissions: [JSONObject!]
  role: String

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

input UpdateUser {
  address: String
  agentId: String
  city: String

  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String
  createdByUser: UserDTO

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  dob: String
  email: String
  gender: Gender
  id: ID
  image: String
  isActive: Boolean = true
  name: String
  password: String
  phone: String
  pinCode: String
  roles: [String!]
  type: type = PLATFORM_USER

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

"""user dto"""
type User {
  address: String
  agent: agent!
  agentId: String
  city: String

  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String
  createdByUser: User

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  dob: String
  email: String!
  gender: Gender
  id: ID!
  image: String
  isActive: Boolean!
  name: String!
  password: String!
  phone: String
  pinCode: String
  roles(
    """Specify to filter the records returned."""
    filter: roleFilter! = {}

    """Specify to sort results."""
    sorting: [roleSort!]! = []
  ): [role!]!
  type: type!

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

type UserAggregateGroupBy {
  agentId: String
  email: String
  isActive: Boolean
  name: String
  phone: String
  roles: [String!]
  type: type
}

type UserConnection {
  """Array of nodes."""
  nodes: [User!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type UserCountAggregate {
  agentId: Int
  email: Int
  isActive: Int
  name: Int
  phone: Int
  roles: Int
  type: Int
}

input UserDTO {
  address: String
  agentId: String
  city: String
  createdByUser: UserDTO
  dob: String
  email: String!
  gender: Gender
  image: String
  name: String!
  password: String!
  phone: String
  pinCode: String
  roles: [String!]
  type: type! = PLATFORM_USER
}

input UserDeleteFilter {
  agentId: StringFieldComparison
  and: [UserDeleteFilter!]
  email: StringFieldComparison
  isActive: BooleanFieldComparison
  name: StringFieldComparison
  or: [UserDeleteFilter!]
  phone: StringFieldComparison
  roles: UserRolesFilterComparison
  type: TypeFilterComparison
}

type UserDeleteResponse {
  address: String
  agentId: String
  city: String

  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String
  createdByUser: User

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  dob: String
  email: String
  gender: Gender
  id: ID
  image: String
  isActive: Boolean
  name: String
  password: String
  phone: String
  pinCode: String
  roles: [String!]
  type: type

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

input UserFilter {
  agentId: StringFieldComparison
  and: [UserFilter!]
  email: StringFieldComparison
  isActive: BooleanFieldComparison
  name: StringFieldComparison
  or: [UserFilter!]
  phone: StringFieldComparison
  roles: UserRolesFilterComparison
  type: TypeFilterComparison
}

type UserInput {
  address: String
  agent: agent
  agentId: String
  city: String

  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String
  createdByUser: User

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  dob: String
  email: String!
  gender: Gender
  id: String!
  image: String
  isActive: Boolean!
  name: String!
  password: String!
  permissions: [JSONObject!]!
  phone: String
  pinCode: String
  roles: [String!]!
  type: type!

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

input UserInputDto {
  address: String
  agentId: String
  email: String!
  name: String!
  password: String
  phone: String
  roles: [String!]!
}

type UserMaxAggregate {
  agentId: String
  email: String
  name: String
  phone: String
  roles: [String!]
  type: type
}

type UserMinAggregate {
  agentId: String
  email: String
  name: String
  phone: String
  roles: [String!]
  type: type
}

input UserRolesFilterComparison {
  eq: [String!]
  in: [[String!]!]
  neq: [String!]
  notIn: [[String!]!]
}

input UserSort {
  direction: SortDirection!
  field: UserSortFields!
  nulls: SortNulls
}

enum UserSortFields {
  agentId
  email
  isActive
  name
  phone
  roles
  type
}

input UserUpdateFilter {
  agentId: StringFieldComparison
  and: [UserUpdateFilter!]
  email: StringFieldComparison
  isActive: BooleanFieldComparison
  name: StringFieldComparison
  or: [UserUpdateFilter!]
  phone: StringFieldComparison
  roles: UserRolesFilterComparison
  type: TypeFilterComparison
}

input accessPermissionInput {
  action: [ResourceAction!]!
  resource: String!
}

input acknowledgementInput {
  documentType: SalesDocumentType!
  email: String!
  quotationNo: String!
}

"""Agent"""
type agent {
  address: String!
  billingCycle: BillingCycle
  city: String!
  companyLogo: String!
  companyName: String!

  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String
  createdByUser: User

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  email: String!
  id: ID!
  isActive: Boolean!
  name: String!
  phone: String!
  pinCode: String
  state: String
  subscriptionPlan: SubscriptionPlan
  supportEmail: String!
  themeColor: String
  ticketFooterNote: String

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
  websiteUrl: String
}

type agentAggregateGroupBy {
  billingCycle: BillingCycle
  companyName: String
  email: String
  isActive: Boolean
  name: String
  phone: String
  subscriptionPlan: SubscriptionPlan
  supportEmail: String
}

type agentCountAggregate {
  billingCycle: Int
  companyName: Int
  email: Int
  isActive: Int
  name: Int
  phone: Int
  subscriptionPlan: Int
  supportEmail: Int
}

input agentDeleteFilter {
  and: [agentDeleteFilter!]
  billingCycle: BillingCycleFilterComparison
  companyName: StringFieldComparison
  email: StringFieldComparison
  isActive: BooleanFieldComparison
  name: StringFieldComparison
  or: [agentDeleteFilter!]
  phone: StringFieldComparison
  subscriptionPlan: SubscriptionPlanFilterComparison
  supportEmail: StringFieldComparison
}

input agentFilter {
  and: [agentFilter!]
  billingCycle: BillingCycleFilterComparison
  companyName: StringFieldComparison
  email: StringFieldComparison
  isActive: BooleanFieldComparison
  name: StringFieldComparison
  or: [agentFilter!]
  phone: StringFieldComparison
  subscriptionPlan: SubscriptionPlanFilterComparison
  supportEmail: StringFieldComparison
}

type agentMaxAggregate {
  billingCycle: BillingCycle
  companyName: String
  email: String
  name: String
  phone: String
  subscriptionPlan: SubscriptionPlan
  supportEmail: String
}

type agentMinAggregate {
  billingCycle: BillingCycle
  companyName: String
  email: String
  name: String
  phone: String
  subscriptionPlan: SubscriptionPlan
  supportEmail: String
}

input agentSort {
  direction: SortDirection!
  field: agentSortFields!
  nulls: SortNulls
}

enum agentSortFields {
  billingCycle
  companyName
  email
  isActive
  name
  phone
  subscriptionPlan
  supportEmail
}

input agentUpdateFilter {
  and: [agentUpdateFilter!]
  billingCycle: BillingCycleFilterComparison
  companyName: StringFieldComparison
  email: StringFieldComparison
  isActive: BooleanFieldComparison
  name: StringFieldComparison
  or: [agentUpdateFilter!]
  phone: StringFieldComparison
  subscriptionPlan: SubscriptionPlanFilterComparison
  supportEmail: StringFieldComparison
}

"""Client"""
type client {
  address: String!

  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  email: String!
  id: ID!
  isActive: Boolean!
  isCompany: Boolean!
  isPerson: Boolean!
  name: String!
  phone: String!

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

type clientAggregateGroupBy {
  address: String
  email: String
  isActive: Boolean
  isCompany: Boolean
  isPerson: Boolean
  phone: String
}

type clientCountAggregate {
  address: Int
  email: Int
  isActive: Int
  isCompany: Int
  isPerson: Int
  phone: Int
}

input clientDeleteFilter {
  address: StringFieldComparison
  and: [clientDeleteFilter!]
  email: StringFieldComparison
  isActive: BooleanFieldComparison
  isCompany: BooleanFieldComparison
  isPerson: BooleanFieldComparison
  or: [clientDeleteFilter!]
  phone: StringFieldComparison
}

input clientFilter {
  address: StringFieldComparison
  and: [clientFilter!]
  email: StringFieldComparison
  isActive: BooleanFieldComparison
  isCompany: BooleanFieldComparison
  isPerson: BooleanFieldComparison
  or: [clientFilter!]
  phone: StringFieldComparison
}

type clientMaxAggregate {
  address: String
  email: String
  phone: String
}

type clientMinAggregate {
  address: String
  email: String
  phone: String
}

input clientSort {
  direction: SortDirection!
  field: clientSortFields!
  nulls: SortNulls
}

enum clientSortFields {
  address
  email
  isActive
  isCompany
  isPerson
  phone
}

input clientUpdateFilter {
  address: StringFieldComparison
  and: [clientUpdateFilter!]
  email: StringFieldComparison
  isActive: BooleanFieldComparison
  isCompany: BooleanFieldComparison
  isPerson: BooleanFieldComparison
  or: [clientUpdateFilter!]
  phone: StringFieldComparison
}

type loginResponseDto {
  access_token: String!
  user: UserInput!
}

"""price"""
type price {
  aircraft: AircraftDetail!

  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  grandTotal: Float!
  id: ID!
  isActive: Boolean!
  prices: [PriceInputDto!]!

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

type priceAggregateGroupBy {
  aircraft: String
  isActive: Boolean
}

type priceCountAggregate {
  aircraft: Int
  isActive: Int
}

input priceDeleteFilter {
  aircraft: StringFieldComparison
  and: [priceDeleteFilter!]
  isActive: BooleanFieldComparison
  or: [priceDeleteFilter!]
}

input priceFilter {
  aircraft: StringFieldComparison
  and: [priceFilter!]
  isActive: BooleanFieldComparison
  or: [priceFilter!]
}

input priceInput {
  currency: String! = "INR"
  label: String! = "Block Hour Fee"
  margin: Float! = 0
  price: Float! = 0
  total: Float! = 0

  """duration"""
  unit: String! = "01:10"
}

type priceMaxAggregate {
  aircraft: String
}

type priceMinAggregate {
  aircraft: String
}

input priceSort {
  direction: SortDirection!
  field: priceSortFields!
  nulls: SortNulls
}

enum priceSortFields {
  aircraft
  isActive
}

input priceUpdateFilter {
  aircraft: StringFieldComparison
  and: [priceUpdateFilter!]
  isActive: BooleanFieldComparison
  or: [priceUpdateFilter!]
}

"""Representative"""
type representative {
  address: String!
  client: client!

  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  email: String!
  id: ID!
  isActive: Boolean!
  name: String!
  phone: String!

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

type representativeAggregateGroupBy {
  address: String
  client: String
  email: String
  isActive: Boolean
  name: String
  phone: String
}

type representativeCountAggregate {
  address: Int
  client: Int
  email: Int
  isActive: Int
  name: Int
  phone: Int
}

input representativeDeleteFilter {
  address: StringFieldComparison
  and: [representativeDeleteFilter!]
  client: StringFieldComparison
  email: StringFieldComparison
  isActive: BooleanFieldComparison
  name: StringFieldComparison
  or: [representativeDeleteFilter!]
  phone: StringFieldComparison
}

input representativeFilter {
  address: StringFieldComparison
  and: [representativeFilter!]
  client: StringFieldComparison
  email: StringFieldComparison
  isActive: BooleanFieldComparison
  name: StringFieldComparison
  or: [representativeFilter!]
  phone: StringFieldComparison
}

type representativeMaxAggregate {
  address: String
  client: String
  email: String
  name: String
  phone: String
}

type representativeMinAggregate {
  address: String
  client: String
  email: String
  name: String
  phone: String
}

input representativeSort {
  direction: SortDirection!
  field: representativeSortFields!
  nulls: SortNulls
}

enum representativeSortFields {
  address
  client
  email
  isActive
  name
  phone
}

input representativeUpdateFilter {
  address: StringFieldComparison
  and: [representativeUpdateFilter!]
  client: StringFieldComparison
  email: StringFieldComparison
  isActive: BooleanFieldComparison
  name: StringFieldComparison
  or: [representativeUpdateFilter!]
  phone: StringFieldComparison
}

"""resource"""
type resource {
  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  icon: String!
  id: ID!
  isActive: Boolean!
  menu: String!
  segment: String!
  title: String!

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

type resourceAggregateGroupBy {
  isActive: Boolean
  menu: String
}

type resourceCountAggregate {
  isActive: Int
  menu: Int
}

input resourceDeleteFilter {
  and: [resourceDeleteFilter!]
  isActive: BooleanFieldComparison
  menu: StringFieldComparison
  or: [resourceDeleteFilter!]
}

input resourceFilter {
  and: [resourceFilter!]
  isActive: BooleanFieldComparison
  menu: StringFieldComparison
  or: [resourceFilter!]
}

type resourceMaxAggregate {
  menu: String
}

type resourceMinAggregate {
  menu: String
}

input resourceSort {
  direction: SortDirection!
  field: resourceSortFields!
  nulls: SortNulls
}

enum resourceSortFields {
  isActive
  menu
}

input resourceUpdateFilter {
  and: [resourceUpdateFilter!]
  isActive: BooleanFieldComparison
  menu: StringFieldComparison
  or: [resourceUpdateFilter!]
}

"""User Roles"""
type role {
  accessPermissions: [AccessPermissionInput!]!

  """The date when the record was created"""
  createdAt: DateTime

  """The email of the user who created the record"""
  createdBy: String

  """The date when the record was deleted"""
  deletedAt: DateTime

  """The email of the user who deleted the record"""
  deletedBy: String
  description: String
  id: ID!
  isActive: Boolean!
  name: String!
  type: RoleType!

  """The date when the record was last updated"""
  updatedAt: DateTime

  """The email of the user who last updated the record"""
  updatedBy: String
}

type roleAggregateGroupBy {
  isActive: Boolean
  name: String
  type: RoleType
}

type roleCountAggregate {
  isActive: Int
  name: Int
  type: Int
}

input roleDeleteFilter {
  and: [roleDeleteFilter!]
  isActive: BooleanFieldComparison
  name: StringFieldComparison
  or: [roleDeleteFilter!]
  type: RoleTypeFilterComparison
}

input roleFilter {
  and: [roleFilter!]
  isActive: BooleanFieldComparison
  name: StringFieldComparison
  or: [roleFilter!]
  type: RoleTypeFilterComparison
}

type roleMaxAggregate {
  name: String
  type: RoleType
}

type roleMinAggregate {
  name: String
  type: RoleType
}

input roleSort {
  direction: SortDirection!
  field: roleSortFields!
  nulls: SortNulls
}

enum roleSortFields {
  isActive
  name
  type
}

input roleUpdateFilter {
  and: [roleUpdateFilter!]
  isActive: BooleanFieldComparison
  name: StringFieldComparison
  or: [roleUpdateFilter!]
  type: RoleTypeFilterComparison
}

enum type {
  AGENT_ADMIN
  AGENT_USER
  PLATFORM_USER
  SUPER_ADMIN
}

input userInput {
  address: String
  agent: AgentDto
  agentId: String
  city: String
  createdByUser: UserDTO
  dob: String
  email: String!
  gender: Gender
  id: String!
  image: String
  name: String!
  password: String!
  permissions: [JSONObject!]!
  phone: String
  pinCode: String
  roles: [String!]!
  type: type! = PLATFORM_USER
}